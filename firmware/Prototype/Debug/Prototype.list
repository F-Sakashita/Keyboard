
Prototype.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000777c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007888  08007888  00017888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007980  08007980  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08007980  08007980  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007980  08007980  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007980  08007980  00017980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007984  08007984  00017984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08007988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  200001cc  08007b54  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009d0  08007b54  000209d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120a5  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f93  00000000  00000000  0003229a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  00035230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  00035df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3e5  00000000  00000000  00036868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb98  00000000  00000000  00051c4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008afe6  00000000  00000000  000607e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb7cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035bc  00000000  00000000  000eb820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	08007870 	.word	0x08007870

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	08007870 	.word	0x08007870

0800014c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000156:	699a      	ldr	r2, [r3, #24]
 8000158:	4907      	ldr	r1, [pc, #28]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4313      	orrs	r3, r2
 800015e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000162:	699a      	ldr	r2, [r3, #24]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4013      	ands	r3, r2
 8000168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800016a:	68fb      	ldr	r3, [r7, #12]
}
 800016c:	bf00      	nop
 800016e:	3714      	adds	r7, #20
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	40021000 	.word	0x40021000

0800017c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000186:	683b      	ldr	r3, [r7, #0]
 8000188:	0a1b      	lsrs	r3, r3, #8
 800018a:	b29a      	uxth	r2, r3
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	615a      	str	r2, [r3, #20]
}
 8000190:	bf00      	nop
 8000192:	370c      	adds	r7, #12
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
	...

0800019c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b086      	sub	sp, #24
 80001a0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
 80001a8:	605a      	str	r2, [r3, #4]
 80001aa:	609a      	str	r2, [r3, #8]
 80001ac:	60da      	str	r2, [r3, #12]
 80001ae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80001b0:	2020      	movs	r0, #32
 80001b2:	f7ff ffcb 	bl	800014c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80001b6:	2004      	movs	r0, #4
 80001b8:	f7ff ffc8 	bl	800014c <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80001bc:	2008      	movs	r0, #8
 80001be:	f7ff ffc5 	bl	800014c <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80001c2:	4918      	ldr	r1, [pc, #96]	; (8000224 <MX_GPIO_Init+0x88>)
 80001c4:	4818      	ldr	r0, [pc, #96]	; (8000228 <MX_GPIO_Init+0x8c>)
 80001c6:	f7ff ffd9 	bl	800017c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, SW_OUT_ROW0_Pin|SW_OUT_ROW1_Pin);
 80001ca:	4918      	ldr	r1, [pc, #96]	; (800022c <MX_GPIO_Init+0x90>)
 80001cc:	4818      	ldr	r0, [pc, #96]	; (8000230 <MX_GPIO_Init+0x94>)
 80001ce:	f7ff ffd5 	bl	800017c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SW_IN_COL0_Pin|SW_IN_COL1_Pin|SW_IN_COL2_Pin;
 80001d2:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
 80001d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80001d8:	2304      	movs	r3, #4
 80001da:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4619      	mov	r1, r3
 80001e0:	4813      	ldr	r0, [pc, #76]	; (8000230 <MX_GPIO_Init+0x94>)
 80001e2:	f002 fa94 	bl	800270e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80001e6:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <MX_GPIO_Init+0x88>)
 80001e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80001ea:	2301      	movs	r3, #1
 80001ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80001ee:	2302      	movs	r3, #2
 80001f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80001f2:	2300      	movs	r3, #0
 80001f4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80001f6:	1d3b      	adds	r3, r7, #4
 80001f8:	4619      	mov	r1, r3
 80001fa:	480b      	ldr	r0, [pc, #44]	; (8000228 <MX_GPIO_Init+0x8c>)
 80001fc:	f002 fa87 	bl	800270e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SW_OUT_ROW0_Pin|SW_OUT_ROW1_Pin;
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <MX_GPIO_Init+0x90>)
 8000202:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000204:	2301      	movs	r3, #1
 8000206:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000208:	2302      	movs	r3, #2
 800020a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800020c:	2300      	movs	r3, #0
 800020e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	4619      	mov	r1, r3
 8000214:	4806      	ldr	r0, [pc, #24]	; (8000230 <MX_GPIO_Init+0x94>)
 8000216:	f002 fa7a 	bl	800270e <LL_GPIO_Init>

}
 800021a:	bf00      	nop
 800021c:	3718      	adds	r7, #24
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	04100010 	.word	0x04100010
 8000228:	40010c00 	.word	0x40010c00
 800022c:	04030003 	.word	0x04030003
 8000230:	40010800 	.word	0x40010800

08000234 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800023c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000240:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000244:	f003 0301 	and.w	r3, r3, #1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d013      	beq.n	8000274 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800024c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000250:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000254:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000258:	2b00      	cmp	r3, #0
 800025a:	d00b      	beq.n	8000274 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800025c:	e000      	b.n	8000260 <ITM_SendChar+0x2c>
    {
      __NOP();
 800025e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000260:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0f9      	beq.n	800025e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800026a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	b2d2      	uxtb	r2, r2
 8000272:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000274:	687b      	ldr	r3, [r7, #4]
}
 8000276:	4618      	mov	r0, r3
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr

08000280 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000284:	4b04      	ldr	r3, [pc, #16]	; (8000298 <LL_RCC_HSE_Enable+0x18>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a03      	ldr	r2, [pc, #12]	; (8000298 <LL_RCC_HSE_Enable+0x18>)
 800028a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	bf00      	nop
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40021000 	.word	0x40021000

0800029c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <LL_RCC_HSE_IsReady+0x20>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80002ac:	bf0c      	ite	eq
 80002ae:	2301      	moveq	r3, #1
 80002b0:	2300      	movne	r3, #0
 80002b2:	b2db      	uxtb	r3, r3
}
 80002b4:	4618      	mov	r0, r3
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40021000 	.word	0x40021000

080002c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <LL_RCC_SetSysClkSource+0x24>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	f023 0203 	bic.w	r2, r3, #3
 80002d0:	4904      	ldr	r1, [pc, #16]	; (80002e4 <LL_RCC_SetSysClkSource+0x24>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4313      	orrs	r3, r2
 80002d6:	604b      	str	r3, [r1, #4]
}
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000

080002e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002ec:	4b03      	ldr	r3, [pc, #12]	; (80002fc <LL_RCC_GetSysClkSource+0x14>)
 80002ee:	685b      	ldr	r3, [r3, #4]
 80002f0:	f003 030c 	and.w	r3, r3, #12
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000

08000300 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000308:	4b06      	ldr	r3, [pc, #24]	; (8000324 <LL_RCC_SetAHBPrescaler+0x24>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000310:	4904      	ldr	r1, [pc, #16]	; (8000324 <LL_RCC_SetAHBPrescaler+0x24>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4313      	orrs	r3, r2
 8000316:	604b      	str	r3, [r1, #4]
}
 8000318:	bf00      	nop
 800031a:	370c      	adds	r7, #12
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000

08000328 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000338:	4904      	ldr	r1, [pc, #16]	; (800034c <LL_RCC_SetAPB1Prescaler+0x24>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4313      	orrs	r3, r2
 800033e:	604b      	str	r3, [r1, #4]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	bc80      	pop	{r7}
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000

08000350 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <LL_RCC_SetAPB2Prescaler+0x24>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000360:	4904      	ldr	r1, [pc, #16]	; (8000374 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4313      	orrs	r3, r2
 8000366:	604b      	str	r3, [r1, #4]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000

08000378 <LL_RCC_SetUSBClockSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSBClockSource(uint32_t USBxSource)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_USBPRE)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, USBxSource);
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <LL_RCC_SetUSBClockSource+0x24>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000388:	4904      	ldr	r1, [pc, #16]	; (800039c <LL_RCC_SetUSBClockSource+0x24>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4313      	orrs	r3, r2
 800038e:	604b      	str	r3, [r1, #4]
#else /*RCC_CFGR_OTGFSPRE*/
  MODIFY_REG(RCC->CFGR, RCC_CFGR_OTGFSPRE, USBxSource);
#endif /*RCC_CFGR_USBPRE*/
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000

080003a0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80003a4:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <LL_RCC_PLL_Enable+0x18>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a03      	ldr	r2, [pc, #12]	; (80003b8 <LL_RCC_PLL_Enable+0x18>)
 80003aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003ae:	6013      	str	r3, [r2, #0]
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000

080003bc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <LL_RCC_PLL_IsReady+0x20>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80003cc:	bf0c      	ite	eq
 80003ce:	2301      	moveq	r3, #1
 80003d0:	2300      	movne	r3, #0
 80003d2:	b2db      	uxtb	r3, r3
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80003ec:	685b      	ldr	r3, [r3, #4]
 80003ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	430b      	orrs	r3, r1
 80003fc:	4903      	ldr	r1, [pc, #12]	; (800040c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80003fe:	4313      	orrs	r3, r2
 8000400:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <LL_FLASH_SetLatency+0x24>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f023 0207 	bic.w	r2, r3, #7
 8000420:	4904      	ldr	r1, [pc, #16]	; (8000434 <LL_FLASH_SetLatency+0x24>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4313      	orrs	r3, r2
 8000426:	600b      	str	r3, [r1, #0]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40022000 	.word	0x40022000

08000438 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800043c:	4b03      	ldr	r3, [pc, #12]	; (800044c <LL_FLASH_GetLatency+0x14>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f003 0307 	and.w	r3, r3, #7
}
 8000444:	4618      	mov	r0, r3
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	40022000 	.word	0x40022000

08000450 <LL_GPIO_IsInputPinSet>:
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	43da      	mvns	r2, r3
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	0a1b      	lsrs	r3, r3, #8
 8000464:	4013      	ands	r3, r2
 8000466:	b29b      	uxth	r3, r3
 8000468:	2b00      	cmp	r3, #0
 800046a:	bf0c      	ite	eq
 800046c:	2301      	moveq	r3, #1
 800046e:	2300      	movne	r3, #0
 8000470:	b2db      	uxtb	r3, r3
}
 8000472:	4618      	mov	r0, r3
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <LL_GPIO_SetOutputPin>:
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000486:	683b      	ldr	r3, [r7, #0]
 8000488:	0a1b      	lsrs	r3, r3, #8
 800048a:	b29a      	uxth	r2, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	611a      	str	r2, [r3, #16]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	bc80      	pop	{r7}
 8000498:	4770      	bx	lr

0800049a <LL_GPIO_ResetOutputPin>:
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	0a1b      	lsrs	r3, r3, #8
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	615a      	str	r2, [r3, #20]
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	0a1b      	lsrs	r3, r3, #8
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	4013      	ands	r3, r2
 80004d6:	041a      	lsls	r2, r3, #16
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	43d9      	mvns	r1, r3
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	400b      	ands	r3, r1
 80004e0:	431a      	orrs	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	611a      	str	r2, [r3, #16]
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	e009      	b.n	8000516 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	60ba      	str	r2, [r7, #8]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff fe92 	bl	8000234 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	3301      	adds	r3, #1
 8000514:	617b      	str	r3, [r7, #20]
 8000516:	697a      	ldr	r2, [r7, #20]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	429a      	cmp	r2, r3
 800051c:	dbf1      	blt.n	8000502 <_write+0x12>
  }
  return len;
 800051e:	687b      	ldr	r3, [r7, #4]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3718      	adds	r7, #24
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b5b0      	push	{r4, r5, r7, lr}
 800052a:	b08e      	sub	sp, #56	; 0x38
 800052c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052e:	f000 fa23 	bl	8000978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000532:	f000 f8c1 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000536:	f7ff fe31 	bl	800019c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800053a:	f005 fe4d 	bl	80061d8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint32_t uiDebugTime = 0u;
 800053e:	2300      	movs	r3, #0
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t uiLedTime = 0u;
 8000542:	2300      	movs	r3, #0
 8000544:	623b      	str	r3, [r7, #32]
  uint8_t ucSwState[6];
  bool bSwToggle = false;
 8000546:	2300      	movs	r3, #0
 8000548:	77fb      	strb	r3, [r7, #31]
  const uint32_t uiPeriod = 1u;
 800054a:	2301      	movs	r3, #1
 800054c:	61bb      	str	r3, [r7, #24]
	  uint8_t reserved;
	  uint8_t ucKey[6];
  }KeyboardHID_t;
  KeyboardHID_t stkeyboardData;

  stkeyboardData.ucId = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	713b      	strb	r3, [r7, #4]
  stkeyboardData.ucModifiers = 0;
 8000552:	2300      	movs	r3, #0
 8000554:	717b      	strb	r3, [r7, #5]
  stkeyboardData.reserved = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	71bb      	strb	r3, [r7, #6]
  for(uint8_t i = 0; i < 6; i++)  stkeyboardData.ucKey[i] = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	77bb      	strb	r3, [r7, #30]
 800055e:	e009      	b.n	8000574 <main+0x4c>
 8000560:	7fbb      	ldrb	r3, [r7, #30]
 8000562:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000566:	4413      	add	r3, r2
 8000568:	2200      	movs	r2, #0
 800056a:	f803 2c21 	strb.w	r2, [r3, #-33]
 800056e:	7fbb      	ldrb	r3, [r7, #30]
 8000570:	3301      	adds	r3, #1
 8000572:	77bb      	strb	r3, [r7, #30]
 8000574:	7fbb      	ldrb	r3, [r7, #30]
 8000576:	2b05      	cmp	r3, #5
 8000578:	d9f2      	bls.n	8000560 <main+0x38>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!bSwToggle){
 800057a:	7ffb      	ldrb	r3, [r7, #31]
 800057c:	f083 0301 	eor.w	r3, r3, #1
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d020      	beq.n	80005c8 <main+0xa0>
		  LL_GPIO_SetOutputPin(SW_OUT_ROW0_GPIO_Port, SW_OUT_ROW0_Pin);
 8000586:	4946      	ldr	r1, [pc, #280]	; (80006a0 <main+0x178>)
 8000588:	4846      	ldr	r0, [pc, #280]	; (80006a4 <main+0x17c>)
 800058a:	f7ff ff77 	bl	800047c <LL_GPIO_SetOutputPin>
		  LL_GPIO_ResetOutputPin(SW_OUT_ROW1_GPIO_Port, SW_OUT_ROW1_Pin);
 800058e:	4946      	ldr	r1, [pc, #280]	; (80006a8 <main+0x180>)
 8000590:	4844      	ldr	r0, [pc, #272]	; (80006a4 <main+0x17c>)
 8000592:	f7ff ff82 	bl	800049a <LL_GPIO_ResetOutputPin>
		  ucSwState[0] = LL_GPIO_IsInputPinSet(SW_IN_COL0_GPIO_Port, SW_IN_COL0_Pin);
 8000596:	f242 0120 	movw	r1, #8224	; 0x2020
 800059a:	4842      	ldr	r0, [pc, #264]	; (80006a4 <main+0x17c>)
 800059c:	f7ff ff58 	bl	8000450 <LL_GPIO_IsInputPinSet>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	743b      	strb	r3, [r7, #16]
		  ucSwState[1] = LL_GPIO_IsInputPinSet(SW_IN_COL1_GPIO_Port, SW_IN_COL1_Pin);
 80005a6:	f244 0140 	movw	r1, #16448	; 0x4040
 80005aa:	483e      	ldr	r0, [pc, #248]	; (80006a4 <main+0x17c>)
 80005ac:	f7ff ff50 	bl	8000450 <LL_GPIO_IsInputPinSet>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	747b      	strb	r3, [r7, #17]
		  ucSwState[2] = LL_GPIO_IsInputPinSet(SW_IN_COL2_GPIO_Port, SW_IN_COL2_Pin);
 80005b6:	f248 0180 	movw	r1, #32896	; 0x8080
 80005ba:	483a      	ldr	r0, [pc, #232]	; (80006a4 <main+0x17c>)
 80005bc:	f7ff ff48 	bl	8000450 <LL_GPIO_IsInputPinSet>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	74bb      	strb	r3, [r7, #18]
 80005c6:	e01f      	b.n	8000608 <main+0xe0>
	  }else{
		  LL_GPIO_SetOutputPin(SW_OUT_ROW1_GPIO_Port, SW_OUT_ROW1_Pin);
 80005c8:	4937      	ldr	r1, [pc, #220]	; (80006a8 <main+0x180>)
 80005ca:	4836      	ldr	r0, [pc, #216]	; (80006a4 <main+0x17c>)
 80005cc:	f7ff ff56 	bl	800047c <LL_GPIO_SetOutputPin>
		  LL_GPIO_ResetOutputPin(SW_OUT_ROW0_GPIO_Port, SW_OUT_ROW0_Pin);
 80005d0:	4933      	ldr	r1, [pc, #204]	; (80006a0 <main+0x178>)
 80005d2:	4834      	ldr	r0, [pc, #208]	; (80006a4 <main+0x17c>)
 80005d4:	f7ff ff61 	bl	800049a <LL_GPIO_ResetOutputPin>
		  ucSwState[3] = LL_GPIO_IsInputPinSet(SW_IN_COL0_GPIO_Port, SW_IN_COL0_Pin);
 80005d8:	f242 0120 	movw	r1, #8224	; 0x2020
 80005dc:	4831      	ldr	r0, [pc, #196]	; (80006a4 <main+0x17c>)
 80005de:	f7ff ff37 	bl	8000450 <LL_GPIO_IsInputPinSet>
 80005e2:	4603      	mov	r3, r0
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	74fb      	strb	r3, [r7, #19]
		  ucSwState[4] = LL_GPIO_IsInputPinSet(SW_IN_COL1_GPIO_Port, SW_IN_COL1_Pin);
 80005e8:	f244 0140 	movw	r1, #16448	; 0x4040
 80005ec:	482d      	ldr	r0, [pc, #180]	; (80006a4 <main+0x17c>)
 80005ee:	f7ff ff2f 	bl	8000450 <LL_GPIO_IsInputPinSet>
 80005f2:	4603      	mov	r3, r0
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	753b      	strb	r3, [r7, #20]
		  ucSwState[5] = LL_GPIO_IsInputPinSet(SW_IN_COL2_GPIO_Port, SW_IN_COL2_Pin);
 80005f8:	f248 0180 	movw	r1, #32896	; 0x8080
 80005fc:	4829      	ldr	r0, [pc, #164]	; (80006a4 <main+0x17c>)
 80005fe:	f7ff ff27 	bl	8000450 <LL_GPIO_IsInputPinSet>
 8000602:	4603      	mov	r3, r0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	757b      	strb	r3, [r7, #21]
	  }
	  bSwToggle = !bSwToggle;
 8000608:	7ffb      	ldrb	r3, [r7, #31]
 800060a:	2b00      	cmp	r3, #0
 800060c:	bf14      	ite	ne
 800060e:	2301      	movne	r3, #1
 8000610:	2300      	moveq	r3, #0
 8000612:	b2db      	uxtb	r3, r3
 8000614:	f083 0301 	eor.w	r3, r3, #1
 8000618:	b2db      	uxtb	r3, r3
 800061a:	77fb      	strb	r3, [r7, #31]
 800061c:	7ffb      	ldrb	r3, [r7, #31]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	77fb      	strb	r3, [r7, #31]

	  //USB転送
	  //ref : https://wiki.onakasuita.org/pukiwiki/?HID%2Fキーコード
	  stkeyboardData.ucKey[0] = (ucSwState[0]) ? 0x04 : 0;	//input a
 8000624:	7c3b      	ldrb	r3, [r7, #16]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <main+0x106>
 800062a:	2304      	movs	r3, #4
 800062c:	e000      	b.n	8000630 <main+0x108>
 800062e:	2300      	movs	r3, #0
 8000630:	71fb      	strb	r3, [r7, #7]
	  USBD_HID_SendReport(MX_USB_DEVICE_GetHandlePtr(), (uint8_t *)&stkeyboardData, sizeof(stkeyboardData));
 8000632:	f005 fdc7 	bl	80061c4 <MX_USB_DEVICE_GetHandlePtr>
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2209      	movs	r2, #9
 800063a:	4619      	mov	r1, r3
 800063c:	f004 fcd2 	bl	8004fe4 <USBD_HID_SendReport>


	  if(uiDebugTime >= 100u){
 8000640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000642:	2b63      	cmp	r3, #99	; 0x63
 8000644:	d914      	bls.n	8000670 <main+0x148>
		  uiDebugTime = 0u;
 8000646:	2300      	movs	r3, #0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
		  printf("%d, %d, %d, %d, %d, %d\n", ucSwState[0]
 800064a:	7c3b      	ldrb	r3, [r7, #16]
 800064c:	4618      	mov	r0, r3
										   , stkeyboardData.ucKey[0]
 800064e:	79fb      	ldrb	r3, [r7, #7]
		  printf("%d, %d, %d, %d, %d, %d\n", ucSwState[0]
 8000650:	461c      	mov	r4, r3
										   , ucSwState[2]
 8000652:	7cbb      	ldrb	r3, [r7, #18]
		  printf("%d, %d, %d, %d, %d, %d\n", ucSwState[0]
 8000654:	461d      	mov	r5, r3
										   , ucSwState[3]
 8000656:	7cfb      	ldrb	r3, [r7, #19]
										   , ucSwState[4]
 8000658:	7d3a      	ldrb	r2, [r7, #20]
										   , ucSwState[5]);
 800065a:	7d79      	ldrb	r1, [r7, #21]
		  printf("%d, %d, %d, %d, %d, %d\n", ucSwState[0]
 800065c:	9102      	str	r1, [sp, #8]
 800065e:	9201      	str	r2, [sp, #4]
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	462b      	mov	r3, r5
 8000664:	4622      	mov	r2, r4
 8000666:	4601      	mov	r1, r0
 8000668:	4810      	ldr	r0, [pc, #64]	; (80006ac <main+0x184>)
 800066a:	f006 f9a1 	bl	80069b0 <iprintf>
 800066e:	e003      	b.n	8000678 <main+0x150>
	  }else{
		  uiDebugTime += uiPeriod;
 8000670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000672:	69bb      	ldr	r3, [r7, #24]
 8000674:	4413      	add	r3, r2
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
	  }

	  if(uiLedTime >= 500u){
 8000678:	6a3b      	ldr	r3, [r7, #32]
 800067a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800067e:	d306      	bcc.n	800068e <main+0x166>
		  LL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8000680:	490b      	ldr	r1, [pc, #44]	; (80006b0 <main+0x188>)
 8000682:	480c      	ldr	r0, [pc, #48]	; (80006b4 <main+0x18c>)
 8000684:	f7ff ff18 	bl	80004b8 <LL_GPIO_TogglePin>
		  uiLedTime = 0u;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
 800068c:	e003      	b.n	8000696 <main+0x16e>
	  }else{
		 uiLedTime += uiPeriod;
 800068e:	6a3a      	ldr	r2, [r7, #32]
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	4413      	add	r3, r2
 8000694:	623b      	str	r3, [r7, #32]
	  }

	  LL_mDelay(uiPeriod);
 8000696:	69b8      	ldr	r0, [r7, #24]
 8000698:	f004 fb2c 	bl	8004cf4 <LL_mDelay>
	  if(!bSwToggle){
 800069c:	e76d      	b.n	800057a <main+0x52>
 800069e:	bf00      	nop
 80006a0:	04010001 	.word	0x04010001
 80006a4:	40010800 	.word	0x40010800
 80006a8:	04020002 	.word	0x04020002
 80006ac:	08007888 	.word	0x08007888
 80006b0:	04100010 	.word	0x04100010
 80006b4:	40010c00 	.word	0x40010c00

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 80006bc:	2002      	movs	r0, #2
 80006be:	f7ff fea7 	bl	8000410 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 80006c2:	bf00      	nop
 80006c4:	f7ff feb8 	bl	8000438 <LL_FLASH_GetLatency>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d1fa      	bne.n	80006c4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 80006ce:	f7ff fdd7 	bl	8000280 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80006d2:	bf00      	nop
 80006d4:	f7ff fde2 	bl	800029c <LL_RCC_HSE_IsReady>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d1fa      	bne.n	80006d4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 80006de:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80006e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80006e6:	f7ff fe7b 	bl	80003e0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80006ea:	f7ff fe59 	bl	80003a0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80006ee:	bf00      	nop
 80006f0:	f7ff fe64 	bl	80003bc <LL_RCC_PLL_IsReady>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d1fa      	bne.n	80006f0 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff fe00 	bl	8000300 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000700:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000704:	f7ff fe10 	bl	8000328 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff fe21 	bl	8000350 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff fdd6 	bl	80002c0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000714:	bf00      	nop
 8000716:	f7ff fde7 	bl	80002e8 <LL_RCC_GetSysClkSource>
 800071a:	4603      	mov	r3, r0
 800071c:	2b08      	cmp	r3, #8
 800071e:	d1fa      	bne.n	8000716 <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <SystemClock_Config+0x88>)
 8000722:	f004 fb0b 	bl	8004d3c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000726:	2000      	movs	r0, #0
 8000728:	f000 f93c 	bl	80009a4 <HAL_InitTick>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000732:	f000 f807 	bl	8000744 <Error_Handler>
  }
  LL_RCC_SetUSBClockSource(LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5);
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff fe1e 	bl	8000378 <LL_RCC_SetUSBClockSource>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	044aa200 	.word	0x044aa200

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_MspInit+0x5c>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a14      	ldr	r2, [pc, #80]	; (80007ac <HAL_MspInit+0x5c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6193      	str	r3, [r2, #24]
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_MspInit+0x5c>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x5c>)
 8000770:	69db      	ldr	r3, [r3, #28]
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <HAL_MspInit+0x5c>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	61d3      	str	r3, [r2, #28]
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_MspInit+0x5c>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_MspInit+0x60>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_MspInit+0x60>)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010000 	.word	0x40010000

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr

080007f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fa:	f000 f903 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800080a:	f000 fb4b 	bl	8000ea4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200006d4 	.word	0x200006d4

08000818 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e00a      	b.n	8000840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800082a:	f3af 8000 	nop.w
 800082e:	4601      	mov	r1, r0
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	60ba      	str	r2, [r7, #8]
 8000836:	b2ca      	uxtb	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	dbf0      	blt.n	800082a <_read+0x12>
	}

return len;
 8000848:	687b      	ldr	r3, [r7, #4]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000852:	b480      	push	{r7}
 8000854:	b083      	sub	sp, #12
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
	return -1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000878:	605a      	str	r2, [r3, #4]
	return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr

08000886 <_isatty>:

int _isatty(int file)
{
 8000886:	b480      	push	{r7}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
	return 1;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800089a:	b480      	push	{r7}
 800089c:	b085      	sub	sp, #20
 800089e:	af00      	add	r7, sp, #0
 80008a0:	60f8      	str	r0, [r7, #12]
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
	return 0;
 80008a6:	2300      	movs	r3, #0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
	...

080008b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <_sbrk+0x5c>)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_sbrk+0x60>)
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_sbrk+0x64>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <_sbrk+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d207      	bcs.n	80008f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e4:	f006 f832 	bl	800694c <__errno>
 80008e8:	4603      	mov	r3, r0
 80008ea:	220c      	movs	r2, #12
 80008ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f2:	e009      	b.n	8000908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <_sbrk+0x64>)
 8000904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20005000 	.word	0x20005000
 8000914:	00000400 	.word	0x00000400
 8000918:	200001e8 	.word	0x200001e8
 800091c:	200009d0 	.word	0x200009d0

08000920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092e:	490d      	ldr	r1, [pc, #52]	; (8000964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000934:	e002      	b.n	800093c <LoopCopyDataInit>

08000936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800093a:	3304      	adds	r3, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800093c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000940:	d3f9      	bcc.n	8000936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000942:	4a0a      	ldr	r2, [pc, #40]	; (800096c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000944:	4c0a      	ldr	r4, [pc, #40]	; (8000970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000948:	e001      	b.n	800094e <LoopFillZerobss>

0800094a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800094a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800094c:	3204      	adds	r2, #4

0800094e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000950:	d3fb      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000952:	f7ff ffe5 	bl	8000920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000956:	f005 ffff 	bl	8006958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095a:	f7ff fde5 	bl	8000528 <main>
  bx lr
 800095e:	4770      	bx	lr
  ldr r0, =_sdata
 8000960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000964:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8000968:	08007988 	.word	0x08007988
  ldr r2, =_sbss
 800096c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8000970:	200009d0 	.word	0x200009d0

08000974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000974:	e7fe      	b.n	8000974 <ADC1_2_IRQHandler>
	...

08000978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_Init+0x28>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_Init+0x28>)
 8000982:	f043 0310 	orr.w	r3, r3, #16
 8000986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f919 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fedc 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40022000 	.word	0x40022000

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f931 	bl	8000c2a <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e0:	f000 f8f9 	bl	8000bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_IncTick+0x1c>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x20>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <HAL_IncTick+0x20>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	20000008 	.word	0x20000008
 8000a24:	2000020c 	.word	0x2000020c

08000a28 <__NVIC_SetPriorityGrouping>:
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_EnableIRQ>:
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	db0b      	blt.n	8000ab6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f003 021f 	and.w	r2, r3, #31
 8000aa4:	4906      	ldr	r1, [pc, #24]	; (8000ac0 <__NVIC_EnableIRQ+0x34>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	095b      	lsrs	r3, r3, #5
 8000aac:	2001      	movs	r0, #1
 8000aae:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_SetPriority>:
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	; (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	; (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	; 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Config>:
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f7ff ff90 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff2d 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be8:	f7ff ff42 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	6978      	ldr	r0, [r7, #20]
 8000bf4:	f7ff ff90 	bl	8000b18 <NVIC_EncodePriority>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff5f 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff35 	bl	8000a8c <__NVIC_EnableIRQ>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ffa2 	bl	8000b7c <SysTick_Config>
 8000c38:	4603      	mov	r3, r0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c44:	b08b      	sub	sp, #44	; 0x2c
 8000c46:	af06      	add	r7, sp, #24
 8000c48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e0fd      	b.n	8000e50 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d106      	bne.n	8000c6e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f005 fbe9 	bl	8006440 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2203      	movs	r2, #3
 8000c72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fdd3 	bl	8002826 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	687e      	ldr	r6, [r7, #4]
 8000c88:	466d      	mov	r5, sp
 8000c8a:	f106 0410 	add.w	r4, r6, #16
 8000c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	602b      	str	r3, [r5, #0]
 8000c96:	1d33      	adds	r3, r6, #4
 8000c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c9a:	6838      	ldr	r0, [r7, #0]
 8000c9c:	f001 fd9d 	bl	80027da <USB_CoreInit>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d005      	beq.n	8000cb2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2202      	movs	r2, #2
 8000caa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e0ce      	b.n	8000e50 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 fdce 	bl	800285a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e04c      	b.n	8000d5e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	440b      	add	r3, r1
 8000cea:	7bfa      	ldrb	r2, [r7, #15]
 8000cec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	b298      	uxth	r0, r3
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	440b      	add	r3, r1
 8000d00:	3336      	adds	r3, #54	; 0x36
 8000d02:	4602      	mov	r2, r0
 8000d04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	440b      	add	r3, r1
 8000d16:	3303      	adds	r3, #3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	440b      	add	r3, r1
 8000d2a:	3338      	adds	r3, #56	; 0x38
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	440b      	add	r3, r1
 8000d3e:	333c      	adds	r3, #60	; 0x3c
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	440b      	add	r3, r1
 8000d52:	3340      	adds	r3, #64	; 0x40
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	7bfa      	ldrb	r2, [r7, #15]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d3ad      	bcc.n	8000cc4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e044      	b.n	8000df8 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d6e:	7bfa      	ldrb	r2, [r7, #15]
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d84:	7bfa      	ldrb	r2, [r7, #15]
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	440b      	add	r3, r1
 8000d92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d96:	7bfa      	ldrb	r2, [r7, #15]
 8000d98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	440b      	add	r3, r1
 8000da8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ddc:	7bfa      	ldrb	r2, [r7, #15]
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	440b      	add	r3, r1
 8000dea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	3301      	adds	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3b5      	bcc.n	8000d6e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	687e      	ldr	r6, [r7, #4]
 8000e0a:	466d      	mov	r5, sp
 8000e0c:	f106 0410 	add.w	r4, r6, #16
 8000e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	602b      	str	r3, [r5, #0]
 8000e18:	1d33      	adds	r3, r6, #4
 8000e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1c:	6838      	ldr	r0, [r7, #0]
 8000e1e:	f001 fd28 	bl	8002872 <USB_DevInit>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e00d      	b.n	8000e50 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fe9a 	bl	8004b82 <USB_DevDisconnect>

  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <HAL_PCD_Start+0x16>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e016      	b.n	8000e9c <HAL_PCD_Start+0x44>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 fcbd 	bl	80027fa <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e80:	2101      	movs	r1, #1
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f005 fd2b 	bl	80068de <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fe6e 	bl	8004b6e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 fe70 	bl	8004b96 <USB_ReadInterrupts>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ec0:	d102      	bne.n	8000ec8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 fb4a 	bl	800155c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f003 fe62 	bl	8004b96 <USB_ReadInterrupts>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000edc:	d112      	bne.n	8000f04 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ef0:	b292      	uxth	r2, r2
 8000ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f005 fb1d 	bl	8006536 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000efc:	2100      	movs	r1, #0
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 f925 	bl	800114e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 fe44 	bl	8004b96 <USB_ReadInterrupts>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f18:	d10b      	bne.n	8000f32 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f2c:	b292      	uxth	r2, r2
 8000f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 fe2d 	bl	8004b96 <USB_ReadInterrupts>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f46:	d10b      	bne.n	8000f60 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fe16 	bl	8004b96 <USB_ReadInterrupts>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f74:	d126      	bne.n	8000fc4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0204 	bic.w	r2, r2, #4
 8000f88:	b292      	uxth	r2, r2
 8000f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0208 	bic.w	r2, r2, #8
 8000fa0:	b292      	uxth	r2, r2
 8000fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f005 fafe 	bl	80065a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f003 fde4 	bl	8004b96 <USB_ReadInterrupts>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fd8:	f040 8084 	bne.w	80010e4 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	77fb      	strb	r3, [r7, #31]
 8000fe0:	e011      	b.n	8001006 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	7ffb      	ldrb	r3, [r7, #31]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	441a      	add	r2, r3
 8000fee:	7ffb      	ldrb	r3, [r7, #31]
 8000ff0:	8812      	ldrh	r2, [r2, #0]
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	f107 0120 	add.w	r1, r7, #32
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001000:	7ffb      	ldrb	r3, [r7, #31]
 8001002:	3301      	adds	r3, #1
 8001004:	77fb      	strb	r3, [r7, #31]
 8001006:	7ffb      	ldrb	r3, [r7, #31]
 8001008:	2b07      	cmp	r3, #7
 800100a:	d9ea      	bls.n	8000fe2 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001014:	b29a      	uxth	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	b292      	uxth	r2, r2
 8001020:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0201 	bic.w	r2, r2, #1
 8001036:	b292      	uxth	r2, r2
 8001038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800103c:	bf00      	nop
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001046:	b29b      	uxth	r3, r3
 8001048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f6      	beq.n	800103e <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001058:	b29a      	uxth	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001062:	b292      	uxth	r2, r2
 8001064:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	77fb      	strb	r3, [r7, #31]
 800106c:	e010      	b.n	8001090 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	4611      	mov	r1, r2
 8001076:	7ffa      	ldrb	r2, [r7, #31]
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	440a      	add	r2, r1
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	f107 0120 	add.w	r1, r7, #32
 8001082:	440b      	add	r3, r1
 8001084:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001088:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800108a:	7ffb      	ldrb	r3, [r7, #31]
 800108c:	3301      	adds	r3, #1
 800108e:	77fb      	strb	r3, [r7, #31]
 8001090:	7ffb      	ldrb	r3, [r7, #31]
 8001092:	2b07      	cmp	r3, #7
 8001094:	d9eb      	bls.n	800106e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0208 	orr.w	r2, r2, #8
 80010a8:	b292      	uxth	r2, r2
 80010aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010c0:	b292      	uxth	r2, r2
 80010c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0204 	orr.w	r2, r2, #4
 80010d8:	b292      	uxth	r2, r2
 80010da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f005 fa48 	bl	8006574 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 fd54 	bl	8004b96 <USB_ReadInterrupts>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f8:	d10e      	bne.n	8001118 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001102:	b29a      	uxth	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800110c:	b292      	uxth	r2, r2
 800110e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f005 fa01 	bl	800651a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fd3a 	bl	8004b96 <USB_ReadInterrupts>
 8001122:	4603      	mov	r3, r0
 8001124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800112c:	d10b      	bne.n	8001146 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001136:	b29a      	uxth	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001140:	b292      	uxth	r2, r2
 8001142:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	460b      	mov	r3, r1
 8001158:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <HAL_PCD_SetAddress+0x1a>
 8001164:	2302      	movs	r3, #2
 8001166:	e013      	b.n	8001190 <HAL_PCD_SetAddress+0x42>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	78fa      	ldrb	r2, [r7, #3]
 8001174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	78fa      	ldrb	r2, [r7, #3]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fce1 	bl	8004b48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	4608      	mov	r0, r1
 80011a2:	4611      	mov	r1, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	4603      	mov	r3, r0
 80011a8:	70fb      	strb	r3, [r7, #3]
 80011aa:	460b      	mov	r3, r1
 80011ac:	803b      	strh	r3, [r7, #0]
 80011ae:	4613      	mov	r3, r2
 80011b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da0e      	bge.n	80011dc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2201      	movs	r2, #1
 80011d8:	705a      	strb	r2, [r3, #1]
 80011da:	e00e      	b.n	80011fa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	f003 0207 	and.w	r2, r3, #7
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	b2da      	uxtb	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001206:	883a      	ldrh	r2, [r7, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	78ba      	ldrb	r2, [r7, #2]
 8001210:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b29a      	uxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d102      	bne.n	8001230 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_PCD_EP_Open+0xa6>
 800123a:	2302      	movs	r3, #2
 800123c:	e00e      	b.n	800125c <HAL_PCD_EP_Open+0xc4>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68f9      	ldr	r1, [r7, #12]
 800124c:	4618      	mov	r0, r3
 800124e:	f001 fb31 	bl	80028b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800125a:	7afb      	ldrb	r3, [r7, #11]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001274:	2b00      	cmp	r3, #0
 8001276:	da0e      	bge.n	8001296 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2201      	movs	r2, #1
 8001292:	705a      	strb	r2, [r3, #1]
 8001294:	e00e      	b.n	80012b4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	f003 0207 	and.w	r2, r3, #7
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2200      	movs	r2, #0
 80012b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_PCD_EP_Close+0x6a>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e00e      	b.n	80012ec <HAL_PCD_EP_Close+0x88>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68f9      	ldr	r1, [r7, #12]
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fe53 	bl	8002f88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	460b      	mov	r3, r1
 8001302:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001304:	7afb      	ldrb	r3, [r7, #11]
 8001306:	f003 0207 	and.w	r2, r3, #7
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2200      	movs	r2, #0
 8001332:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	b2da      	uxtb	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001340:	7afb      	ldrb	r3, [r7, #11]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6979      	ldr	r1, [r7, #20]
 8001350:	4618      	mov	r0, r3
 8001352:	f002 f805 	bl	8003360 <USB_EPStartXfer>
 8001356:	e005      	b.n	8001364 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6979      	ldr	r1, [r7, #20]
 800135e:	4618      	mov	r0, r3
 8001360:	f001 fffe 	bl	8003360 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	460b      	mov	r3, r1
 800137c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800137e:	7afb      	ldrb	r3, [r7, #11]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	4613      	mov	r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	4413      	add	r3, r2
 8001392:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	2200      	movs	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	2201      	movs	r2, #1
 80013b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013ba:	7afb      	ldrb	r3, [r7, #11]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013c6:	7afb      	ldrb	r3, [r7, #11]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d106      	bne.n	80013de <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6979      	ldr	r1, [r7, #20]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f001 ffc2 	bl	8003360 <USB_EPStartXfer>
 80013dc:	e005      	b.n	80013ea <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6979      	ldr	r1, [r7, #20]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 ffbb 	bl	8003360 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	f003 0207 	and.w	r2, r3, #7
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	429a      	cmp	r2, r3
 800140c:	d901      	bls.n	8001412 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e04c      	b.n	80014ac <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001416:	2b00      	cmp	r3, #0
 8001418:	da0e      	bge.n	8001438 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2201      	movs	r2, #1
 8001434:	705a      	strb	r2, [r3, #1]
 8001436:	e00c      	b.n	8001452 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001438:	78fa      	ldrb	r2, [r7, #3]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2201      	movs	r2, #1
 8001456:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	b2da      	uxtb	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800146a:	2b01      	cmp	r3, #1
 800146c:	d101      	bne.n	8001472 <HAL_PCD_EP_SetStall+0x7e>
 800146e:	2302      	movs	r3, #2
 8001470:	e01c      	b.n	80014ac <HAL_PCD_EP_SetStall+0xb8>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68f9      	ldr	r1, [r7, #12]
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fa64 	bl	800494e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	2b00      	cmp	r3, #0
 800148e:	d108      	bne.n	80014a2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f003 fb89 	bl	8004bb4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	f003 020f 	and.w	r2, r3, #15
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d901      	bls.n	80014d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e040      	b.n	8001554 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80014d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	da0e      	bge.n	80014f8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2201      	movs	r2, #1
 80014f4:	705a      	strb	r2, [r3, #1]
 80014f6:	e00e      	b.n	8001516 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	f003 0207 	and.w	r2, r3, #7
 80014fe:	4613      	mov	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	b2da      	uxtb	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_PCD_EP_ClrStall+0x82>
 8001532:	2302      	movs	r3, #2
 8001534:	e00e      	b.n	8001554 <HAL_PCD_EP_ClrStall+0xa0>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68f9      	ldr	r1, [r7, #12]
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fa52 	bl	80049ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	; 0x38
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001564:	e2ec      	b.n	8001b40 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800156e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001570:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f003 030f 	and.w	r3, r3, #15
 8001578:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800157c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001580:	2b00      	cmp	r3, #0
 8001582:	f040 8161 	bne.w	8001848 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001586:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	2b00      	cmp	r3, #0
 800158e:	d152      	bne.n	8001636 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	b29b      	uxth	r3, r3
 8001598:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800159c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015a0:	81fb      	strh	r3, [r7, #14]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	89fb      	ldrh	r3, [r7, #14]
 80015a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3328      	adds	r3, #40	; 0x28
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	3302      	adds	r3, #2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	441a      	add	r2, r3
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015f4:	2100      	movs	r1, #0
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f004 ff75 	bl	80064e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 829b 	beq.w	8001b40 <PCD_EP_ISR_Handler+0x5e4>
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 8296 	bne.w	8001b40 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001620:	b2da      	uxtb	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b292      	uxth	r2, r2
 8001628:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001634:	e284      	b.n	8001b40 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001646:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800164c:	2b00      	cmp	r3, #0
 800164e:	d034      	beq.n	80016ba <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001658:	b29b      	uxth	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	3306      	adds	r3, #6
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	4413      	add	r3, r2
 800166e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800168e:	b29b      	uxth	r3, r3
 8001690:	f003 fae0 	bl	8004c54 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	b29a      	uxth	r2, r3
 800169c:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016a0:	4013      	ands	r3, r2
 80016a2:	823b      	strh	r3, [r7, #16]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	8a3a      	ldrh	r2, [r7, #16]
 80016aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ae:	b292      	uxth	r2, r2
 80016b0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f004 feea 	bl	800648c <HAL_PCD_SetupStageCallback>
 80016b8:	e242      	b.n	8001b40 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016ba:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f280 823e 	bge.w	8001b40 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016d0:	4013      	ands	r3, r2
 80016d2:	83bb      	strh	r3, [r7, #28]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	8bba      	ldrh	r2, [r7, #28]
 80016da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016de:	b292      	uxth	r2, r2
 80016e0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4413      	add	r3, r2
 80016f6:	3306      	adds	r3, #6
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d019      	beq.n	800174a <PCD_EP_ISR_Handler+0x1ee>
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d015      	beq.n	800174a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6818      	ldr	r0, [r3, #0]
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	6959      	ldr	r1, [r3, #20]
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800172e:	b29b      	uxth	r3, r3
 8001730:	f003 fa90 	bl	8004c54 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	441a      	add	r2, r3
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001742:	2100      	movs	r1, #0
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f004 feb3 	bl	80064b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 81f2 	bne.w	8001b40 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800176a:	b29b      	uxth	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4413      	add	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d112      	bne.n	80017aa <PCD_EP_ISR_Handler+0x24e>
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800178e:	b29a      	uxth	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	801a      	strh	r2, [r3, #0]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	881b      	ldrh	r3, [r3, #0]
 8001798:	b29b      	uxth	r3, r3
 800179a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800179e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	801a      	strh	r2, [r3, #0]
 80017a8:	e02f      	b.n	800180a <PCD_EP_ISR_Handler+0x2ae>
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	2b3e      	cmp	r3, #62	; 0x3e
 80017b0:	d813      	bhi.n	80017da <PCD_EP_ISR_Handler+0x27e>
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	085b      	lsrs	r3, r3, #1
 80017b8:	633b      	str	r3, [r7, #48]	; 0x30
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <PCD_EP_ISR_Handler+0x270>
 80017c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c8:	3301      	adds	r3, #1
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
 80017cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	029b      	lsls	r3, r3, #10
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	801a      	strh	r2, [r3, #0]
 80017d8:	e017      	b.n	800180a <PCD_EP_ISR_Handler+0x2ae>
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	f003 031f 	and.w	r3, r3, #31
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <PCD_EP_ISR_Handler+0x298>
 80017ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f0:	3b01      	subs	r3, #1
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
 80017f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	029b      	lsls	r3, r3, #10
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001804:	b29a      	uxth	r2, r3
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	b29b      	uxth	r3, r3
 8001812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800181a:	827b      	strh	r3, [r7, #18]
 800181c:	8a7b      	ldrh	r3, [r7, #18]
 800181e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001822:	827b      	strh	r3, [r7, #18]
 8001824:	8a7b      	ldrh	r3, [r7, #18]
 8001826:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800182a:	827b      	strh	r3, [r7, #18]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	8a7b      	ldrh	r3, [r7, #18]
 8001832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800183a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001842:	b29b      	uxth	r3, r3
 8001844:	8013      	strh	r3, [r2, #0]
 8001846:	e17b      	b.n	8001b40 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800185a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800185e:	2b00      	cmp	r3, #0
 8001860:	f280 80ea 	bge.w	8001a38 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
 8001876:	f640 738f 	movw	r3, #3983	; 0xf8f
 800187a:	4013      	ands	r3, r2
 800187c:	853b      	strh	r3, [r7, #40]	; 0x28
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800188e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001892:	b292      	uxth	r2, r2
 8001894:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001896:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800189a:	4613      	mov	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	7b1b      	ldrb	r3, [r3, #12]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d122      	bne.n	80018fa <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018bc:	b29b      	uxth	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	3306      	adds	r3, #6
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018dc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80018de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 8087 	beq.w	80019f4 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	6959      	ldr	r1, [r3, #20]
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	88da      	ldrh	r2, [r3, #6]
 80018f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018f4:	f003 f9ae 	bl	8004c54 <USB_ReadPMA>
 80018f8:	e07c      	b.n	80019f4 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	78db      	ldrb	r3, [r3, #3]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d108      	bne.n	8001914 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001902:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001904:	461a      	mov	r2, r3
 8001906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f927 	bl	8001b5c <HAL_PCD_EP_DB_Receive>
 800190e:	4603      	mov	r3, r0
 8001910:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001912:	e06f      	b.n	80019f4 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	b29b      	uxth	r3, r3
 8001926:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800192a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800192e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	441a      	add	r2, r3
 800193e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001940:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001944:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800194c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001950:	b29b      	uxth	r3, r3
 8001952:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	b29b      	uxth	r3, r3
 8001966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d021      	beq.n	80019b2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001976:	b29b      	uxth	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	3302      	adds	r3, #2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001996:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001998:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800199a:	2b00      	cmp	r3, #0
 800199c:	d02a      	beq.n	80019f4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	6959      	ldr	r1, [r3, #20]
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	891a      	ldrh	r2, [r3, #8]
 80019aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019ac:	f003 f952 	bl	8004c54 <USB_ReadPMA>
 80019b0:	e020      	b.n	80019f4 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4413      	add	r3, r2
 80019c6:	3306      	adds	r3, #6
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019da:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80019dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	6959      	ldr	r1, [r3, #20]
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	895a      	ldrh	r2, [r3, #10]
 80019ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019f0:	f003 f930 	bl	8004c54 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	69da      	ldr	r2, [r3, #28]
 80019f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019fa:	441a      	add	r2, r3
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a02:	695a      	ldr	r2, [r3, #20]
 8001a04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a06:	441a      	add	r2, r3
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <PCD_EP_ISR_Handler+0x4c2>
 8001a14:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d206      	bcs.n	8001a2c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4619      	mov	r1, r3
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f004 fd43 	bl	80064b0 <HAL_PCD_DataOutStageCallback>
 8001a2a:	e005      	b.n	8001a38 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a32:	4618      	mov	r0, r3
 8001a34:	f001 fc94 	bl	8003360 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d07e      	beq.n	8001b40 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	4413      	add	r3, r2
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a70:	843b      	strh	r3, [r7, #32]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	441a      	add	r2, r3
 8001a80:	8c3b      	ldrh	r3, [r7, #32]
 8001a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	78db      	ldrb	r3, [r3, #3]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d00c      	beq.n	8001ab0 <PCD_EP_ISR_Handler+0x554>
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	78db      	ldrb	r3, [r3, #3]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d008      	beq.n	8001ab0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d146      	bne.n	8001b34 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001aa6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d141      	bne.n	8001b34 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ad8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	699a      	ldr	r2, [r3, #24]
 8001ade:	8bfb      	ldrh	r3, [r7, #30]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d906      	bls.n	8001af2 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	8bfb      	ldrh	r3, [r7, #30]
 8001aea:	1ad2      	subs	r2, r2, r3
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	619a      	str	r2, [r3, #24]
 8001af0:	e002      	b.n	8001af8 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d106      	bne.n	8001b0e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f004 fced 	bl	80064e6 <HAL_PCD_DataInStageCallback>
 8001b0c:	e018      	b.n	8001b40 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	8bfb      	ldrh	r3, [r7, #30]
 8001b14:	441a      	add	r2, r3
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	69da      	ldr	r2, [r3, #28]
 8001b1e:	8bfb      	ldrh	r3, [r7, #30]
 8001b20:	441a      	add	r2, r3
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 fc17 	bl	8003360 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001b32:	e005      	b.n	8001b40 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b36:	461a      	mov	r2, r3
 8001b38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f91b 	bl	8001d76 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f6ff ad0a 	blt.w	8001566 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3738      	adds	r7, #56	; 0x38
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	4613      	mov	r3, r2
 8001b68:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d07e      	beq.n	8001c72 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4413      	add	r3, r2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b9c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	8b7b      	ldrh	r3, [r7, #26]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d306      	bcc.n	8001bb6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	699a      	ldr	r2, [r3, #24]
 8001bac:	8b7b      	ldrh	r3, [r7, #26]
 8001bae:	1ad2      	subs	r2, r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	619a      	str	r2, [r3, #24]
 8001bb4:	e002      	b.n	8001bbc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d123      	bne.n	8001c0c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bde:	833b      	strh	r3, [r7, #24]
 8001be0:	8b3b      	ldrh	r3, [r7, #24]
 8001be2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001be6:	833b      	strh	r3, [r7, #24]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	441a      	add	r2, r3
 8001bf6:	8b3b      	ldrh	r3, [r7, #24]
 8001bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d01f      	beq.n	8001c56 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c30:	82fb      	strh	r3, [r7, #22]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	441a      	add	r2, r3
 8001c40:	8afb      	ldrh	r3, [r7, #22]
 8001c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c56:	8b7b      	ldrh	r3, [r7, #26]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8087 	beq.w	8001d6c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	6959      	ldr	r1, [r3, #20]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	891a      	ldrh	r2, [r3, #8]
 8001c6a:	8b7b      	ldrh	r3, [r7, #26]
 8001c6c:	f002 fff2 	bl	8004c54 <USB_ReadPMA>
 8001c70:	e07c      	b.n	8001d6c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	3306      	adds	r3, #6
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	8b7b      	ldrh	r3, [r7, #26]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d306      	bcc.n	8001cb4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	8b7b      	ldrh	r3, [r7, #26]
 8001cac:	1ad2      	subs	r2, r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	619a      	str	r2, [r3, #24]
 8001cb2:	e002      	b.n	8001cba <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d123      	bne.n	8001d0a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cdc:	83fb      	strh	r3, [r7, #30]
 8001cde:	8bfb      	ldrh	r3, [r7, #30]
 8001ce0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ce4:	83fb      	strh	r3, [r7, #30]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	461a      	mov	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	441a      	add	r2, r3
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d11f      	bne.n	8001d54 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d2e:	83bb      	strh	r3, [r7, #28]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	441a      	add	r2, r3
 8001d3e:	8bbb      	ldrh	r3, [r7, #28]
 8001d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d54:	8b7b      	ldrh	r3, [r7, #26]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6818      	ldr	r0, [r3, #0]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	6959      	ldr	r1, [r3, #20]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	895a      	ldrh	r2, [r3, #10]
 8001d66:	8b7b      	ldrh	r3, [r7, #26]
 8001d68:	f002 ff74 	bl	8004c54 <USB_ReadPMA>
    }
  }

  return count;
 8001d6c:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b0a2      	sub	sp, #136	; 0x88
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	4613      	mov	r3, r2
 8001d82:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 81c7 	beq.w	800211e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	3302      	adds	r3, #2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	699a      	ldr	r2, [r3, #24]
 8001dc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d907      	bls.n	8001dd8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	699a      	ldr	r2, [r3, #24]
 8001dcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001dd0:	1ad2      	subs	r2, r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	619a      	str	r2, [r3, #24]
 8001dd6:	e002      	b.n	8001dde <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 80b9 	bne.w	8001f5a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	785b      	ldrb	r3, [r3, #1]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d126      	bne.n	8001e3e <HAL_PCD_EP_DB_Transmit+0xc8>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	4413      	add	r3, r2
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	011a      	lsls	r2, r3, #4
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	4413      	add	r3, r2
 8001e12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	801a      	strh	r2, [r3, #0]
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	e01a      	b.n	8001e74 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	785b      	ldrb	r3, [r3, #1]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d116      	bne.n	8001e74 <HAL_PCD_EP_DB_Transmit+0xfe>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5a:	4413      	add	r3, r2
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	011a      	lsls	r2, r3, #4
 8001e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e66:	4413      	add	r3, r2
 8001e68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e70:	2200      	movs	r2, #0
 8001e72:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	623b      	str	r3, [r7, #32]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d126      	bne.n	8001ed0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	4413      	add	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	011a      	lsls	r2, r3, #4
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	801a      	strh	r2, [r3, #0]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	e017      	b.n	8001f00 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	785b      	ldrb	r3, [r3, #1]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d113      	bne.n	8001f00 <HAL_PCD_EP_DB_Transmit+0x18a>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	623b      	str	r3, [r7, #32]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	011a      	lsls	r2, r3, #4
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	2200      	movs	r2, #0
 8001efe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f004 faed 	bl	80064e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f0c:	88fb      	ldrh	r3, [r7, #6]
 8001f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 82d4 	beq.w	80024c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f32:	827b      	strh	r3, [r7, #18]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	441a      	add	r2, r3
 8001f42:	8a7b      	ldrh	r3, [r7, #18]
 8001f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	8013      	strh	r3, [r2, #0]
 8001f58:	e2b2      	b.n	80024c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d021      	beq.n	8001fa8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	441a      	add	r2, r3
 8001f90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	f040 8286 	bne.w	80024c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fbc:	441a      	add	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001fca:	441a      	add	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	6a1a      	ldr	r2, [r3, #32]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d309      	bcc.n	8001ff0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fe8:	1ad2      	subs	r2, r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	621a      	str	r2, [r3, #32]
 8001fee:	e015      	b.n	800201c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d107      	bne.n	8002008 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8001ff8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ffc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002006:	e009      	b.n	800201c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	785b      	ldrb	r3, [r3, #1]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d155      	bne.n	80020d0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	63bb      	str	r3, [r7, #56]	; 0x38
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002032:	b29b      	uxth	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002038:	4413      	add	r3, r2
 800203a:	63bb      	str	r3, [r7, #56]	; 0x38
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	011a      	lsls	r2, r3, #4
 8002042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002044:	4413      	add	r3, r2
 8002046:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
 800204c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800204e:	2b00      	cmp	r3, #0
 8002050:	d112      	bne.n	8002078 <HAL_PCD_EP_DB_Transmit+0x302>
 8002052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800205c:	b29a      	uxth	r2, r3
 800205e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002060:	801a      	strh	r2, [r3, #0]
 8002062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800206c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002070:	b29a      	uxth	r2, r3
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	801a      	strh	r2, [r3, #0]
 8002076:	e047      	b.n	8002108 <HAL_PCD_EP_DB_Transmit+0x392>
 8002078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800207a:	2b3e      	cmp	r3, #62	; 0x3e
 800207c:	d811      	bhi.n	80020a2 <HAL_PCD_EP_DB_Transmit+0x32c>
 800207e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	64bb      	str	r3, [r7, #72]	; 0x48
 8002084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_PCD_EP_DB_Transmit+0x31e>
 800208e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002090:	3301      	adds	r3, #1
 8002092:	64bb      	str	r3, [r7, #72]	; 0x48
 8002094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002096:	b29b      	uxth	r3, r3
 8002098:	029b      	lsls	r3, r3, #10
 800209a:	b29a      	uxth	r2, r3
 800209c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209e:	801a      	strh	r2, [r3, #0]
 80020a0:	e032      	b.n	8002108 <HAL_PCD_EP_DB_Transmit+0x392>
 80020a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_PCD_EP_DB_Transmit+0x342>
 80020b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020b4:	3b01      	subs	r3, #1
 80020b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	029b      	lsls	r3, r3, #10
 80020be:	b29b      	uxth	r3, r3
 80020c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020cc:	801a      	strh	r2, [r3, #0]
 80020ce:	e01b      	b.n	8002108 <HAL_PCD_EP_DB_Transmit+0x392>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d117      	bne.n	8002108 <HAL_PCD_EP_DB_Transmit+0x392>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	643b      	str	r3, [r7, #64]	; 0x40
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ec:	4413      	add	r3, r2
 80020ee:	643b      	str	r3, [r7, #64]	; 0x40
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	011a      	lsls	r2, r3, #4
 80020f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f8:	4413      	add	r3, r2
 80020fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002102:	b29a      	uxth	r2, r3
 8002104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002106:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	6959      	ldr	r1, [r3, #20]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	891a      	ldrh	r2, [r3, #8]
 8002114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002116:	b29b      	uxth	r3, r3
 8002118:	f002 fd57 	bl	8004bca <USB_WritePMA>
 800211c:	e1d0      	b.n	80024c0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002126:	b29b      	uxth	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	3306      	adds	r3, #6
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	4413      	add	r3, r2
 800213c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002146:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002152:	429a      	cmp	r2, r3
 8002154:	d307      	bcc.n	8002166 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	699a      	ldr	r2, [r3, #24]
 800215a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	619a      	str	r2, [r3, #24]
 8002164:	e002      	b.n	800216c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f040 80c4 	bne.w	80022fe <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	785b      	ldrb	r3, [r3, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d126      	bne.n	80021cc <HAL_PCD_EP_DB_Transmit+0x456>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800218c:	b29b      	uxth	r3, r3
 800218e:	461a      	mov	r2, r3
 8002190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002192:	4413      	add	r3, r2
 8002194:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	011a      	lsls	r2, r3, #4
 800219c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219e:	4413      	add	r3, r2
 80021a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80021a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021b4:	801a      	strh	r2, [r3, #0]
 80021b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021c8:	801a      	strh	r2, [r3, #0]
 80021ca:	e01a      	b.n	8002202 <HAL_PCD_EP_DB_Transmit+0x48c>
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	785b      	ldrb	r3, [r3, #1]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d116      	bne.n	8002202 <HAL_PCD_EP_DB_Transmit+0x48c>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	677b      	str	r3, [r7, #116]	; 0x74
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	461a      	mov	r2, r3
 80021e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021e8:	4413      	add	r3, r2
 80021ea:	677b      	str	r3, [r7, #116]	; 0x74
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	011a      	lsls	r2, r3, #4
 80021f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021f4:	4413      	add	r3, r2
 80021f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80021fa:	673b      	str	r3, [r7, #112]	; 0x70
 80021fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021fe:	2200      	movs	r2, #0
 8002200:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	67bb      	str	r3, [r7, #120]	; 0x78
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d12f      	bne.n	8002270 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002220:	b29b      	uxth	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002228:	4413      	add	r3, r2
 800222a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	011a      	lsls	r2, r3, #4
 8002234:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002238:	4413      	add	r3, r2
 800223a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800223e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002242:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800224e:	b29a      	uxth	r2, r3
 8002250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002254:	801a      	strh	r2, [r3, #0]
 8002256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b29b      	uxth	r3, r3
 800225e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002266:	b29a      	uxth	r2, r3
 8002268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800226c:	801a      	strh	r2, [r3, #0]
 800226e:	e017      	b.n	80022a0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	785b      	ldrb	r3, [r3, #1]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d113      	bne.n	80022a0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002280:	b29b      	uxth	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002286:	4413      	add	r3, r2
 8002288:	67bb      	str	r3, [r7, #120]	; 0x78
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	011a      	lsls	r2, r3, #4
 8002290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002292:	4413      	add	r3, r2
 8002294:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002298:	67fb      	str	r3, [r7, #124]	; 0x7c
 800229a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800229c:	2200      	movs	r2, #0
 800229e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f004 f91d 	bl	80064e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022ac:	88fb      	ldrh	r3, [r7, #6]
 80022ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 8104 	bne.w	80024c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	441a      	add	r2, r3
 80022e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80022e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	8013      	strh	r3, [r2, #0]
 80022fc:	e0e0      	b.n	80024c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d121      	bne.n	800234c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800231e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002322:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	441a      	add	r2, r3
 8002334:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002338:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800233c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002340:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002348:	b29b      	uxth	r3, r3
 800234a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002352:	2b01      	cmp	r3, #1
 8002354:	f040 80b4 	bne.w	80024c0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	695a      	ldr	r2, [r3, #20]
 800235c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002360:	441a      	add	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800236e:	441a      	add	r2, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	6a1a      	ldr	r2, [r3, #32]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	429a      	cmp	r2, r3
 800237e:	d309      	bcc.n	8002394 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	6a1a      	ldr	r2, [r3, #32]
 800238a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800238c:	1ad2      	subs	r2, r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	621a      	str	r2, [r3, #32]
 8002392:	e015      	b.n	80023c0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800239c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023aa:	e009      	b.n	80023c0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	667b      	str	r3, [r7, #100]	; 0x64
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d155      	bne.n	800247a <HAL_PCD_EP_DB_Transmit+0x704>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023dc:	b29b      	uxth	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e2:	4413      	add	r3, r2
 80023e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	011a      	lsls	r2, r3, #4
 80023ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023ee:	4413      	add	r3, r2
 80023f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80023f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d112      	bne.n	8002422 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80023fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002406:	b29a      	uxth	r2, r3
 8002408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800240a:	801a      	strh	r2, [r3, #0]
 800240c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	b29b      	uxth	r3, r3
 8002412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800241a:	b29a      	uxth	r2, r3
 800241c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800241e:	801a      	strh	r2, [r3, #0]
 8002420:	e044      	b.n	80024ac <HAL_PCD_EP_DB_Transmit+0x736>
 8002422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002424:	2b3e      	cmp	r3, #62	; 0x3e
 8002426:	d811      	bhi.n	800244c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800242a:	085b      	lsrs	r3, r3, #1
 800242c:	657b      	str	r3, [r7, #84]	; 0x54
 800242e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800243a:	3301      	adds	r3, #1
 800243c:	657b      	str	r3, [r7, #84]	; 0x54
 800243e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002440:	b29b      	uxth	r3, r3
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	b29a      	uxth	r2, r3
 8002446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	e02f      	b.n	80024ac <HAL_PCD_EP_DB_Transmit+0x736>
 800244c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	657b      	str	r3, [r7, #84]	; 0x54
 8002452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800245c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800245e:	3b01      	subs	r3, #1
 8002460:	657b      	str	r3, [r7, #84]	; 0x54
 8002462:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002464:	b29b      	uxth	r3, r3
 8002466:	029b      	lsls	r3, r3, #10
 8002468:	b29b      	uxth	r3, r3
 800246a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800246e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002472:	b29a      	uxth	r2, r3
 8002474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002476:	801a      	strh	r2, [r3, #0]
 8002478:	e018      	b.n	80024ac <HAL_PCD_EP_DB_Transmit+0x736>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d114      	bne.n	80024ac <HAL_PCD_EP_DB_Transmit+0x736>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248a:	b29b      	uxth	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002490:	4413      	add	r3, r2
 8002492:	667b      	str	r3, [r7, #100]	; 0x64
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	011a      	lsls	r2, r3, #4
 800249a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800249c:	4413      	add	r3, r2
 800249e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024a2:	663b      	str	r3, [r7, #96]	; 0x60
 80024a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024aa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	6959      	ldr	r1, [r3, #20]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	895a      	ldrh	r2, [r3, #10]
 80024b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	f002 fb85 	bl	8004bca <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024da:	823b      	strh	r3, [r7, #16]
 80024dc:	8a3b      	ldrh	r3, [r7, #16]
 80024de:	f083 0310 	eor.w	r3, r3, #16
 80024e2:	823b      	strh	r3, [r7, #16]
 80024e4:	8a3b      	ldrh	r3, [r7, #16]
 80024e6:	f083 0320 	eor.w	r3, r3, #32
 80024ea:	823b      	strh	r3, [r7, #16]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	441a      	add	r2, r3
 80024fa:	8a3b      	ldrh	r3, [r7, #16]
 80024fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250c:	b29b      	uxth	r3, r3
 800250e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3788      	adds	r7, #136	; 0x88
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800251a:	b480      	push	{r7}
 800251c:	b087      	sub	sp, #28
 800251e:	af00      	add	r7, sp, #0
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	817b      	strh	r3, [r7, #10]
 8002528:	4613      	mov	r3, r2
 800252a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800252c:	897b      	ldrh	r3, [r7, #10]
 800252e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002532:	b29b      	uxth	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002538:	897b      	ldrh	r3, [r7, #10]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e009      	b.n	8002564 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002550:	897a      	ldrh	r2, [r7, #10]
 8002552:	4613      	mov	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	4413      	add	r3, r2
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	4413      	add	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002564:	893b      	ldrh	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d107      	bne.n	800257a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2200      	movs	r2, #0
 800256e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	b29a      	uxth	r2, r3
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	80da      	strh	r2, [r3, #6]
 8002578:	e00b      	b.n	8002592 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2201      	movs	r2, #1
 800257e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	b29a      	uxth	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	0c1b      	lsrs	r3, r3, #16
 800258c:	b29a      	uxth	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <LL_GPIO_SetPinMode>:
{
 800259e:	b490      	push	{r4, r7}
 80025a0:	b088      	sub	sp, #32
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	461a      	mov	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	0e1b      	lsrs	r3, r3, #24
 80025b2:	4413      	add	r3, r2
 80025b4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	210f      	movs	r1, #15
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	401a      	ands	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	61bb      	str	r3, [r7, #24]
  return result;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	4313      	orrs	r3, r2
 80025f6:	6023      	str	r3, [r4, #0]
}
 80025f8:	bf00      	nop
 80025fa:	3720      	adds	r7, #32
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc90      	pop	{r4, r7}
 8002600:	4770      	bx	lr

08002602 <LL_GPIO_SetPinSpeed>:
{
 8002602:	b490      	push	{r4, r7}
 8002604:	b088      	sub	sp, #32
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	0e1b      	lsrs	r3, r3, #24
 8002616:	4413      	add	r3, r2
 8002618:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800261a:	6822      	ldr	r2, [r4, #0]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	613b      	str	r3, [r7, #16]
  return result;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	2103      	movs	r1, #3
 8002634:	fa01 f303 	lsl.w	r3, r1, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	401a      	ands	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	61bb      	str	r3, [r7, #24]
  return result;
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	fa01 f303 	lsl.w	r3, r1, r3
 8002658:	4313      	orrs	r3, r2
 800265a:	6023      	str	r3, [r4, #0]
}
 800265c:	bf00      	nop
 800265e:	3720      	adds	r7, #32
 8002660:	46bd      	mov	sp, r7
 8002662:	bc90      	pop	{r4, r7}
 8002664:	4770      	bx	lr

08002666 <LL_GPIO_SetPinOutputType>:
{
 8002666:	b490      	push	{r4, r7}
 8002668:	b088      	sub	sp, #32
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	461a      	mov	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	0e1b      	lsrs	r3, r3, #24
 800267a:	4413      	add	r3, r2
 800267c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800267e:	6822      	ldr	r2, [r4, #0]
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	613b      	str	r3, [r7, #16]
  return result;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	2104      	movs	r1, #4
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	61bb      	str	r3, [r7, #24]
  return result;
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fab3 f383 	clz	r3, r3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	4313      	orrs	r3, r2
 80026be:	6023      	str	r3, [r4, #0]
}
 80026c0:	bf00      	nop
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc90      	pop	{r4, r7}
 80026c8:	4770      	bx	lr

080026ca <LL_GPIO_SetPinPull>:
{
 80026ca:	b480      	push	{r7}
 80026cc:	b087      	sub	sp, #28
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	43db      	mvns	r3, r3
 80026e0:	401a      	ands	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	0a1b      	lsrs	r3, r3, #8
 80026e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	613b      	str	r3, [r7, #16]
  return result;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	4619      	mov	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	408b      	lsls	r3, r1
 80026fe:	431a      	orrs	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	60da      	str	r2, [r3, #12]
}
 8002704:	bf00      	nop
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b088      	sub	sp, #32
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	0c1b      	lsrs	r3, r3, #16
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	60fb      	str	r3, [r7, #12]
  return result;
 800272e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002738:	e044      	b.n	80027c4 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800273a:	2201      	movs	r2, #1
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	409a      	lsls	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d03a      	beq.n	80027be <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	2b07      	cmp	r3, #7
 800274c:	d806      	bhi.n	800275c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800274e:	f240 1201 	movw	r2, #257	; 0x101
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	e008      	b.n	800276e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	3b08      	subs	r3, #8
 8002760:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800276c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b08      	cmp	r3, #8
 8002774:	d106      	bne.n	8002784 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	461a      	mov	r2, r3
 800277c:	69b9      	ldr	r1, [r7, #24]
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffa3 	bl	80026ca <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	461a      	mov	r2, r3
 800278a:	69b9      	ldr	r1, [r7, #24]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff06 	bl	800259e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d003      	beq.n	80027a2 <LL_GPIO_Init+0x94>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b09      	cmp	r3, #9
 80027a0:	d10d      	bne.n	80027be <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	461a      	mov	r2, r3
 80027a8:	69b9      	ldr	r1, [r7, #24]
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff ff29 	bl	8002602 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	461a      	mov	r2, r3
 80027b6:	69b9      	ldr	r1, [r7, #24]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff54 	bl	8002666 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3301      	adds	r3, #1
 80027c2:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1b4      	bne.n	800273a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3720      	adds	r7, #32
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80027da:	b084      	sub	sp, #16
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	f107 0014 	add.w	r0, r7, #20
 80027e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	b004      	add	sp, #16
 80027f8:	4770      	bx	lr

080027fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800280a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800280e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	b29a      	uxth	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800282e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002832:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800283a:	b29a      	uxth	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	b29b      	uxth	r3, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	b29b      	uxth	r3, r3
 8002844:	4013      	ands	r3, r2
 8002846:	b29a      	uxth	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	460b      	mov	r3, r1
 8002864:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr

08002872 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002872:	b084      	sub	sp, #16
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	f107 0014 	add.w	r0, r7, #20
 8002880:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	b004      	add	sp, #16
 80028b0:	4770      	bx	lr
	...

080028b4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b09b      	sub	sp, #108	; 0x6c
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80028d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	78db      	ldrb	r3, [r3, #3]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d81f      	bhi.n	8002926 <USB_ActivateEndpoint+0x72>
 80028e6:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <USB_ActivateEndpoint+0x38>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	080028fd 	.word	0x080028fd
 80028f0:	08002919 	.word	0x08002919
 80028f4:	0800292f 	.word	0x0800292f
 80028f8:	0800290b 	.word	0x0800290b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80028fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002904:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002908:	e012      	b.n	8002930 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800290a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800290e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002912:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002916:	e00b      	b.n	8002930 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002918:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800291c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002920:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002924:	e004      	b.n	8002930 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800292c:	e000      	b.n	8002930 <USB_ActivateEndpoint+0x7c>
      break;
 800292e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800293e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800294a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294e:	b29b      	uxth	r3, r3
 8002950:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	881b      	ldrh	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002968:	b29a      	uxth	r2, r3
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	4313      	orrs	r3, r2
 8002972:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	441a      	add	r2, r3
 8002980:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800298c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002994:	b29b      	uxth	r3, r3
 8002996:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	7b1b      	ldrb	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f040 8149 	bne.w	8002c34 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	785b      	ldrb	r3, [r3, #1]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8084 	beq.w	8002ab4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4413      	add	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	011a      	lsls	r2, r3, #4
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	4413      	add	r3, r2
 80029ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	88db      	ldrh	r3, [r3, #6]
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	b29a      	uxth	r2, r3
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	81fb      	strh	r3, [r7, #14]
 80029ee:	89fb      	ldrh	r3, [r7, #14]
 80029f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01b      	beq.n	8002a30 <USB_ActivateEndpoint+0x17c>
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0e:	81bb      	strh	r3, [r7, #12]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	441a      	add	r2, r3
 8002a1a:	89bb      	ldrh	r3, [r7, #12]
 8002a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	78db      	ldrb	r3, [r3, #3]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d020      	beq.n	8002a7a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a4e:	813b      	strh	r3, [r7, #8]
 8002a50:	893b      	ldrh	r3, [r7, #8]
 8002a52:	f083 0320 	eor.w	r3, r3, #32
 8002a56:	813b      	strh	r3, [r7, #8]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	441a      	add	r2, r3
 8002a62:	893b      	ldrh	r3, [r7, #8]
 8002a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	8013      	strh	r3, [r2, #0]
 8002a78:	e27f      	b.n	8002f7a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	441a      	add	r2, r3
 8002a9c:	897b      	ldrh	r3, [r7, #10]
 8002a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	8013      	strh	r3, [r2, #0]
 8002ab2:	e262      	b.n	8002f7a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	4413      	add	r3, r2
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	011a      	lsls	r2, r3, #4
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	88db      	ldrh	r3, [r3, #6]
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	4413      	add	r3, r2
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	011a      	lsls	r2, r3, #4
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	4413      	add	r3, r2
 8002b06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d112      	bne.n	8002b3a <USB_ActivateEndpoint+0x286>
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	801a      	strh	r2, [r3, #0]
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	801a      	strh	r2, [r3, #0]
 8002b38:	e02f      	b.n	8002b9a <USB_ActivateEndpoint+0x2e6>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b3e      	cmp	r3, #62	; 0x3e
 8002b40:	d813      	bhi.n	8002b6a <USB_ActivateEndpoint+0x2b6>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	663b      	str	r3, [r7, #96]	; 0x60
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <USB_ActivateEndpoint+0x2a8>
 8002b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b58:	3301      	adds	r3, #1
 8002b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	029b      	lsls	r3, r3, #10
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	e017      	b.n	8002b9a <USB_ActivateEndpoint+0x2e6>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	663b      	str	r3, [r7, #96]	; 0x60
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <USB_ActivateEndpoint+0x2d0>
 8002b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b80:	3b01      	subs	r3, #1
 8002b82:	663b      	str	r3, [r7, #96]	; 0x60
 8002b84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	029b      	lsls	r3, r3, #10
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	83fb      	strh	r3, [r7, #30]
 8002ba8:	8bfb      	ldrh	r3, [r7, #30]
 8002baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d01b      	beq.n	8002bea <USB_ActivateEndpoint+0x336>
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc8:	83bb      	strh	r3, [r7, #28]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	441a      	add	r2, r3
 8002bd4:	8bbb      	ldrh	r3, [r7, #28]
 8002bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c00:	837b      	strh	r3, [r7, #26]
 8002c02:	8b7b      	ldrh	r3, [r7, #26]
 8002c04:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002c08:	837b      	strh	r3, [r7, #26]
 8002c0a:	8b7b      	ldrh	r3, [r7, #26]
 8002c0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c10:	837b      	strh	r3, [r7, #26]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	441a      	add	r2, r3
 8002c1c:	8b7b      	ldrh	r3, [r7, #26]
 8002c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	8013      	strh	r3, [r2, #0]
 8002c32:	e1a2      	b.n	8002f7a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	441a      	add	r2, r3
 8002c58:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c64:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c80:	4413      	add	r3, r2
 8002c82:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	011a      	lsls	r2, r3, #4
 8002c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c92:	657b      	str	r3, [r7, #84]	; 0x54
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	891b      	ldrh	r3, [r3, #8]
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ca2:	801a      	strh	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb4:	4413      	add	r3, r2
 8002cb6:	653b      	str	r3, [r7, #80]	; 0x50
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	011a      	lsls	r2, r3, #4
 8002cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	895b      	ldrh	r3, [r3, #10]
 8002ccc:	085b      	lsrs	r3, r3, #1
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	785b      	ldrb	r3, [r3, #1]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f040 8091 	bne.w	8002e04 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8002cf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01b      	beq.n	8002d32 <USB_ActivateEndpoint+0x47e>
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d10:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	441a      	add	r2, r3
 8002d1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	873b      	strh	r3, [r7, #56]	; 0x38
 8002d40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d01b      	beq.n	8002d82 <USB_ActivateEndpoint+0x4ce>
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d60:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	441a      	add	r2, r3
 8002d6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d98:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002d9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002d9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002da0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002da2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002da4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002da8:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	441a      	add	r2, r3
 8002db4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002de0:	867b      	strh	r3, [r7, #50]	; 0x32
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	441a      	add	r2, r3
 8002dec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	8013      	strh	r3, [r2, #0]
 8002e02:	e0ba      	b.n	8002f7a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002e14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01d      	beq.n	8002e5c <USB_ActivateEndpoint+0x5a8>
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e36:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	441a      	add	r2, r3
 8002e44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01d      	beq.n	8002eb4 <USB_ActivateEndpoint+0x600>
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	441a      	add	r2, r3
 8002e9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	78db      	ldrb	r3, [r3, #3]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d024      	beq.n	8002f06 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002ed6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002eda:	f083 0320 	eor.w	r3, r3, #32
 8002ede:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	441a      	add	r2, r3
 8002eec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002ef0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	8013      	strh	r3, [r2, #0]
 8002f04:	e01d      	b.n	8002f42 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	441a      	add	r2, r3
 8002f2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f58:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	441a      	add	r2, r3
 8002f64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002f7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	376c      	adds	r7, #108	; 0x6c
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b08d      	sub	sp, #52	; 0x34
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	7b1b      	ldrb	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f040 808e 	bne.w	80030b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	785b      	ldrb	r3, [r3, #1]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d044      	beq.n	800302e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	81bb      	strh	r3, [r7, #12]
 8002fb2:	89bb      	ldrh	r3, [r7, #12]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01b      	beq.n	8002ff4 <USB_DeactivateEndpoint+0x6c>
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fd2:	817b      	strh	r3, [r7, #10]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	441a      	add	r2, r3
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fe4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b29b      	uxth	r3, r3
 8003002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800300a:	813b      	strh	r3, [r7, #8]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	441a      	add	r2, r3
 8003016:	893b      	ldrh	r3, [r7, #8]
 8003018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800301c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003028:	b29b      	uxth	r3, r3
 800302a:	8013      	strh	r3, [r2, #0]
 800302c:	e192      	b.n	8003354 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	827b      	strh	r3, [r7, #18]
 800303c:	8a7b      	ldrh	r3, [r7, #18]
 800303e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01b      	beq.n	800307e <USB_DeactivateEndpoint+0xf6>
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	b29b      	uxth	r3, r3
 8003054:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305c:	823b      	strh	r3, [r7, #16]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	441a      	add	r2, r3
 8003068:	8a3b      	ldrh	r3, [r7, #16]
 800306a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800306e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307a:	b29b      	uxth	r3, r3
 800307c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003094:	81fb      	strh	r3, [r7, #14]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	441a      	add	r2, r3
 80030a0:	89fb      	ldrh	r3, [r7, #14]
 80030a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	8013      	strh	r3, [r2, #0]
 80030b6:	e14d      	b.n	8003354 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f040 80a5 	bne.w	800320c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	843b      	strh	r3, [r7, #32]
 80030d0:	8c3b      	ldrh	r3, [r7, #32]
 80030d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01b      	beq.n	8003112 <USB_DeactivateEndpoint+0x18a>
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f0:	83fb      	strh	r3, [r7, #30]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	441a      	add	r2, r3
 80030fc:	8bfb      	ldrh	r3, [r7, #30]
 80030fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800310a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310e:	b29b      	uxth	r3, r3
 8003110:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	83bb      	strh	r3, [r7, #28]
 8003120:	8bbb      	ldrh	r3, [r7, #28]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01b      	beq.n	8003162 <USB_DeactivateEndpoint+0x1da>
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003140:	837b      	strh	r3, [r7, #26]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	8b7b      	ldrh	r3, [r7, #26]
 800314e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800315e:	b29b      	uxth	r3, r3
 8003160:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003178:	833b      	strh	r3, [r7, #24]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	441a      	add	r2, r3
 8003184:	8b3b      	ldrh	r3, [r7, #24]
 8003186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800318a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800318e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003192:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003196:	b29b      	uxth	r3, r3
 8003198:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b0:	82fb      	strh	r3, [r7, #22]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	441a      	add	r2, r3
 80031bc:	8afb      	ldrh	r3, [r7, #22]
 80031be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031e8:	82bb      	strh	r3, [r7, #20]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	441a      	add	r2, r3
 80031f4:	8abb      	ldrh	r3, [r7, #20]
 80031f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003206:	b29b      	uxth	r3, r3
 8003208:	8013      	strh	r3, [r2, #0]
 800320a:	e0a3      	b.n	8003354 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800321a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800321c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01b      	beq.n	800325c <USB_DeactivateEndpoint+0x2d4>
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	b29b      	uxth	r3, r3
 8003232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	441a      	add	r2, r3
 8003246:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800324c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003250:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003258:	b29b      	uxth	r3, r3
 800325a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	857b      	strh	r3, [r7, #42]	; 0x2a
 800326a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01b      	beq.n	80032ac <USB_DeactivateEndpoint+0x324>
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	853b      	strh	r3, [r7, #40]	; 0x28
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	441a      	add	r2, r3
 8003296:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800329c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	441a      	add	r2, r3
 80032ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80032d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032fa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	441a      	add	r2, r3
 8003306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800330c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003318:	b29b      	uxth	r3, r3
 800331a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	b29b      	uxth	r3, r3
 800332a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003332:	847b      	strh	r3, [r7, #34]	; 0x22
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	441a      	add	r2, r3
 800333e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800334c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003350:	b29b      	uxth	r3, r3
 8003352:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3734      	adds	r7, #52	; 0x34
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b0cc      	sub	sp, #304	; 0x130
 8003364:	af00      	add	r7, sp, #0
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	6018      	str	r0, [r3, #0]
 800336a:	463b      	mov	r3, r7
 800336c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800336e:	463b      	mov	r3, r7
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	2b01      	cmp	r3, #1
 8003376:	f040 872e 	bne.w	80041d6 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800337a:	463b      	mov	r3, r7
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	463b      	mov	r3, r7
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	429a      	cmp	r2, r3
 8003388:	d905      	bls.n	8003396 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800338a:	463b      	mov	r3, r7
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003394:	e004      	b.n	80033a0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003396:	463b      	mov	r3, r7
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80033a0:	463b      	mov	r3, r7
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	7b1b      	ldrb	r3, [r3, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d134      	bne.n	8003414 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80033aa:	463b      	mov	r3, r7
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6959      	ldr	r1, [r3, #20]
 80033b0:	463b      	mov	r3, r7
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	88da      	ldrh	r2, [r3, #6]
 80033b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	1d38      	adds	r0, r7, #4
 80033be:	6800      	ldr	r0, [r0, #0]
 80033c0:	f001 fc03 	bl	8004bca <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80033c4:	f107 0310 	add.w	r3, r7, #16
 80033c8:	1d3a      	adds	r2, r7, #4
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	4619      	mov	r1, r3
 80033da:	f107 0310 	add.w	r3, r7, #16
 80033de:	f107 0210 	add.w	r2, r7, #16
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	440a      	add	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	463b      	mov	r3, r7
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	011a      	lsls	r2, r3, #4
 80033f0:	f107 0310 	add.w	r3, r7, #16
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80033fc:	f107 030c 	add.w	r3, r7, #12
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003406:	b29a      	uxth	r2, r3
 8003408:	f107 030c 	add.w	r3, r7, #12
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	801a      	strh	r2, [r3, #0]
 8003410:	f000 beac 	b.w	800416c <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003414:	463b      	mov	r3, r7
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	78db      	ldrb	r3, [r3, #3]
 800341a:	2b02      	cmp	r3, #2
 800341c:	f040 838c 	bne.w	8003b38 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003420:	463b      	mov	r3, r7
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6a1a      	ldr	r2, [r3, #32]
 8003426:	463b      	mov	r3, r7
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	429a      	cmp	r2, r3
 800342e:	f240 8330 	bls.w	8003a92 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	463b      	mov	r3, r7
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003450:	1d3b      	adds	r3, r7, #4
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	463b      	mov	r3, r7
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	441a      	add	r2, r3
 800345e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800346a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800346e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003472:	b29b      	uxth	r3, r3
 8003474:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003476:	463b      	mov	r3, r7
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6a1a      	ldr	r2, [r3, #32]
 800347c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003480:	1ad2      	subs	r2, r2, r3
 8003482:	463b      	mov	r3, r7
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	463b      	mov	r3, r7
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 819e 	beq.w	80037e0 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80034a8:	1d3a      	adds	r2, r7, #4
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	463b      	mov	r3, r7
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	785b      	ldrb	r3, [r3, #1]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d17a      	bne.n	80035ae <USB_EPStartXfer+0x24e>
 80034b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034bc:	1d3a      	adds	r2, r7, #4
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	4619      	mov	r1, r3
 80034ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	440a      	add	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	463b      	mov	r3, r7
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	011a      	lsls	r2, r3, #4
 80034e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80034f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11a      	bne.n	8003534 <USB_EPStartXfer+0x1d4>
 80034fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	b29b      	uxth	r3, r3
 8003508:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800350c:	b29a      	uxth	r2, r3
 800350e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	801a      	strh	r2, [r3, #0]
 8003516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	b29b      	uxth	r3, r3
 8003520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003528:	b29a      	uxth	r2, r3
 800352a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	801a      	strh	r2, [r3, #0]
 8003532:	e062      	b.n	80035fa <USB_EPStartXfer+0x29a>
 8003534:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003538:	2b3e      	cmp	r3, #62	; 0x3e
 800353a:	d819      	bhi.n	8003570 <USB_EPStartXfer+0x210>
 800353c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003540:	085b      	lsrs	r3, r3, #1
 8003542:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <USB_EPStartXfer+0x1fc>
 8003552:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003556:	3301      	adds	r3, #1
 8003558:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800355c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003560:	b29b      	uxth	r3, r3
 8003562:	029b      	lsls	r3, r3, #10
 8003564:	b29a      	uxth	r2, r3
 8003566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	801a      	strh	r2, [r3, #0]
 800356e:	e044      	b.n	80035fa <USB_EPStartXfer+0x29a>
 8003570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800357a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800357e:	f003 031f 	and.w	r3, r3, #31
 8003582:	2b00      	cmp	r3, #0
 8003584:	d104      	bne.n	8003590 <USB_EPStartXfer+0x230>
 8003586:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800358a:	3b01      	subs	r3, #1
 800358c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003590:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003594:	b29b      	uxth	r3, r3
 8003596:	029b      	lsls	r3, r3, #10
 8003598:	b29b      	uxth	r3, r3
 800359a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800359e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	801a      	strh	r2, [r3, #0]
 80035ac:	e025      	b.n	80035fa <USB_EPStartXfer+0x29a>
 80035ae:	463b      	mov	r3, r7
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	785b      	ldrb	r3, [r3, #1]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d120      	bne.n	80035fa <USB_EPStartXfer+0x29a>
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	4619      	mov	r1, r3
 80035c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	440a      	add	r2, r1
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	463b      	mov	r3, r7
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	011a      	lsls	r2, r3, #4
 80035da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80035e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80035fa:	463b      	mov	r3, r7
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	895b      	ldrh	r3, [r3, #10]
 8003600:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003604:	463b      	mov	r3, r7
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6959      	ldr	r1, [r3, #20]
 800360a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800360e:	b29b      	uxth	r3, r3
 8003610:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003614:	1d38      	adds	r0, r7, #4
 8003616:	6800      	ldr	r0, [r0, #0]
 8003618:	f001 fad7 	bl	8004bca <USB_WritePMA>
            ep->xfer_buff += len;
 800361c:	463b      	mov	r3, r7
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003626:	441a      	add	r2, r3
 8003628:	463b      	mov	r3, r7
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800362e:	463b      	mov	r3, r7
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6a1a      	ldr	r2, [r3, #32]
 8003634:	463b      	mov	r3, r7
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	429a      	cmp	r2, r3
 800363c:	d909      	bls.n	8003652 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800363e:	463b      	mov	r3, r7
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6a1a      	ldr	r2, [r3, #32]
 8003644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003648:	1ad2      	subs	r2, r2, r3
 800364a:	463b      	mov	r3, r7
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	621a      	str	r2, [r3, #32]
 8003650:	e008      	b.n	8003664 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8003652:	463b      	mov	r3, r7
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800365c:	463b      	mov	r3, r7
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2200      	movs	r2, #0
 8003662:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003664:	463b      	mov	r3, r7
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	785b      	ldrb	r3, [r3, #1]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d17a      	bne.n	8003764 <USB_EPStartXfer+0x404>
 800366e:	f107 0318 	add.w	r3, r7, #24
 8003672:	1d3a      	adds	r2, r7, #4
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003680:	b29b      	uxth	r3, r3
 8003682:	4619      	mov	r1, r3
 8003684:	f107 0318 	add.w	r3, r7, #24
 8003688:	f107 0218 	add.w	r2, r7, #24
 800368c:	6812      	ldr	r2, [r2, #0]
 800368e:	440a      	add	r2, r1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	463b      	mov	r3, r7
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	011a      	lsls	r2, r3, #4
 800369a:	f107 0318 	add.w	r3, r7, #24
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4413      	add	r3, r2
 80036a2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80036a6:	f107 0314 	add.w	r3, r7, #20
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d11a      	bne.n	80036ea <USB_EPStartXfer+0x38a>
 80036b4:	f107 0314 	add.w	r3, r7, #20
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	801a      	strh	r2, [r3, #0]
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036de:	b29a      	uxth	r2, r3
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	801a      	strh	r2, [r3, #0]
 80036e8:	e067      	b.n	80037ba <USB_EPStartXfer+0x45a>
 80036ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036ee:	2b3e      	cmp	r3, #62	; 0x3e
 80036f0:	d819      	bhi.n	8003726 <USB_EPStartXfer+0x3c6>
 80036f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d004      	beq.n	8003712 <USB_EPStartXfer+0x3b2>
 8003708:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800370c:	3301      	adds	r3, #1
 800370e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003712:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003716:	b29b      	uxth	r3, r3
 8003718:	029b      	lsls	r3, r3, #10
 800371a:	b29a      	uxth	r2, r3
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	801a      	strh	r2, [r3, #0]
 8003724:	e049      	b.n	80037ba <USB_EPStartXfer+0x45a>
 8003726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <USB_EPStartXfer+0x3e6>
 800373c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003740:	3b01      	subs	r3, #1
 8003742:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003746:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800374a:	b29b      	uxth	r3, r3
 800374c:	029b      	lsls	r3, r3, #10
 800374e:	b29b      	uxth	r3, r3
 8003750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003758:	b29a      	uxth	r2, r3
 800375a:	f107 0314 	add.w	r3, r7, #20
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	801a      	strh	r2, [r3, #0]
 8003762:	e02a      	b.n	80037ba <USB_EPStartXfer+0x45a>
 8003764:	463b      	mov	r3, r7
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	785b      	ldrb	r3, [r3, #1]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d125      	bne.n	80037ba <USB_EPStartXfer+0x45a>
 800376e:	f107 0320 	add.w	r3, r7, #32
 8003772:	1d3a      	adds	r2, r7, #4
 8003774:	6812      	ldr	r2, [r2, #0]
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003780:	b29b      	uxth	r3, r3
 8003782:	4619      	mov	r1, r3
 8003784:	f107 0320 	add.w	r3, r7, #32
 8003788:	f107 0220 	add.w	r2, r7, #32
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	440a      	add	r2, r1
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	463b      	mov	r3, r7
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	011a      	lsls	r2, r3, #4
 800379a:	f107 0320 	add.w	r3, r7, #32
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4413      	add	r3, r2
 80037a2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80037a6:	f107 031c 	add.w	r3, r7, #28
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	f107 031c 	add.w	r3, r7, #28
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80037ba:	463b      	mov	r3, r7
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	891b      	ldrh	r3, [r3, #8]
 80037c0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80037c4:	463b      	mov	r3, r7
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6959      	ldr	r1, [r3, #20]
 80037ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80037d4:	1d38      	adds	r0, r7, #4
 80037d6:	6800      	ldr	r0, [r0, #0]
 80037d8:	f001 f9f7 	bl	8004bca <USB_WritePMA>
 80037dc:	f000 bcc6 	b.w	800416c <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80037e0:	463b      	mov	r3, r7
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	785b      	ldrb	r3, [r3, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d164      	bne.n	80038b4 <USB_EPStartXfer+0x554>
 80037ea:	1d3b      	adds	r3, r7, #4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80037f0:	1d3b      	adds	r3, r7, #4
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fe:	4413      	add	r3, r2
 8003800:	64bb      	str	r3, [r7, #72]	; 0x48
 8003802:	463b      	mov	r3, r7
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	011a      	lsls	r2, r3, #4
 800380a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380c:	4413      	add	r3, r2
 800380e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003812:	647b      	str	r3, [r7, #68]	; 0x44
 8003814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d112      	bne.n	8003842 <USB_EPStartXfer+0x4e2>
 800381c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003826:	b29a      	uxth	r2, r3
 8003828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800382a:	801a      	strh	r2, [r3, #0]
 800382c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800382e:	881b      	ldrh	r3, [r3, #0]
 8003830:	b29b      	uxth	r3, r3
 8003832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800383a:	b29a      	uxth	r2, r3
 800383c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	e057      	b.n	80038f2 <USB_EPStartXfer+0x592>
 8003842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003846:	2b3e      	cmp	r3, #62	; 0x3e
 8003848:	d817      	bhi.n	800387a <USB_EPStartXfer+0x51a>
 800384a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <USB_EPStartXfer+0x50a>
 8003860:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003864:	3301      	adds	r3, #1
 8003866:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800386a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800386e:	b29b      	uxth	r3, r3
 8003870:	029b      	lsls	r3, r3, #10
 8003872:	b29a      	uxth	r2, r3
 8003874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003876:	801a      	strh	r2, [r3, #0]
 8003878:	e03b      	b.n	80038f2 <USB_EPStartXfer+0x592>
 800387a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <USB_EPStartXfer+0x53a>
 8003890:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003894:	3b01      	subs	r3, #1
 8003896:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800389a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800389e:	b29b      	uxth	r3, r3
 80038a0:	029b      	lsls	r3, r3, #10
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038b0:	801a      	strh	r2, [r3, #0]
 80038b2:	e01e      	b.n	80038f2 <USB_EPStartXfer+0x592>
 80038b4:	463b      	mov	r3, r7
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	785b      	ldrb	r3, [r3, #1]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d119      	bne.n	80038f2 <USB_EPStartXfer+0x592>
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	653b      	str	r3, [r7, #80]	; 0x50
 80038c4:	1d3b      	adds	r3, r7, #4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d2:	4413      	add	r3, r2
 80038d4:	653b      	str	r3, [r7, #80]	; 0x50
 80038d6:	463b      	mov	r3, r7
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	011a      	lsls	r2, r3, #4
 80038de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e0:	4413      	add	r3, r2
 80038e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80038f2:	463b      	mov	r3, r7
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	891b      	ldrh	r3, [r3, #8]
 80038f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80038fc:	463b      	mov	r3, r7
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6959      	ldr	r1, [r3, #20]
 8003902:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003906:	b29b      	uxth	r3, r3
 8003908:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800390c:	1d38      	adds	r0, r7, #4
 800390e:	6800      	ldr	r0, [r0, #0]
 8003910:	f001 f95b 	bl	8004bca <USB_WritePMA>
            ep->xfer_buff += len;
 8003914:	463b      	mov	r3, r7
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	695a      	ldr	r2, [r3, #20]
 800391a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800391e:	441a      	add	r2, r3
 8003920:	463b      	mov	r3, r7
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003926:	463b      	mov	r3, r7
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6a1a      	ldr	r2, [r3, #32]
 800392c:	463b      	mov	r3, r7
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	429a      	cmp	r2, r3
 8003934:	d909      	bls.n	800394a <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8003936:	463b      	mov	r3, r7
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a1a      	ldr	r2, [r3, #32]
 800393c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003940:	1ad2      	subs	r2, r2, r3
 8003942:	463b      	mov	r3, r7
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	621a      	str	r2, [r3, #32]
 8003948:	e008      	b.n	800395c <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800394a:	463b      	mov	r3, r7
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8003954:	463b      	mov	r3, r7
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2200      	movs	r2, #0
 800395a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	643b      	str	r3, [r7, #64]	; 0x40
 8003962:	463b      	mov	r3, r7
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	785b      	ldrb	r3, [r3, #1]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d164      	bne.n	8003a36 <USB_EPStartXfer+0x6d6>
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	63bb      	str	r3, [r7, #56]	; 0x38
 8003972:	1d3b      	adds	r3, r7, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800397a:	b29b      	uxth	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	4413      	add	r3, r2
 8003982:	63bb      	str	r3, [r7, #56]	; 0x38
 8003984:	463b      	mov	r3, r7
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	011a      	lsls	r2, r3, #4
 800398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398e:	4413      	add	r3, r2
 8003990:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
 8003996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800399a:	2b00      	cmp	r3, #0
 800399c:	d112      	bne.n	80039c4 <USB_EPStartXfer+0x664>
 800399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	801a      	strh	r2, [r3, #0]
 80039ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039bc:	b29a      	uxth	r2, r3
 80039be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c0:	801a      	strh	r2, [r3, #0]
 80039c2:	e054      	b.n	8003a6e <USB_EPStartXfer+0x70e>
 80039c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039c8:	2b3e      	cmp	r3, #62	; 0x3e
 80039ca:	d817      	bhi.n	80039fc <USB_EPStartXfer+0x69c>
 80039cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80039d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <USB_EPStartXfer+0x68c>
 80039e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039e6:	3301      	adds	r3, #1
 80039e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80039ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	029b      	lsls	r3, r3, #10
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f8:	801a      	strh	r2, [r3, #0]
 80039fa:	e038      	b.n	8003a6e <USB_EPStartXfer+0x70e>
 80039fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d104      	bne.n	8003a1c <USB_EPStartXfer+0x6bc>
 8003a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a16:	3b01      	subs	r3, #1
 8003a18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	029b      	lsls	r3, r3, #10
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a32:	801a      	strh	r2, [r3, #0]
 8003a34:	e01b      	b.n	8003a6e <USB_EPStartXfer+0x70e>
 8003a36:	463b      	mov	r3, r7
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d116      	bne.n	8003a6e <USB_EPStartXfer+0x70e>
 8003a40:	1d3b      	adds	r3, r7, #4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4e:	4413      	add	r3, r2
 8003a50:	643b      	str	r3, [r7, #64]	; 0x40
 8003a52:	463b      	mov	r3, r7
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	011a      	lsls	r2, r3, #4
 8003a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003a6e:	463b      	mov	r3, r7
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	895b      	ldrh	r3, [r3, #10]
 8003a74:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a78:	463b      	mov	r3, r7
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6959      	ldr	r1, [r3, #20]
 8003a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003a88:	1d38      	adds	r0, r7, #4
 8003a8a:	6800      	ldr	r0, [r0, #0]
 8003a8c:	f001 f89d 	bl	8004bca <USB_WritePMA>
 8003a90:	e36c      	b.n	800416c <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003a92:	463b      	mov	r3, r7
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	463b      	mov	r3, r7
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	881b      	ldrh	r3, [r3, #0]
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	463b      	mov	r3, r7
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	441a      	add	r2, r3
 8003ac8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003ae0:	1d3b      	adds	r3, r7, #4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003af4:	4413      	add	r3, r2
 8003af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003af8:	463b      	mov	r3, r7
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	011a      	lsls	r2, r3, #4
 8003b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b02:	4413      	add	r3, r2
 8003b04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b08:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003b14:	463b      	mov	r3, r7
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	891b      	ldrh	r3, [r3, #8]
 8003b1a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b1e:	463b      	mov	r3, r7
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6959      	ldr	r1, [r3, #20]
 8003b24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003b2e:	1d38      	adds	r0, r7, #4
 8003b30:	6800      	ldr	r0, [r0, #0]
 8003b32:	f001 f84a 	bl	8004bca <USB_WritePMA>
 8003b36:	e319      	b.n	800416c <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8003b38:	1d3b      	adds	r3, r7, #4
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b52:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8003b56:	1d3b      	adds	r3, r7, #4
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	463b      	mov	r3, r7
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	441a      	add	r2, r3
 8003b64:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8003b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b70:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003b7c:	463b      	mov	r3, r7
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6a1a      	ldr	r2, [r3, #32]
 8003b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	463b      	mov	r3, r7
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b8e:	1d3b      	adds	r3, r7, #4
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	463b      	mov	r3, r7
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8162 	beq.w	8003e6e <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003baa:	1d3b      	adds	r3, r7, #4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	785b      	ldrb	r3, [r3, #1]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d164      	bne.n	8003c86 <USB_EPStartXfer+0x926>
 8003bbc:	1d3b      	adds	r3, r7, #4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bc2:	1d3b      	adds	r3, r7, #4
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bd0:	4413      	add	r3, r2
 8003bd2:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bd4:	463b      	mov	r3, r7
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	011a      	lsls	r2, r3, #4
 8003bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bde:	4413      	add	r3, r2
 8003be0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003be4:	677b      	str	r3, [r7, #116]	; 0x74
 8003be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d112      	bne.n	8003c14 <USB_EPStartXfer+0x8b4>
 8003bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bfc:	801a      	strh	r2, [r3, #0]
 8003bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c10:	801a      	strh	r2, [r3, #0]
 8003c12:	e057      	b.n	8003cc4 <USB_EPStartXfer+0x964>
 8003c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c18:	2b3e      	cmp	r3, #62	; 0x3e
 8003c1a:	d817      	bhi.n	8003c4c <USB_EPStartXfer+0x8ec>
 8003c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c20:	085b      	lsrs	r3, r3, #1
 8003c22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d004      	beq.n	8003c3c <USB_EPStartXfer+0x8dc>
 8003c32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c36:	3301      	adds	r3, #1
 8003c38:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003c3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	029b      	lsls	r3, r3, #10
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c48:	801a      	strh	r2, [r3, #0]
 8003c4a:	e03b      	b.n	8003cc4 <USB_EPStartXfer+0x964>
 8003c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d104      	bne.n	8003c6c <USB_EPStartXfer+0x90c>
 8003c62:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c66:	3b01      	subs	r3, #1
 8003c68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003c6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	029b      	lsls	r3, r3, #10
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c82:	801a      	strh	r2, [r3, #0]
 8003c84:	e01e      	b.n	8003cc4 <USB_EPStartXfer+0x964>
 8003c86:	463b      	mov	r3, r7
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	785b      	ldrb	r3, [r3, #1]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d119      	bne.n	8003cc4 <USB_EPStartXfer+0x964>
 8003c90:	1d3b      	adds	r3, r7, #4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	011a      	lsls	r2, r3, #4
 8003cae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cc2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003cc4:	463b      	mov	r3, r7
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	895b      	ldrh	r3, [r3, #10]
 8003cca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cce:	463b      	mov	r3, r7
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6959      	ldr	r1, [r3, #20]
 8003cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003cde:	1d38      	adds	r0, r7, #4
 8003ce0:	6800      	ldr	r0, [r0, #0]
 8003ce2:	f000 ff72 	bl	8004bca <USB_WritePMA>
          ep->xfer_buff += len;
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695a      	ldr	r2, [r3, #20]
 8003cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003cf0:	441a      	add	r2, r3
 8003cf2:	463b      	mov	r3, r7
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	463b      	mov	r3, r7
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d909      	bls.n	8003d1c <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8003d08:	463b      	mov	r3, r7
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6a1a      	ldr	r2, [r3, #32]
 8003d0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d12:	1ad2      	subs	r2, r2, r3
 8003d14:	463b      	mov	r3, r7
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	621a      	str	r2, [r3, #32]
 8003d1a:	e008      	b.n	8003d2e <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8003d26:	463b      	mov	r3, r7
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8003d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 821a 	beq.w	800416c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003d38:	463b      	mov	r3, r7
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	785b      	ldrb	r3, [r3, #1]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d164      	bne.n	8003e0c <USB_EPStartXfer+0xaac>
 8003d42:	1d3b      	adds	r3, r7, #4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d56:	4413      	add	r3, r2
 8003d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	011a      	lsls	r2, r3, #4
 8003d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d64:	4413      	add	r3, r2
 8003d66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d6a:	667b      	str	r3, [r7, #100]	; 0x64
 8003d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d112      	bne.n	8003d9a <USB_EPStartXfer+0xa3a>
 8003d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d82:	801a      	strh	r2, [r3, #0]
 8003d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d96:	801a      	strh	r2, [r3, #0]
 8003d98:	e057      	b.n	8003e4a <USB_EPStartXfer+0xaea>
 8003d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003d9e:	2b3e      	cmp	r3, #62	; 0x3e
 8003da0:	d817      	bhi.n	8003dd2 <USB_EPStartXfer+0xa72>
 8003da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003da6:	085b      	lsrs	r3, r3, #1
 8003da8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003dac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d004      	beq.n	8003dc2 <USB_EPStartXfer+0xa62>
 8003db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	029b      	lsls	r3, r3, #10
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dce:	801a      	strh	r2, [r3, #0]
 8003dd0:	e03b      	b.n	8003e4a <USB_EPStartXfer+0xaea>
 8003dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003de0:	f003 031f 	and.w	r3, r3, #31
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d104      	bne.n	8003df2 <USB_EPStartXfer+0xa92>
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dec:	3b01      	subs	r3, #1
 8003dee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e08:	801a      	strh	r2, [r3, #0]
 8003e0a:	e01e      	b.n	8003e4a <USB_EPStartXfer+0xaea>
 8003e0c:	463b      	mov	r3, r7
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	785b      	ldrb	r3, [r3, #1]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d119      	bne.n	8003e4a <USB_EPStartXfer+0xaea>
 8003e16:	1d3b      	adds	r3, r7, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e1c:	1d3b      	adds	r3, r7, #4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e2a:	4413      	add	r3, r2
 8003e2c:	673b      	str	r3, [r7, #112]	; 0x70
 8003e2e:	463b      	mov	r3, r7
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	011a      	lsls	r2, r3, #4
 8003e36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e38:	4413      	add	r3, r2
 8003e3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003e4a:	463b      	mov	r3, r7
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	891b      	ldrh	r3, [r3, #8]
 8003e50:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e54:	463b      	mov	r3, r7
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6959      	ldr	r1, [r3, #20]
 8003e5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003e64:	1d38      	adds	r0, r7, #4
 8003e66:	6800      	ldr	r0, [r0, #0]
 8003e68:	f000 feaf 	bl	8004bca <USB_WritePMA>
 8003e6c:	e17e      	b.n	800416c <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003e6e:	463b      	mov	r3, r7
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	785b      	ldrb	r3, [r3, #1]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d16f      	bne.n	8003f58 <USB_EPStartXfer+0xbf8>
 8003e78:	1d3b      	adds	r3, r7, #4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e80:	1d3b      	adds	r3, r7, #4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e90:	4413      	add	r3, r2
 8003e92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e96:	463b      	mov	r3, r7
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	011a      	lsls	r2, r3, #4
 8003e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d116      	bne.n	8003ee2 <USB_EPStartXfer+0xb82>
 8003eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ec6:	801a      	strh	r2, [r3, #0]
 8003ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ede:	801a      	strh	r2, [r3, #0]
 8003ee0:	e05f      	b.n	8003fa2 <USB_EPStartXfer+0xc42>
 8003ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ee6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ee8:	d818      	bhi.n	8003f1c <USB_EPStartXfer+0xbbc>
 8003eea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d004      	beq.n	8003f0a <USB_EPStartXfer+0xbaa>
 8003f00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f04:	3301      	adds	r3, #1
 8003f06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003f0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	029b      	lsls	r3, r3, #10
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	e042      	b.n	8003fa2 <USB_EPStartXfer+0xc42>
 8003f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <USB_EPStartXfer+0xbdc>
 8003f32:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f36:	3b01      	subs	r3, #1
 8003f38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003f3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	029b      	lsls	r3, r3, #10
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f54:	801a      	strh	r2, [r3, #0]
 8003f56:	e024      	b.n	8003fa2 <USB_EPStartXfer+0xc42>
 8003f58:	463b      	mov	r3, r7
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	785b      	ldrb	r3, [r3, #1]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d11f      	bne.n	8003fa2 <USB_EPStartXfer+0xc42>
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f6a:	1d3b      	adds	r3, r7, #4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003f80:	463b      	mov	r3, r7
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	011a      	lsls	r2, r3, #4
 8003f88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fa0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003fa2:	463b      	mov	r3, r7
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	891b      	ldrh	r3, [r3, #8]
 8003fa8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003fac:	463b      	mov	r3, r7
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6959      	ldr	r1, [r3, #20]
 8003fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8003fbc:	1d38      	adds	r0, r7, #4
 8003fbe:	6800      	ldr	r0, [r0, #0]
 8003fc0:	f000 fe03 	bl	8004bca <USB_WritePMA>
          ep->xfer_buff += len;
 8003fc4:	463b      	mov	r3, r7
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fce:	441a      	add	r2, r3
 8003fd0:	463b      	mov	r3, r7
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8003fd6:	463b      	mov	r3, r7
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6a1a      	ldr	r2, [r3, #32]
 8003fdc:	463b      	mov	r3, r7
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d909      	bls.n	8003ffa <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8003fe6:	463b      	mov	r3, r7
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6a1a      	ldr	r2, [r3, #32]
 8003fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ff0:	1ad2      	subs	r2, r2, r3
 8003ff2:	463b      	mov	r3, r7
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	621a      	str	r2, [r3, #32]
 8003ff8:	e008      	b.n	800400c <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8003ffa:	463b      	mov	r3, r7
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004004:	463b      	mov	r3, r7
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2200      	movs	r2, #0
 800400a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800400c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80ab 	beq.w	800416c <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004016:	1d3b      	adds	r3, r7, #4
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800401e:	463b      	mov	r3, r7
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	785b      	ldrb	r3, [r3, #1]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d16f      	bne.n	8004108 <USB_EPStartXfer+0xda8>
 8004028:	1d3b      	adds	r3, r7, #4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004038:	b29b      	uxth	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004040:	4413      	add	r3, r2
 8004042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004046:	463b      	mov	r3, r7
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	011a      	lsls	r2, r3, #4
 800404e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004052:	4413      	add	r3, r2
 8004054:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800405c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d116      	bne.n	8004092 <USB_EPStartXfer+0xd32>
 8004064:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29b      	uxth	r3, r3
 800406c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004070:	b29a      	uxth	r2, r3
 8004072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004076:	801a      	strh	r2, [r3, #0]
 8004078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004084:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004088:	b29a      	uxth	r2, r3
 800408a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800408e:	801a      	strh	r2, [r3, #0]
 8004090:	e05b      	b.n	800414a <USB_EPStartXfer+0xdea>
 8004092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004096:	2b3e      	cmp	r3, #62	; 0x3e
 8004098:	d818      	bhi.n	80040cc <USB_EPStartXfer+0xd6c>
 800409a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80040a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d004      	beq.n	80040ba <USB_EPStartXfer+0xd5a>
 80040b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b4:	3301      	adds	r3, #1
 80040b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80040ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040be:	b29b      	uxth	r3, r3
 80040c0:	029b      	lsls	r3, r3, #10
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040c8:	801a      	strh	r2, [r3, #0]
 80040ca:	e03e      	b.n	800414a <USB_EPStartXfer+0xdea>
 80040cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80040d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <USB_EPStartXfer+0xd8c>
 80040e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e6:	3b01      	subs	r3, #1
 80040e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80040ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	029b      	lsls	r3, r3, #10
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040fe:	b29a      	uxth	r2, r3
 8004100:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	e020      	b.n	800414a <USB_EPStartXfer+0xdea>
 8004108:	463b      	mov	r3, r7
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	785b      	ldrb	r3, [r3, #1]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d11b      	bne.n	800414a <USB_EPStartXfer+0xdea>
 8004112:	1d3b      	adds	r3, r7, #4
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800411a:	b29b      	uxth	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004122:	4413      	add	r3, r2
 8004124:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004128:	463b      	mov	r3, r7
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	011a      	lsls	r2, r3, #4
 8004130:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004134:	4413      	add	r3, r2
 8004136:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800413a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800413e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004142:	b29a      	uxth	r2, r3
 8004144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004148:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800414a:	463b      	mov	r3, r7
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	895b      	ldrh	r3, [r3, #10]
 8004150:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004154:	463b      	mov	r3, r7
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6959      	ldr	r1, [r3, #20]
 800415a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800415e:	b29b      	uxth	r3, r3
 8004160:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004164:	1d38      	adds	r0, r7, #4
 8004166:	6800      	ldr	r0, [r0, #0]
 8004168:	f000 fd2f 	bl	8004bca <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800416c:	1d3b      	adds	r3, r7, #4
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	463b      	mov	r3, r7
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	f107 020a 	add.w	r2, r7, #10
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800418a:	8013      	strh	r3, [r2, #0]
 800418c:	f107 030a 	add.w	r3, r7, #10
 8004190:	f107 020a 	add.w	r2, r7, #10
 8004194:	8812      	ldrh	r2, [r2, #0]
 8004196:	f082 0210 	eor.w	r2, r2, #16
 800419a:	801a      	strh	r2, [r3, #0]
 800419c:	f107 030a 	add.w	r3, r7, #10
 80041a0:	f107 020a 	add.w	r2, r7, #10
 80041a4:	8812      	ldrh	r2, [r2, #0]
 80041a6:	f082 0220 	eor.w	r2, r2, #32
 80041aa:	801a      	strh	r2, [r3, #0]
 80041ac:	1d3b      	adds	r3, r7, #4
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	463b      	mov	r3, r7
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	441a      	add	r2, r3
 80041ba:	f107 030a 	add.w	r3, r7, #10
 80041be:	881b      	ldrh	r3, [r3, #0]
 80041c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	8013      	strh	r3, [r2, #0]
 80041d4:	e3b5      	b.n	8004942 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80041d6:	463b      	mov	r3, r7
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	7b1b      	ldrb	r3, [r3, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f040 8090 	bne.w	8004302 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80041e2:	463b      	mov	r3, r7
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699a      	ldr	r2, [r3, #24]
 80041e8:	463b      	mov	r3, r7
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d90e      	bls.n	8004210 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80041f2:	463b      	mov	r3, r7
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80041fc:	463b      	mov	r3, r7
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004206:	1ad2      	subs	r2, r2, r3
 8004208:	463b      	mov	r3, r7
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	619a      	str	r2, [r3, #24]
 800420e:	e008      	b.n	8004222 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8004210:	463b      	mov	r3, r7
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800421a:	463b      	mov	r3, r7
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004222:	1d3b      	adds	r3, r7, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800422a:	1d3b      	adds	r3, r7, #4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004232:	b29b      	uxth	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800423a:	4413      	add	r3, r2
 800423c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004240:	463b      	mov	r3, r7
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	011a      	lsls	r2, r3, #4
 8004248:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800424c:	4413      	add	r3, r2
 800424e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004252:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d116      	bne.n	800428c <USB_EPStartXfer+0xf2c>
 800425e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800426a:	b29a      	uxth	r2, r3
 800426c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004282:	b29a      	uxth	r2, r3
 8004284:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004288:	801a      	strh	r2, [r3, #0]
 800428a:	e32c      	b.n	80048e6 <USB_EPStartXfer+0x1586>
 800428c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004290:	2b3e      	cmp	r3, #62	; 0x3e
 8004292:	d818      	bhi.n	80042c6 <USB_EPStartXfer+0xf66>
 8004294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800429e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d004      	beq.n	80042b4 <USB_EPStartXfer+0xf54>
 80042aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042ae:	3301      	adds	r3, #1
 80042b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80042b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	029b      	lsls	r3, r3, #10
 80042bc:	b29a      	uxth	r2, r3
 80042be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042c2:	801a      	strh	r2, [r3, #0]
 80042c4:	e30f      	b.n	80048e6 <USB_EPStartXfer+0x1586>
 80042c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80042d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d104      	bne.n	80042e6 <USB_EPStartXfer+0xf86>
 80042dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042e0:	3b01      	subs	r3, #1
 80042e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80042e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	029b      	lsls	r3, r3, #10
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042fe:	801a      	strh	r2, [r3, #0]
 8004300:	e2f1      	b.n	80048e6 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004302:	463b      	mov	r3, r7
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	78db      	ldrb	r3, [r3, #3]
 8004308:	2b02      	cmp	r3, #2
 800430a:	f040 818f 	bne.w	800462c <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800430e:	463b      	mov	r3, r7
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d175      	bne.n	8004404 <USB_EPStartXfer+0x10a4>
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004320:	1d3b      	adds	r3, r7, #4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004330:	4413      	add	r3, r2
 8004332:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004336:	463b      	mov	r3, r7
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	011a      	lsls	r2, r3, #4
 800433e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004342:	4413      	add	r3, r2
 8004344:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004348:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800434c:	463b      	mov	r3, r7
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d116      	bne.n	8004384 <USB_EPStartXfer+0x1024>
 8004356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	b29b      	uxth	r3, r3
 800435e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004362:	b29a      	uxth	r2, r3
 8004364:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800437a:	b29a      	uxth	r2, r3
 800437c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004380:	801a      	strh	r2, [r3, #0]
 8004382:	e065      	b.n	8004450 <USB_EPStartXfer+0x10f0>
 8004384:	463b      	mov	r3, r7
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b3e      	cmp	r3, #62	; 0x3e
 800438c:	d81a      	bhi.n	80043c4 <USB_EPStartXfer+0x1064>
 800438e:	463b      	mov	r3, r7
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800439a:	463b      	mov	r3, r7
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <USB_EPStartXfer+0x1052>
 80043a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ac:	3301      	adds	r3, #1
 80043ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80043b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	029b      	lsls	r3, r3, #10
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	e045      	b.n	8004450 <USB_EPStartXfer+0x10f0>
 80043c4:	463b      	mov	r3, r7
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80043d0:	463b      	mov	r3, r7
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <USB_EPStartXfer+0x1088>
 80043de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043e2:	3b01      	subs	r3, #1
 80043e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80043e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	029b      	lsls	r3, r3, #10
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	e025      	b.n	8004450 <USB_EPStartXfer+0x10f0>
 8004404:	463b      	mov	r3, r7
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	785b      	ldrb	r3, [r3, #1]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d120      	bne.n	8004450 <USB_EPStartXfer+0x10f0>
 800440e:	1d3b      	adds	r3, r7, #4
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800441e:	b29b      	uxth	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004426:	4413      	add	r3, r2
 8004428:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800442c:	463b      	mov	r3, r7
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	011a      	lsls	r2, r3, #4
 8004434:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004438:	4413      	add	r3, r2
 800443a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800443e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004442:	463b      	mov	r3, r7
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	b29a      	uxth	r2, r3
 800444a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800444e:	801a      	strh	r2, [r3, #0]
 8004450:	1d3b      	adds	r3, r7, #4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004458:	463b      	mov	r3, r7
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	785b      	ldrb	r3, [r3, #1]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d175      	bne.n	800454e <USB_EPStartXfer+0x11ee>
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004472:	b29b      	uxth	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800447a:	4413      	add	r3, r2
 800447c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004480:	463b      	mov	r3, r7
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	011a      	lsls	r2, r3, #4
 8004488:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800448c:	4413      	add	r3, r2
 800448e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004492:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004496:	463b      	mov	r3, r7
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d116      	bne.n	80044ce <USB_EPStartXfer+0x116e>
 80044a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044b2:	801a      	strh	r2, [r3, #0]
 80044b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044ca:	801a      	strh	r2, [r3, #0]
 80044cc:	e061      	b.n	8004592 <USB_EPStartXfer+0x1232>
 80044ce:	463b      	mov	r3, r7
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b3e      	cmp	r3, #62	; 0x3e
 80044d6:	d81a      	bhi.n	800450e <USB_EPStartXfer+0x11ae>
 80044d8:	463b      	mov	r3, r7
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	085b      	lsrs	r3, r3, #1
 80044e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044e4:	463b      	mov	r3, r7
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d004      	beq.n	80044fc <USB_EPStartXfer+0x119c>
 80044f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80044f6:	3301      	adds	r3, #1
 80044f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80044fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004500:	b29b      	uxth	r3, r3
 8004502:	029b      	lsls	r3, r3, #10
 8004504:	b29a      	uxth	r2, r3
 8004506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800450a:	801a      	strh	r2, [r3, #0]
 800450c:	e041      	b.n	8004592 <USB_EPStartXfer+0x1232>
 800450e:	463b      	mov	r3, r7
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	095b      	lsrs	r3, r3, #5
 8004516:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800451a:	463b      	mov	r3, r7
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <USB_EPStartXfer+0x11d2>
 8004528:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800452c:	3b01      	subs	r3, #1
 800452e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004532:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004536:	b29b      	uxth	r3, r3
 8004538:	029b      	lsls	r3, r3, #10
 800453a:	b29b      	uxth	r3, r3
 800453c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004544:	b29a      	uxth	r2, r3
 8004546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800454a:	801a      	strh	r2, [r3, #0]
 800454c:	e021      	b.n	8004592 <USB_EPStartXfer+0x1232>
 800454e:	463b      	mov	r3, r7
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	785b      	ldrb	r3, [r3, #1]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d11c      	bne.n	8004592 <USB_EPStartXfer+0x1232>
 8004558:	1d3b      	adds	r3, r7, #4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004560:	b29b      	uxth	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004568:	4413      	add	r3, r2
 800456a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800456e:	463b      	mov	r3, r7
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	011a      	lsls	r2, r3, #4
 8004576:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800457a:	4413      	add	r3, r2
 800457c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004584:	463b      	mov	r3, r7
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	b29a      	uxth	r2, r3
 800458c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004590:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004592:	463b      	mov	r3, r7
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 81a4 	beq.w	80048e6 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800459e:	1d3b      	adds	r3, r7, #4
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	463b      	mov	r3, r7
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4413      	add	r3, r2
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80045b2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80045b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d005      	beq.n	80045ca <USB_EPStartXfer+0x126a>
 80045be:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10d      	bne.n	80045e6 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80045ca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80045ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f040 8187 	bne.w	80048e6 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80045d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f040 8180 	bne.w	80048e6 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80045e6:	1d3b      	adds	r3, r7, #4
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	463b      	mov	r3, r7
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004600:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	463b      	mov	r3, r7
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	441a      	add	r2, r3
 8004612:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8004616:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800461a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800461e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004622:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004626:	b29b      	uxth	r3, r3
 8004628:	8013      	strh	r3, [r2, #0]
 800462a:	e15c      	b.n	80048e6 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800462c:	463b      	mov	r3, r7
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	78db      	ldrb	r3, [r3, #3]
 8004632:	2b01      	cmp	r3, #1
 8004634:	f040 8155 	bne.w	80048e2 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004638:	463b      	mov	r3, r7
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	463b      	mov	r3, r7
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	429a      	cmp	r2, r3
 8004646:	d90e      	bls.n	8004666 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8004648:	463b      	mov	r3, r7
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8004652:	463b      	mov	r3, r7
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	699a      	ldr	r2, [r3, #24]
 8004658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800465c:	1ad2      	subs	r2, r2, r3
 800465e:	463b      	mov	r3, r7
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	619a      	str	r2, [r3, #24]
 8004664:	e008      	b.n	8004678 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8004666:	463b      	mov	r3, r7
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8004670:	463b      	mov	r3, r7
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2200      	movs	r2, #0
 8004676:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004678:	463b      	mov	r3, r7
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	785b      	ldrb	r3, [r3, #1]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d16f      	bne.n	8004762 <USB_EPStartXfer+0x1402>
 8004682:	1d3b      	adds	r3, r7, #4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004692:	b29b      	uxth	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800469a:	4413      	add	r3, r2
 800469c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80046a0:	463b      	mov	r3, r7
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	011a      	lsls	r2, r3, #4
 80046a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80046ac:	4413      	add	r3, r2
 80046ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d116      	bne.n	80046ec <USB_EPStartXfer+0x138c>
 80046be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80046d0:	801a      	strh	r2, [r3, #0]
 80046d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	e05f      	b.n	80047ac <USB_EPStartXfer+0x144c>
 80046ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046f0:	2b3e      	cmp	r3, #62	; 0x3e
 80046f2:	d818      	bhi.n	8004726 <USB_EPStartXfer+0x13c6>
 80046f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046f8:	085b      	lsrs	r3, r3, #1
 80046fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80046fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d004      	beq.n	8004714 <USB_EPStartXfer+0x13b4>
 800470a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800470e:	3301      	adds	r3, #1
 8004710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004714:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004718:	b29b      	uxth	r3, r3
 800471a:	029b      	lsls	r3, r3, #10
 800471c:	b29a      	uxth	r2, r3
 800471e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004722:	801a      	strh	r2, [r3, #0]
 8004724:	e042      	b.n	80047ac <USB_EPStartXfer+0x144c>
 8004726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <USB_EPStartXfer+0x13e6>
 800473c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004740:	3b01      	subs	r3, #1
 8004742:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800474a:	b29b      	uxth	r3, r3
 800474c:	029b      	lsls	r3, r3, #10
 800474e:	b29b      	uxth	r3, r3
 8004750:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004754:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004758:	b29a      	uxth	r2, r3
 800475a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800475e:	801a      	strh	r2, [r3, #0]
 8004760:	e024      	b.n	80047ac <USB_EPStartXfer+0x144c>
 8004762:	463b      	mov	r3, r7
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d11f      	bne.n	80047ac <USB_EPStartXfer+0x144c>
 800476c:	1d3b      	adds	r3, r7, #4
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004774:	1d3b      	adds	r3, r7, #4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477c:	b29b      	uxth	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004784:	4413      	add	r3, r2
 8004786:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800478a:	463b      	mov	r3, r7
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	011a      	lsls	r2, r3, #4
 8004792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004796:	4413      	add	r3, r2
 8004798:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800479c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80047a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80047aa:	801a      	strh	r2, [r3, #0]
 80047ac:	1d3b      	adds	r3, r7, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047b4:	463b      	mov	r3, r7
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	785b      	ldrb	r3, [r3, #1]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d16f      	bne.n	800489e <USB_EPStartXfer+0x153e>
 80047be:	1d3b      	adds	r3, r7, #4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80047c6:	1d3b      	adds	r3, r7, #4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d6:	4413      	add	r3, r2
 80047d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80047dc:	463b      	mov	r3, r7
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	011a      	lsls	r2, r3, #4
 80047e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047e8:	4413      	add	r3, r2
 80047ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d116      	bne.n	8004828 <USB_EPStartXfer+0x14c8>
 80047fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004806:	b29a      	uxth	r2, r3
 8004808:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800480c:	801a      	strh	r2, [r3, #0]
 800480e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29b      	uxth	r3, r3
 8004816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800481a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800481e:	b29a      	uxth	r2, r3
 8004820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	e05e      	b.n	80048e6 <USB_EPStartXfer+0x1586>
 8004828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800482c:	2b3e      	cmp	r3, #62	; 0x3e
 800482e:	d818      	bhi.n	8004862 <USB_EPStartXfer+0x1502>
 8004830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004834:	085b      	lsrs	r3, r3, #1
 8004836:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800483a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d004      	beq.n	8004850 <USB_EPStartXfer+0x14f0>
 8004846:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800484a:	3301      	adds	r3, #1
 800484c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004850:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004854:	b29b      	uxth	r3, r3
 8004856:	029b      	lsls	r3, r3, #10
 8004858:	b29a      	uxth	r2, r3
 800485a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800485e:	801a      	strh	r2, [r3, #0]
 8004860:	e041      	b.n	80048e6 <USB_EPStartXfer+0x1586>
 8004862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800486c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	2b00      	cmp	r3, #0
 8004876:	d104      	bne.n	8004882 <USB_EPStartXfer+0x1522>
 8004878:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800487c:	3b01      	subs	r3, #1
 800487e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004882:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004886:	b29b      	uxth	r3, r3
 8004888:	029b      	lsls	r3, r3, #10
 800488a:	b29b      	uxth	r3, r3
 800488c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004894:	b29a      	uxth	r2, r3
 8004896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800489a:	801a      	strh	r2, [r3, #0]
 800489c:	e023      	b.n	80048e6 <USB_EPStartXfer+0x1586>
 800489e:	463b      	mov	r3, r7
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	785b      	ldrb	r3, [r3, #1]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d11e      	bne.n	80048e6 <USB_EPStartXfer+0x1586>
 80048a8:	1d3b      	adds	r3, r7, #4
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b8:	4413      	add	r3, r2
 80048ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048be:	463b      	mov	r3, r7
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	011a      	lsls	r2, r3, #4
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	4413      	add	r3, r2
 80048cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048d8:	b29a      	uxth	r2, r3
 80048da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	e001      	b.n	80048e6 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e02e      	b.n	8004944 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048e6:	1d3b      	adds	r3, r7, #4
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	463b      	mov	r3, r7
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004900:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004904:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004908:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800490c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8004910:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8004914:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004918:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800491c:	1d3b      	adds	r3, r7, #4
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	463b      	mov	r3, r7
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	785b      	ldrb	r3, [r3, #1]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d020      	beq.n	80049a2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004976:	81bb      	strh	r3, [r7, #12]
 8004978:	89bb      	ldrh	r3, [r7, #12]
 800497a:	f083 0310 	eor.w	r3, r3, #16
 800497e:	81bb      	strh	r3, [r7, #12]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	89bb      	ldrh	r3, [r7, #12]
 800498c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004990:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499c:	b29b      	uxth	r3, r3
 800499e:	8013      	strh	r3, [r2, #0]
 80049a0:	e01f      	b.n	80049e2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b8:	81fb      	strh	r3, [r7, #14]
 80049ba:	89fb      	ldrh	r3, [r7, #14]
 80049bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049c0:	81fb      	strh	r3, [r7, #14]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	441a      	add	r2, r3
 80049cc:	89fb      	ldrh	r3, [r7, #14]
 80049ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049de:	b29b      	uxth	r3, r3
 80049e0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr

080049ee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b087      	sub	sp, #28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	7b1b      	ldrb	r3, [r3, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f040 809d 	bne.w	8004b3c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	785b      	ldrb	r3, [r3, #1]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d04c      	beq.n	8004aa4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	823b      	strh	r3, [r7, #16]
 8004a18:	8a3b      	ldrh	r3, [r7, #16]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01b      	beq.n	8004a5a <USB_EPClearStall+0x6c>
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a38:	81fb      	strh	r3, [r7, #14]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	441a      	add	r2, r3
 8004a44:	89fb      	ldrh	r3, [r7, #14]
 8004a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	78db      	ldrb	r3, [r3, #3]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d06c      	beq.n	8004b3c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a78:	81bb      	strh	r3, [r7, #12]
 8004a7a:	89bb      	ldrh	r3, [r7, #12]
 8004a7c:	f083 0320 	eor.w	r3, r3, #32
 8004a80:	81bb      	strh	r3, [r7, #12]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	441a      	add	r2, r3
 8004a8c:	89bb      	ldrh	r3, [r7, #12]
 8004a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	8013      	strh	r3, [r2, #0]
 8004aa2:	e04b      	b.n	8004b3c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	82fb      	strh	r3, [r7, #22]
 8004ab2:	8afb      	ldrh	r3, [r7, #22]
 8004ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01b      	beq.n	8004af4 <USB_EPClearStall+0x106>
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad2:	82bb      	strh	r3, [r7, #20]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	441a      	add	r2, r3
 8004ade:	8abb      	ldrh	r3, [r7, #20]
 8004ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	827b      	strh	r3, [r7, #18]
 8004b0c:	8a7b      	ldrh	r3, [r7, #18]
 8004b0e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b12:	827b      	strh	r3, [r7, #18]
 8004b14:	8a7b      	ldrh	r3, [r7, #18]
 8004b16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b1a:	827b      	strh	r3, [r7, #18]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	441a      	add	r2, r3
 8004b26:	8a7b      	ldrh	r3, [r7, #18]
 8004b28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bc80      	pop	{r7}
 8004b46:	4770      	bx	lr

08004b48 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d103      	bne.n	8004b62 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2280      	movs	r2, #128	; 0x80
 8004b5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr

08004b6e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bc80      	pop	{r7}
 8004b80:	4770      	bx	lr

08004b82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3714      	adds	r7, #20
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr

08004bca <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b08d      	sub	sp, #52	; 0x34
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	460b      	mov	r3, r1
 8004bda:	80fb      	strh	r3, [r7, #6]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004be0:	88bb      	ldrh	r3, [r7, #4]
 8004be2:	3301      	adds	r3, #1
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004bf0:	88fb      	ldrh	r3, [r7, #6]
 8004bf2:	005a      	lsls	r2, r3, #1
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bfc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c02:	e01e      	b.n	8004c42 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c28:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	3302      	adds	r3, #2
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	3301      	adds	r3, #1
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1dd      	bne.n	8004c04 <USB_WritePMA+0x3a>
  }
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	3734      	adds	r7, #52	; 0x34
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b08b      	sub	sp, #44	; 0x2c
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	4611      	mov	r1, r2
 8004c60:	461a      	mov	r2, r3
 8004c62:	460b      	mov	r3, r1
 8004c64:	80fb      	strh	r3, [r7, #6]
 8004c66:	4613      	mov	r3, r2
 8004c68:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004c6a:	88bb      	ldrh	r3, [r7, #4]
 8004c6c:	085b      	lsrs	r3, r3, #1
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	005a      	lsls	r2, r3, #1
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c86:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8c:	e01b      	b.n	8004cc6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	3302      	adds	r3, #2
 8004c9a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	0a1b      	lsrs	r3, r3, #8
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e0      	bne.n	8004c8e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004ccc:	88bb      	ldrh	r3, [r7, #4]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	701a      	strb	r2, [r3, #0]
  }
}
 8004ce8:	bf00      	nop
 8004cea:	372c      	adds	r7, #44	; 0x2c
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr
	...

08004cf4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004cfc:	4b0e      	ldr	r3, [pc, #56]	; (8004d38 <LL_mDelay+0x44>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004d02:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0a:	d00c      	beq.n	8004d26 <LL_mDelay+0x32>
  {
    Delay++;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004d12:	e008      	b.n	8004d26 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004d14:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <LL_mDelay+0x44>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <LL_mDelay+0x32>
    {
      Delay--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f3      	bne.n	8004d14 <LL_mDelay+0x20>
    }
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr
 8004d38:	e000e010 	.word	0xe000e010

08004d3c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004d44:	4a03      	ldr	r2, [pc, #12]	; (8004d54 <LL_SetSystemCoreClock+0x18>)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6013      	str	r3, [r2, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	20000000 	.word	0x20000000

08004d58 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	460b      	mov	r3, r1
 8004d62:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004d64:	2305      	movs	r3, #5
 8004d66:	2203      	movs	r2, #3
 8004d68:	2181      	movs	r1, #129	; 0x81
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f001 fc8d 	bl	800668a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004d76:	2010      	movs	r0, #16
 8004d78:	f001 fd9c 	bl	80068b4 <USBD_static_malloc>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e005      	b.n	8004d9e <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d98:	2200      	movs	r2, #0
 8004d9a:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004db2:	2181      	movs	r1, #129	; 0x81
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f001 fc8e 	bl	80066d6 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 fd7b 	bl	80068cc <USBD_static_free>
    pdev->pClassData = NULL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004df8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d045      	beq.n	8004ea2 <USBD_HID_Setup+0xba>
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	f040 80d3 	bne.w	8004fc2 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	3b02      	subs	r3, #2
 8004e22:	2b09      	cmp	r3, #9
 8004e24:	d835      	bhi.n	8004e92 <USBD_HID_Setup+0xaa>
 8004e26:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <USBD_HID_Setup+0x44>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08004e83 	.word	0x08004e83
 8004e30:	08004e63 	.word	0x08004e63
 8004e34:	08004e93 	.word	0x08004e93
 8004e38:	08004e93 	.word	0x08004e93
 8004e3c:	08004e93 	.word	0x08004e93
 8004e40:	08004e93 	.word	0x08004e93
 8004e44:	08004e93 	.word	0x08004e93
 8004e48:	08004e93 	.word	0x08004e93
 8004e4c:	08004e71 	.word	0x08004e71
 8004e50:	08004e55 	.word	0x08004e55
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	885b      	ldrh	r3, [r3, #2]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	601a      	str	r2, [r3, #0]
          break;
 8004e60:	e01e      	b.n	8004ea0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2201      	movs	r2, #1
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f001 f944 	bl	80060f6 <USBD_CtlSendData>
          break;
 8004e6e:	e017      	b.n	8004ea0 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	885b      	ldrh	r3, [r3, #2]
 8004e74:	0a1b      	lsrs	r3, r3, #8
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	605a      	str	r2, [r3, #4]
          break;
 8004e80:	e00e      	b.n	8004ea0 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	3304      	adds	r3, #4
 8004e86:	2201      	movs	r2, #1
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f001 f933 	bl	80060f6 <USBD_CtlSendData>
          break;
 8004e90:	e006      	b.n	8004ea0 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8004e92:	6839      	ldr	r1, [r7, #0]
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f001 f8c4 	bl	8006022 <USBD_CtlError>
          ret = USBD_FAIL;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8004e9e:	bf00      	nop
      }
      break;
 8004ea0:	e096      	b.n	8004fd0 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	2b0b      	cmp	r3, #11
 8004ea8:	f200 8083 	bhi.w	8004fb2 <USBD_HID_Setup+0x1ca>
 8004eac:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <USBD_HID_Setup+0xcc>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004ee5 	.word	0x08004ee5
 8004eb8:	08004fb3 	.word	0x08004fb3
 8004ebc:	08004fb3 	.word	0x08004fb3
 8004ec0:	08004fb3 	.word	0x08004fb3
 8004ec4:	08004fb3 	.word	0x08004fb3
 8004ec8:	08004fb3 	.word	0x08004fb3
 8004ecc:	08004f0d 	.word	0x08004f0d
 8004ed0:	08004fb3 	.word	0x08004fb3
 8004ed4:	08004fb3 	.word	0x08004fb3
 8004ed8:	08004fb3 	.word	0x08004fb3
 8004edc:	08004f65 	.word	0x08004f65
 8004ee0:	08004f8d 	.word	0x08004f8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d107      	bne.n	8004efe <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004eee:	f107 030e 	add.w	r3, r7, #14
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f001 f8fd 	bl	80060f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004efc:	e060      	b.n	8004fc0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004efe:	6839      	ldr	r1, [r7, #0]
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f001 f88e 	bl	8006022 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f06:	2302      	movs	r3, #2
 8004f08:	75fb      	strb	r3, [r7, #23]
          break;
 8004f0a:	e059      	b.n	8004fc0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	885b      	ldrh	r3, [r3, #2]
 8004f10:	0a1b      	lsrs	r3, r3, #8
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b22      	cmp	r3, #34	; 0x22
 8004f16:	d108      	bne.n	8004f2a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	88db      	ldrh	r3, [r3, #6]
 8004f1c:	2b4e      	cmp	r3, #78	; 0x4e
 8004f1e:	bf28      	it	cs
 8004f20:	234e      	movcs	r3, #78	; 0x4e
 8004f22:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8004f24:	4b2d      	ldr	r3, [pc, #180]	; (8004fdc <USBD_HID_Setup+0x1f4>)
 8004f26:	61bb      	str	r3, [r7, #24]
 8004f28:	e015      	b.n	8004f56 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	885b      	ldrh	r3, [r3, #2]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b21      	cmp	r3, #33	; 0x21
 8004f34:	d108      	bne.n	8004f48 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8004f36:	4b2a      	ldr	r3, [pc, #168]	; (8004fe0 <USBD_HID_Setup+0x1f8>)
 8004f38:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	88db      	ldrh	r3, [r3, #6]
 8004f3e:	2b09      	cmp	r3, #9
 8004f40:	bf28      	it	cs
 8004f42:	2309      	movcs	r3, #9
 8004f44:	83fb      	strh	r3, [r7, #30]
 8004f46:	e006      	b.n	8004f56 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f001 f869 	bl	8006022 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f50:	2302      	movs	r3, #2
 8004f52:	75fb      	strb	r3, [r7, #23]
            break;
 8004f54:	e034      	b.n	8004fc0 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8004f56:	8bfb      	ldrh	r3, [r7, #30]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	69b9      	ldr	r1, [r7, #24]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f001 f8ca 	bl	80060f6 <USBD_CtlSendData>
          break;
 8004f62:	e02d      	b.n	8004fc0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d107      	bne.n	8004f7e <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	3308      	adds	r3, #8
 8004f72:	2201      	movs	r2, #1
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f001 f8bd 	bl	80060f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f7c:	e020      	b.n	8004fc0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004f7e:	6839      	ldr	r1, [r7, #0]
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f001 f84e 	bl	8006022 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f86:	2302      	movs	r3, #2
 8004f88:	75fb      	strb	r3, [r7, #23]
          break;
 8004f8a:	e019      	b.n	8004fc0 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d106      	bne.n	8004fa4 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	885b      	ldrh	r3, [r3, #2]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fa2:	e00d      	b.n	8004fc0 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8004fa4:	6839      	ldr	r1, [r7, #0]
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f001 f83b 	bl	8006022 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fac:	2302      	movs	r3, #2
 8004fae:	75fb      	strb	r3, [r7, #23]
          break;
 8004fb0:	e006      	b.n	8004fc0 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8004fb2:	6839      	ldr	r1, [r7, #0]
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f001 f834 	bl	8006022 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fba:	2302      	movs	r3, #2
 8004fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8004fbe:	bf00      	nop
      }
      break;
 8004fc0:	e006      	b.n	8004fd0 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8004fc2:	6839      	ldr	r1, [r7, #0]
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f001 f82c 	bl	8006022 <USBD_CtlError>
      ret = USBD_FAIL;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8004fce:	bf00      	nop
  }

  return ret;
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3720      	adds	r7, #32
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	200000c8 	.word	0x200000c8
 8004fe0:	200000b0 	.word	0x200000b0

08004fe4 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff8:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005000:	2b03      	cmp	r3, #3
 8005002:	d10c      	bne.n	800501e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	7b1b      	ldrb	r3, [r3, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d108      	bne.n	800501e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2201      	movs	r2, #1
 8005010:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	2181      	movs	r1, #129	; 0x81
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f001 fc04 	bl	8006826 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2222      	movs	r2, #34	; 0x22
 8005034:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005036:	4b03      	ldr	r3, [pc, #12]	; (8005044 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20000044 	.word	0x20000044

08005048 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2222      	movs	r2, #34	; 0x22
 8005054:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005056:	4b03      	ldr	r3, [pc, #12]	; (8005064 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	bc80      	pop	{r7}
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000068 	.word	0x20000068

08005068 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2222      	movs	r2, #34	; 0x22
 8005074:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005076:	4b03      	ldr	r3, [pc, #12]	; (8005084 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	2000008c 	.word	0x2000008c

08005088 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800509a:	2200      	movs	r2, #0
 800509c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr
	...

080050ac <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	220a      	movs	r2, #10
 80050b8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80050ba:	4b03      	ldr	r3, [pc, #12]	; (80050c8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	200000bc 	.word	0x200000bc

080050cc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050e0:	2302      	movs	r3, #2
 80050e2:	e01a      	b.n	800511a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	79fa      	ldrb	r2, [r7, #7]
 8005110:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f001 fa56 	bl	80065c4 <USBD_LL_Init>

  return USBD_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005122:	b480      	push	{r7}
 8005124:	b085      	sub	sp, #20
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d006      	beq.n	8005144 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800513e:	2300      	movs	r3, #0
 8005140:	73fb      	strb	r3, [r7, #15]
 8005142:	e001      	b.n	8005148 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005144:	2302      	movs	r3, #2
 8005146:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr

08005154 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f001 fa79 	bl	8006654 <USBD_LL_Start>

  return USBD_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800518c:	2302      	movs	r3, #2
 800518e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00c      	beq.n	80051b4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	78fa      	ldrb	r2, [r7, #3]
 80051a4:	4611      	mov	r1, r2
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	4798      	blx	r3
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	460b      	mov	r3, r1
 80051c8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	4611      	mov	r1, r2
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	4798      	blx	r3

  return USBD_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fed7 	bl	8005faa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	2b02      	cmp	r3, #2
 800521e:	d016      	beq.n	800524e <USBD_LL_SetupStage+0x6a>
 8005220:	2b02      	cmp	r3, #2
 8005222:	d81c      	bhi.n	800525e <USBD_LL_SetupStage+0x7a>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <USBD_LL_SetupStage+0x4a>
 8005228:	2b01      	cmp	r3, #1
 800522a:	d008      	beq.n	800523e <USBD_LL_SetupStage+0x5a>
 800522c:	e017      	b.n	800525e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f9ca 	bl	80055d0 <USBD_StdDevReq>
      break;
 800523c:	e01a      	b.n	8005274 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005244:	4619      	mov	r1, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fa2c 	bl	80056a4 <USBD_StdItfReq>
      break;
 800524c:	e012      	b.n	8005274 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fa6c 	bl	8005734 <USBD_StdEPReq>
      break;
 800525c:	e00a      	b.n	8005274 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005264:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005268:	b2db      	uxtb	r3, r3
 800526a:	4619      	mov	r1, r3
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f001 fa51 	bl	8006714 <USBD_LL_StallEP>
      break;
 8005272:	bf00      	nop
  }

  return USBD_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b086      	sub	sp, #24
 8005282:	af00      	add	r7, sp, #0
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	460b      	mov	r3, r1
 8005288:	607a      	str	r2, [r7, #4]
 800528a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800528c:	7afb      	ldrb	r3, [r7, #11]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d14b      	bne.n	800532a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005298:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d134      	bne.n	800530e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d919      	bls.n	80052e4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	1ad2      	subs	r2, r2, r3
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d203      	bcs.n	80052d2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	e002      	b.n	80052d8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 ff38 	bl	8006152 <USBD_CtlContinueRx>
 80052e2:	e038      	b.n	8005356 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d105      	bne.n	8005306 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 ff35 	bl	8006176 <USBD_CtlSendStatus>
 800530c:	e023      	b.n	8005356 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005314:	2b05      	cmp	r3, #5
 8005316:	d11e      	bne.n	8005356 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005320:	2100      	movs	r1, #0
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f001 f9f6 	bl	8006714 <USBD_LL_StallEP>
 8005328:	e015      	b.n	8005356 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800533c:	2b03      	cmp	r3, #3
 800533e:	d108      	bne.n	8005352 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	7afa      	ldrb	r2, [r7, #11]
 800534a:	4611      	mov	r1, r2
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	4798      	blx	r3
 8005350:	e001      	b.n	8005356 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005352:	2302      	movs	r3, #2
 8005354:	e000      	b.n	8005358 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	460b      	mov	r3, r1
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800536e:	7afb      	ldrb	r3, [r7, #11]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d17f      	bne.n	8005474 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3314      	adds	r3, #20
 8005378:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005380:	2b02      	cmp	r3, #2
 8005382:	d15c      	bne.n	800543e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	429a      	cmp	r2, r3
 800538e:	d915      	bls.n	80053bc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	1ad2      	subs	r2, r2, r3
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	461a      	mov	r2, r3
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fec0 	bl	800612e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053ae:	2300      	movs	r3, #0
 80053b0:	2200      	movs	r2, #0
 80053b2:	2100      	movs	r1, #0
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f001 fa59 	bl	800686c <USBD_LL_PrepareReceive>
 80053ba:	e04e      	b.n	800545a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	6912      	ldr	r2, [r2, #16]
 80053c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80053c8:	fb02 f201 	mul.w	r2, r2, r1
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d11c      	bne.n	800540c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80053da:	429a      	cmp	r2, r3
 80053dc:	d316      	bcc.n	800540c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d20f      	bcs.n	800540c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053ec:	2200      	movs	r2, #0
 80053ee:	2100      	movs	r1, #0
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 fe9c 	bl	800612e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053fe:	2300      	movs	r3, #0
 8005400:	2200      	movs	r2, #0
 8005402:	2100      	movs	r1, #0
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f001 fa31 	bl	800686c <USBD_LL_PrepareReceive>
 800540a:	e026      	b.n	800545a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800541e:	2b03      	cmp	r3, #3
 8005420:	d105      	bne.n	800542e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800542e:	2180      	movs	r1, #128	; 0x80
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f001 f96f 	bl	8006714 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 feb0 	bl	800619c <USBD_CtlReceiveStatus>
 800543c:	e00d      	b.n	800545a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005444:	2b04      	cmp	r3, #4
 8005446:	d004      	beq.n	8005452 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800544e:	2b00      	cmp	r3, #0
 8005450:	d103      	bne.n	800545a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005452:	2180      	movs	r1, #128	; 0x80
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f001 f95d 	bl	8006714 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005460:	2b01      	cmp	r3, #1
 8005462:	d11d      	bne.n	80054a0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7ff fe81 	bl	800516c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005472:	e015      	b.n	80054a0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00d      	beq.n	800549c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005486:	2b03      	cmp	r3, #3
 8005488:	d108      	bne.n	800549c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	7afa      	ldrb	r2, [r7, #11]
 8005494:	4611      	mov	r1, r2
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	4798      	blx	r3
 800549a:	e001      	b.n	80054a0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800549c:	2302      	movs	r3, #2
 800549e:	e000      	b.n	80054a2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054b2:	2340      	movs	r3, #64	; 0x40
 80054b4:	2200      	movs	r2, #0
 80054b6:	2100      	movs	r1, #0
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f001 f8e6 	bl	800668a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2240      	movs	r2, #64	; 0x40
 80054ca:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054ce:	2340      	movs	r3, #64	; 0x40
 80054d0:	2200      	movs	r2, #0
 80054d2:	2180      	movs	r1, #128	; 0x80
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f001 f8d8 	bl	800668a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2240      	movs	r2, #64	; 0x40
 80054e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6852      	ldr	r2, [r2, #4]
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	4611      	mov	r1, r2
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	4798      	blx	r3
  }

  return USBD_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}

0800552c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	460b      	mov	r3, r1
 8005536:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	78fa      	ldrb	r2, [r7, #3]
 800553c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2204      	movs	r2, #4
 8005562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr

08005572 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005580:	2b04      	cmp	r3, #4
 8005582:	d105      	bne.n	8005590 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	bc80      	pop	{r7}
 800559a:	4770      	bx	lr

0800559c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d10b      	bne.n	80055c6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d005      	beq.n	80055c6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	d005      	beq.n	80055f6 <USBD_StdDevReq+0x26>
 80055ea:	2b40      	cmp	r3, #64	; 0x40
 80055ec:	d84f      	bhi.n	800568e <USBD_StdDevReq+0xbe>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <USBD_StdDevReq+0x36>
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d14b      	bne.n	800568e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	6839      	ldr	r1, [r7, #0]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
      break;
 8005604:	e048      	b.n	8005698 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	2b09      	cmp	r3, #9
 800560c:	d839      	bhi.n	8005682 <USBD_StdDevReq+0xb2>
 800560e:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <USBD_StdDevReq+0x44>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005665 	.word	0x08005665
 8005618:	08005679 	.word	0x08005679
 800561c:	08005683 	.word	0x08005683
 8005620:	0800566f 	.word	0x0800566f
 8005624:	08005683 	.word	0x08005683
 8005628:	08005647 	.word	0x08005647
 800562c:	0800563d 	.word	0x0800563d
 8005630:	08005683 	.word	0x08005683
 8005634:	0800565b 	.word	0x0800565b
 8005638:	08005651 	.word	0x08005651
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f9dc 	bl	80059fc <USBD_GetDescriptor>
          break;
 8005644:	e022      	b.n	800568c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fb3f 	bl	8005ccc <USBD_SetAddress>
          break;
 800564e:	e01d      	b.n	800568c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fb7e 	bl	8005d54 <USBD_SetConfig>
          break;
 8005658:	e018      	b.n	800568c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fc07 	bl	8005e70 <USBD_GetConfig>
          break;
 8005662:	e013      	b.n	800568c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fc37 	bl	8005eda <USBD_GetStatus>
          break;
 800566c:	e00e      	b.n	800568c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fc65 	bl	8005f40 <USBD_SetFeature>
          break;
 8005676:	e009      	b.n	800568c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005678:	6839      	ldr	r1, [r7, #0]
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fc74 	bl	8005f68 <USBD_ClrFeature>
          break;
 8005680:	e004      	b.n	800568c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005682:	6839      	ldr	r1, [r7, #0]
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fccc 	bl	8006022 <USBD_CtlError>
          break;
 800568a:	bf00      	nop
      }
      break;
 800568c:	e004      	b.n	8005698 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fcc6 	bl	8006022 <USBD_CtlError>
      break;
 8005696:	bf00      	nop
  }

  return ret;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop

080056a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d005      	beq.n	80056ca <USBD_StdItfReq+0x26>
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	d82e      	bhi.n	8005720 <USBD_StdItfReq+0x7c>
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <USBD_StdItfReq+0x26>
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d12a      	bne.n	8005720 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056d0:	3b01      	subs	r3, #1
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d81d      	bhi.n	8005712 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	889b      	ldrh	r3, [r3, #4]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d813      	bhi.n	8005708 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	6839      	ldr	r1, [r7, #0]
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	4798      	blx	r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	88db      	ldrh	r3, [r3, #6]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d110      	bne.n	800571c <USBD_StdItfReq+0x78>
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10d      	bne.n	800571c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fd38 	bl	8006176 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005706:	e009      	b.n	800571c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fc89 	bl	8006022 <USBD_CtlError>
          break;
 8005710:	e004      	b.n	800571c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fc84 	bl	8006022 <USBD_CtlError>
          break;
 800571a:	e000      	b.n	800571e <USBD_StdItfReq+0x7a>
          break;
 800571c:	bf00      	nop
      }
      break;
 800571e:	e004      	b.n	800572a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fc7d 	bl	8006022 <USBD_CtlError>
      break;
 8005728:	bf00      	nop
  }

  return USBD_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	889b      	ldrh	r3, [r3, #4]
 8005746:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d007      	beq.n	8005764 <USBD_StdEPReq+0x30>
 8005754:	2b40      	cmp	r3, #64	; 0x40
 8005756:	f200 8146 	bhi.w	80059e6 <USBD_StdEPReq+0x2b2>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <USBD_StdEPReq+0x40>
 800575e:	2b20      	cmp	r3, #32
 8005760:	f040 8141 	bne.w	80059e6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	6839      	ldr	r1, [r7, #0]
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	4798      	blx	r3
      break;
 8005772:	e13d      	b.n	80059f0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800577c:	2b20      	cmp	r3, #32
 800577e:	d10a      	bne.n	8005796 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
 800578e:	4603      	mov	r3, r0
 8005790:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	e12d      	b.n	80059f2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	2b03      	cmp	r3, #3
 800579c:	d007      	beq.n	80057ae <USBD_StdEPReq+0x7a>
 800579e:	2b03      	cmp	r3, #3
 80057a0:	f300 811b 	bgt.w	80059da <USBD_StdEPReq+0x2a6>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d072      	beq.n	800588e <USBD_StdEPReq+0x15a>
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d03a      	beq.n	8005822 <USBD_StdEPReq+0xee>
 80057ac:	e115      	b.n	80059da <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d002      	beq.n	80057be <USBD_StdEPReq+0x8a>
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d015      	beq.n	80057e8 <USBD_StdEPReq+0xb4>
 80057bc:	e02b      	b.n	8005816 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057be:	7bbb      	ldrb	r3, [r7, #14]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00c      	beq.n	80057de <USBD_StdEPReq+0xaa>
 80057c4:	7bbb      	ldrb	r3, [r7, #14]
 80057c6:	2b80      	cmp	r3, #128	; 0x80
 80057c8:	d009      	beq.n	80057de <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80057ca:	7bbb      	ldrb	r3, [r7, #14]
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 ffa0 	bl	8006714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80057d4:	2180      	movs	r1, #128	; 0x80
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 ff9c 	bl	8006714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057dc:	e020      	b.n	8005820 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fc1e 	bl	8006022 <USBD_CtlError>
              break;
 80057e6:	e01b      	b.n	8005820 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	885b      	ldrh	r3, [r3, #2]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10e      	bne.n	800580e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80057f0:	7bbb      	ldrb	r3, [r7, #14]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <USBD_StdEPReq+0xda>
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	2b80      	cmp	r3, #128	; 0x80
 80057fa:	d008      	beq.n	800580e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	88db      	ldrh	r3, [r3, #6]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005804:	7bbb      	ldrb	r3, [r7, #14]
 8005806:	4619      	mov	r1, r3
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 ff83 	bl	8006714 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fcb1 	bl	8006176 <USBD_CtlSendStatus>

              break;
 8005814:	e004      	b.n	8005820 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fc02 	bl	8006022 <USBD_CtlError>
              break;
 800581e:	bf00      	nop
          }
          break;
 8005820:	e0e0      	b.n	80059e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005828:	2b02      	cmp	r3, #2
 800582a:	d002      	beq.n	8005832 <USBD_StdEPReq+0xfe>
 800582c:	2b03      	cmp	r3, #3
 800582e:	d015      	beq.n	800585c <USBD_StdEPReq+0x128>
 8005830:	e026      	b.n	8005880 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005832:	7bbb      	ldrb	r3, [r7, #14]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00c      	beq.n	8005852 <USBD_StdEPReq+0x11e>
 8005838:	7bbb      	ldrb	r3, [r7, #14]
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d009      	beq.n	8005852 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800583e:	7bbb      	ldrb	r3, [r7, #14]
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 ff66 	bl	8006714 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005848:	2180      	movs	r1, #128	; 0x80
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 ff62 	bl	8006714 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005850:	e01c      	b.n	800588c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fbe4 	bl	8006022 <USBD_CtlError>
              break;
 800585a:	e017      	b.n	800588c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	885b      	ldrh	r3, [r3, #2]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d112      	bne.n	800588a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800586a:	2b00      	cmp	r3, #0
 800586c:	d004      	beq.n	8005878 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800586e:	7bbb      	ldrb	r3, [r7, #14]
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 ff6d 	bl	8006752 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fc7c 	bl	8006176 <USBD_CtlSendStatus>
              }
              break;
 800587e:	e004      	b.n	800588a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8005880:	6839      	ldr	r1, [r7, #0]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fbcd 	bl	8006022 <USBD_CtlError>
              break;
 8005888:	e000      	b.n	800588c <USBD_StdEPReq+0x158>
              break;
 800588a:	bf00      	nop
          }
          break;
 800588c:	e0aa      	b.n	80059e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005894:	2b02      	cmp	r3, #2
 8005896:	d002      	beq.n	800589e <USBD_StdEPReq+0x16a>
 8005898:	2b03      	cmp	r3, #3
 800589a:	d032      	beq.n	8005902 <USBD_StdEPReq+0x1ce>
 800589c:	e097      	b.n	80059ce <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800589e:	7bbb      	ldrb	r3, [r7, #14]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <USBD_StdEPReq+0x180>
 80058a4:	7bbb      	ldrb	r3, [r7, #14]
 80058a6:	2b80      	cmp	r3, #128	; 0x80
 80058a8:	d004      	beq.n	80058b4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fbb8 	bl	8006022 <USBD_CtlError>
                break;
 80058b2:	e091      	b.n	80059d8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	da0b      	bge.n	80058d4 <USBD_StdEPReq+0x1a0>
 80058bc:	7bbb      	ldrb	r3, [r7, #14]
 80058be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	3310      	adds	r3, #16
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4413      	add	r3, r2
 80058d0:	3304      	adds	r3, #4
 80058d2:	e00b      	b.n	80058ec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4413      	add	r3, r2
 80058ea:	3304      	adds	r3, #4
 80058ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2202      	movs	r2, #2
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fbfb 	bl	80060f6 <USBD_CtlSendData>
              break;
 8005900:	e06a      	b.n	80059d8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005902:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005906:	2b00      	cmp	r3, #0
 8005908:	da11      	bge.n	800592e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800590a:	7bbb      	ldrb	r3, [r7, #14]
 800590c:	f003 020f 	and.w	r2, r3, #15
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	3318      	adds	r3, #24
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d117      	bne.n	8005954 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fb7b 	bl	8006022 <USBD_CtlError>
                  break;
 800592c:	e054      	b.n	80059d8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800592e:	7bbb      	ldrb	r3, [r7, #14]
 8005930:	f003 020f 	and.w	r2, r3, #15
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d104      	bne.n	8005954 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fb68 	bl	8006022 <USBD_CtlError>
                  break;
 8005952:	e041      	b.n	80059d8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005958:	2b00      	cmp	r3, #0
 800595a:	da0b      	bge.n	8005974 <USBD_StdEPReq+0x240>
 800595c:	7bbb      	ldrb	r3, [r7, #14]
 800595e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	3310      	adds	r3, #16
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	4413      	add	r3, r2
 8005970:	3304      	adds	r3, #4
 8005972:	e00b      	b.n	800598c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005974:	7bbb      	ldrb	r3, [r7, #14]
 8005976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4413      	add	r3, r2
 800598a:	3304      	adds	r3, #4
 800598c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800598e:	7bbb      	ldrb	r3, [r7, #14]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d002      	beq.n	800599a <USBD_StdEPReq+0x266>
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	2b80      	cmp	r3, #128	; 0x80
 8005998:	d103      	bne.n	80059a2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	e00e      	b.n	80059c0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80059a2:	7bbb      	ldrb	r3, [r7, #14]
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fef2 	bl	8006790 <USBD_LL_IsStallEP>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2201      	movs	r2, #1
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e002      	b.n	80059c0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2202      	movs	r2, #2
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fb95 	bl	80060f6 <USBD_CtlSendData>
              break;
 80059cc:	e004      	b.n	80059d8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 fb26 	bl	8006022 <USBD_CtlError>
              break;
 80059d6:	bf00      	nop
          }
          break;
 80059d8:	e004      	b.n	80059e4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fb20 	bl	8006022 <USBD_CtlError>
          break;
 80059e2:	bf00      	nop
      }
      break;
 80059e4:	e004      	b.n	80059f0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fb1a 	bl	8006022 <USBD_CtlError>
      break;
 80059ee:	bf00      	nop
  }

  return ret;
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	885b      	ldrh	r3, [r3, #2]
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	2b06      	cmp	r3, #6
 8005a1e:	f200 8128 	bhi.w	8005c72 <USBD_GetDescriptor+0x276>
 8005a22:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <USBD_GetDescriptor+0x2c>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005a45 	.word	0x08005a45
 8005a2c:	08005a5d 	.word	0x08005a5d
 8005a30:	08005a9d 	.word	0x08005a9d
 8005a34:	08005c73 	.word	0x08005c73
 8005a38:	08005c73 	.word	0x08005c73
 8005a3c:	08005c13 	.word	0x08005c13
 8005a40:	08005c3f 	.word	0x08005c3f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	7c12      	ldrb	r2, [r2, #16]
 8005a50:	f107 0108 	add.w	r1, r7, #8
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
 8005a58:	60f8      	str	r0, [r7, #12]
      break;
 8005a5a:	e112      	b.n	8005c82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	7c1b      	ldrb	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10d      	bne.n	8005a80 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	f107 0208 	add.w	r2, r7, #8
 8005a70:	4610      	mov	r0, r2
 8005a72:	4798      	blx	r3
 8005a74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a7e:	e100      	b.n	8005c82 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	f107 0208 	add.w	r2, r7, #8
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	4798      	blx	r3
 8005a90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3301      	adds	r3, #1
 8005a96:	2202      	movs	r2, #2
 8005a98:	701a      	strb	r2, [r3, #0]
      break;
 8005a9a:	e0f2      	b.n	8005c82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	885b      	ldrh	r3, [r3, #2]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	f200 80ac 	bhi.w	8005c00 <USBD_GetDescriptor+0x204>
 8005aa8:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <USBD_GetDescriptor+0xb4>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005ac9 	.word	0x08005ac9
 8005ab4:	08005afd 	.word	0x08005afd
 8005ab8:	08005b31 	.word	0x08005b31
 8005abc:	08005b65 	.word	0x08005b65
 8005ac0:	08005b99 	.word	0x08005b99
 8005ac4:	08005bcd 	.word	0x08005bcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00b      	beq.n	8005aec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	7c12      	ldrb	r2, [r2, #16]
 8005ae0:	f107 0108 	add.w	r1, r7, #8
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	4798      	blx	r3
 8005ae8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aea:	e091      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa97 	bl	8006022 <USBD_CtlError>
            err++;
 8005af4:	7afb      	ldrb	r3, [r7, #11]
 8005af6:	3301      	adds	r3, #1
 8005af8:	72fb      	strb	r3, [r7, #11]
          break;
 8005afa:	e089      	b.n	8005c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00b      	beq.n	8005b20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	7c12      	ldrb	r2, [r2, #16]
 8005b14:	f107 0108 	add.w	r1, r7, #8
 8005b18:	4610      	mov	r0, r2
 8005b1a:	4798      	blx	r3
 8005b1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b1e:	e077      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa7d 	bl	8006022 <USBD_CtlError>
            err++;
 8005b28:	7afb      	ldrb	r3, [r7, #11]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b2e:	e06f      	b.n	8005c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00b      	beq.n	8005b54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	7c12      	ldrb	r2, [r2, #16]
 8005b48:	f107 0108 	add.w	r1, r7, #8
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4798      	blx	r3
 8005b50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b52:	e05d      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa63 	bl	8006022 <USBD_CtlError>
            err++;
 8005b5c:	7afb      	ldrb	r3, [r7, #11]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	72fb      	strb	r3, [r7, #11]
          break;
 8005b62:	e055      	b.n	8005c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00b      	beq.n	8005b88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	7c12      	ldrb	r2, [r2, #16]
 8005b7c:	f107 0108 	add.w	r1, r7, #8
 8005b80:	4610      	mov	r0, r2
 8005b82:	4798      	blx	r3
 8005b84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b86:	e043      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa49 	bl	8006022 <USBD_CtlError>
            err++;
 8005b90:	7afb      	ldrb	r3, [r7, #11]
 8005b92:	3301      	adds	r3, #1
 8005b94:	72fb      	strb	r3, [r7, #11]
          break;
 8005b96:	e03b      	b.n	8005c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00b      	beq.n	8005bbc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	7c12      	ldrb	r2, [r2, #16]
 8005bb0:	f107 0108 	add.w	r1, r7, #8
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4798      	blx	r3
 8005bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bba:	e029      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bbc:	6839      	ldr	r1, [r7, #0]
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa2f 	bl	8006022 <USBD_CtlError>
            err++;
 8005bc4:	7afb      	ldrb	r3, [r7, #11]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8005bca:	e021      	b.n	8005c10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	7c12      	ldrb	r2, [r2, #16]
 8005be4:	f107 0108 	add.w	r1, r7, #8
 8005be8:	4610      	mov	r0, r2
 8005bea:	4798      	blx	r3
 8005bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bee:	e00f      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa15 	bl	8006022 <USBD_CtlError>
            err++;
 8005bf8:	7afb      	ldrb	r3, [r7, #11]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8005bfe:	e007      	b.n	8005c10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa0d 	bl	8006022 <USBD_CtlError>
          err++;
 8005c08:	7afb      	ldrb	r3, [r7, #11]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005c0e:	e038      	b.n	8005c82 <USBD_GetDescriptor+0x286>
 8005c10:	e037      	b.n	8005c82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	7c1b      	ldrb	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c22:	f107 0208 	add.w	r2, r7, #8
 8005c26:	4610      	mov	r0, r2
 8005c28:	4798      	blx	r3
 8005c2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c2c:	e029      	b.n	8005c82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f9f6 	bl	8006022 <USBD_CtlError>
        err++;
 8005c36:	7afb      	ldrb	r3, [r7, #11]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	72fb      	strb	r3, [r7, #11]
      break;
 8005c3c:	e021      	b.n	8005c82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	7c1b      	ldrb	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10d      	bne.n	8005c62 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4e:	f107 0208 	add.w	r2, r7, #8
 8005c52:	4610      	mov	r0, r2
 8005c54:	4798      	blx	r3
 8005c56:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	2207      	movs	r2, #7
 8005c5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c60:	e00f      	b.n	8005c82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f9dc 	bl	8006022 <USBD_CtlError>
        err++;
 8005c6a:	7afb      	ldrb	r3, [r7, #11]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c70:	e007      	b.n	8005c82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f9d4 	bl	8006022 <USBD_CtlError>
      err++;
 8005c7a:	7afb      	ldrb	r3, [r7, #11]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	72fb      	strb	r3, [r7, #11]
      break;
 8005c80:	bf00      	nop
  }

  if (err != 0U)
 8005c82:	7afb      	ldrb	r3, [r7, #11]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11c      	bne.n	8005cc2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005c88:	893b      	ldrh	r3, [r7, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d011      	beq.n	8005cb2 <USBD_GetDescriptor+0x2b6>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	88db      	ldrh	r3, [r3, #6]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	88da      	ldrh	r2, [r3, #6]
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	bf28      	it	cs
 8005ca0:	4613      	movcs	r3, r2
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ca6:	893b      	ldrh	r3, [r7, #8]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 fa22 	bl	80060f6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	88db      	ldrh	r3, [r3, #6]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d104      	bne.n	8005cc4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fa5b 	bl	8006176 <USBD_CtlSendStatus>
 8005cc0:	e000      	b.n	8005cc4 <USBD_GetDescriptor+0x2c8>
    return;
 8005cc2:	bf00      	nop
    }
  }
}
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop

08005ccc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	889b      	ldrh	r3, [r3, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d130      	bne.n	8005d40 <USBD_SetAddress+0x74>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	88db      	ldrh	r3, [r3, #6]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d12c      	bne.n	8005d40 <USBD_SetAddress+0x74>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	885b      	ldrh	r3, [r3, #2]
 8005cea:	2b7f      	cmp	r3, #127	; 0x7f
 8005cec:	d828      	bhi.n	8005d40 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	885b      	ldrh	r3, [r3, #2]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d104      	bne.n	8005d0e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005d04:	6839      	ldr	r1, [r7, #0]
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f98b 	bl	8006022 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d0c:	e01d      	b.n	8005d4a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	7bfa      	ldrb	r2, [r7, #15]
 8005d12:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fd64 	bl	80067e8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fa28 	bl	8006176 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d004      	beq.n	8005d36 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d34:	e009      	b.n	8005d4a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3e:	e004      	b.n	8005d4a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d40:	6839      	ldr	r1, [r7, #0]
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f96d 	bl	8006022 <USBD_CtlError>
  }
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	885b      	ldrh	r3, [r3, #2]
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	4b41      	ldr	r3, [pc, #260]	; (8005e6c <USBD_SetConfig+0x118>)
 8005d66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d68:	4b40      	ldr	r3, [pc, #256]	; (8005e6c <USBD_SetConfig+0x118>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d904      	bls.n	8005d7a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f955 	bl	8006022 <USBD_CtlError>
 8005d78:	e075      	b.n	8005e66 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d002      	beq.n	8005d8a <USBD_SetConfig+0x36>
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d023      	beq.n	8005dd0 <USBD_SetConfig+0x7c>
 8005d88:	e062      	b.n	8005e50 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005d8a:	4b38      	ldr	r3, [pc, #224]	; (8005e6c <USBD_SetConfig+0x118>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d01a      	beq.n	8005dc8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005d92:	4b36      	ldr	r3, [pc, #216]	; (8005e6c <USBD_SetConfig+0x118>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2203      	movs	r2, #3
 8005da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005da4:	4b31      	ldr	r3, [pc, #196]	; (8005e6c <USBD_SetConfig+0x118>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff f9e8 	bl	8005180 <USBD_SetClassConfig>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d104      	bne.n	8005dc0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f932 	bl	8006022 <USBD_CtlError>
            return;
 8005dbe:	e052      	b.n	8005e66 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f9d8 	bl	8006176 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005dc6:	e04e      	b.n	8005e66 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f9d4 	bl	8006176 <USBD_CtlSendStatus>
        break;
 8005dce:	e04a      	b.n	8005e66 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005dd0:	4b26      	ldr	r3, [pc, #152]	; (8005e6c <USBD_SetConfig+0x118>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d112      	bne.n	8005dfe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005de0:	4b22      	ldr	r3, [pc, #136]	; (8005e6c <USBD_SetConfig+0x118>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005dea:	4b20      	ldr	r3, [pc, #128]	; (8005e6c <USBD_SetConfig+0x118>)
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff f9e4 	bl	80051be <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f9bd 	bl	8006176 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005dfc:	e033      	b.n	8005e66 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005dfe:	4b1b      	ldr	r3, [pc, #108]	; (8005e6c <USBD_SetConfig+0x118>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d01d      	beq.n	8005e48 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff f9d2 	bl	80051be <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005e1a:	4b14      	ldr	r3, [pc, #80]	; (8005e6c <USBD_SetConfig+0x118>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	461a      	mov	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005e24:	4b11      	ldr	r3, [pc, #68]	; (8005e6c <USBD_SetConfig+0x118>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	4619      	mov	r1, r3
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f7ff f9a8 	bl	8005180 <USBD_SetClassConfig>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d104      	bne.n	8005e40 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005e36:	6839      	ldr	r1, [r7, #0]
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8f2 	bl	8006022 <USBD_CtlError>
            return;
 8005e3e:	e012      	b.n	8005e66 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f998 	bl	8006176 <USBD_CtlSendStatus>
        break;
 8005e46:	e00e      	b.n	8005e66 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f994 	bl	8006176 <USBD_CtlSendStatus>
        break;
 8005e4e:	e00a      	b.n	8005e66 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005e50:	6839      	ldr	r1, [r7, #0]
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f8e5 	bl	8006022 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005e58:	4b04      	ldr	r3, [pc, #16]	; (8005e6c <USBD_SetConfig+0x118>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff f9ad 	bl	80051be <USBD_ClrClassConfig>
        break;
 8005e64:	bf00      	nop
    }
  }
}
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	200001ec 	.word	0x200001ec

08005e70 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	88db      	ldrh	r3, [r3, #6]
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d004      	beq.n	8005e8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 f8cc 	bl	8006022 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e8a:	e022      	b.n	8005ed2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	dc02      	bgt.n	8005e9c <USBD_GetConfig+0x2c>
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	dc03      	bgt.n	8005ea2 <USBD_GetConfig+0x32>
 8005e9a:	e015      	b.n	8005ec8 <USBD_GetConfig+0x58>
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d00b      	beq.n	8005eb8 <USBD_GetConfig+0x48>
 8005ea0:	e012      	b.n	8005ec8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3308      	adds	r3, #8
 8005eac:	2201      	movs	r2, #1
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f920 	bl	80060f6 <USBD_CtlSendData>
        break;
 8005eb6:	e00c      	b.n	8005ed2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f918 	bl	80060f6 <USBD_CtlSendData>
        break;
 8005ec6:	e004      	b.n	8005ed2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f8a9 	bl	8006022 <USBD_CtlError>
        break;
 8005ed0:	bf00      	nop
}
 8005ed2:	bf00      	nop
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b082      	sub	sp, #8
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eea:	3b01      	subs	r3, #1
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d81e      	bhi.n	8005f2e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	88db      	ldrh	r3, [r3, #6]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d004      	beq.n	8005f02 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f891 	bl	8006022 <USBD_CtlError>
        break;
 8005f00:	e01a      	b.n	8005f38 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f043 0202 	orr.w	r2, r3, #2
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	330c      	adds	r3, #12
 8005f22:	2202      	movs	r2, #2
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f8e5 	bl	80060f6 <USBD_CtlSendData>
      break;
 8005f2c:	e004      	b.n	8005f38 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f876 	bl	8006022 <USBD_CtlError>
      break;
 8005f36:	bf00      	nop
  }
}
 8005f38:	bf00      	nop
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	885b      	ldrh	r3, [r3, #2]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d106      	bne.n	8005f60 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f90b 	bl	8006176 <USBD_CtlSendStatus>
  }
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d80b      	bhi.n	8005f96 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	885b      	ldrh	r3, [r3, #2]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d10c      	bne.n	8005fa0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f8f1 	bl	8006176 <USBD_CtlSendStatus>
      }
      break;
 8005f94:	e004      	b.n	8005fa0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 f842 	bl	8006022 <USBD_CtlError>
      break;
 8005f9e:	e000      	b.n	8005fa2 <USBD_ClrFeature+0x3a>
      break;
 8005fa0:	bf00      	nop
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781a      	ldrb	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	785a      	ldrb	r2, [r3, #1]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	3302      	adds	r3, #2
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	3303      	adds	r3, #3
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	4413      	add	r3, r2
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	3305      	adds	r3, #5
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	021b      	lsls	r3, r3, #8
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	4413      	add	r3, r2
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	3306      	adds	r3, #6
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	b29a      	uxth	r2, r3
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	3307      	adds	r3, #7
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b29b      	uxth	r3, r3
 800600c:	021b      	lsls	r3, r3, #8
 800600e:	b29b      	uxth	r3, r3
 8006010:	4413      	add	r3, r2
 8006012:	b29a      	uxth	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	80da      	strh	r2, [r3, #6]

}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr

08006022 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800602c:	2180      	movs	r1, #128	; 0x80
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 fb70 	bl	8006714 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006034:	2100      	movs	r1, #0
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fb6c 	bl	8006714 <USBD_LL_StallEP>
}
 800603c:	bf00      	nop
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d032      	beq.n	80060c0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 f834 	bl	80060c8 <USBD_GetLen>
 8006060:	4603      	mov	r3, r0
 8006062:	3301      	adds	r3, #1
 8006064:	b29b      	uxth	r3, r3
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800606e:	7dfb      	ldrb	r3, [r7, #23]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	75fa      	strb	r2, [r7, #23]
 8006074:	461a      	mov	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4413      	add	r3, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	7812      	ldrb	r2, [r2, #0]
 800607e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006080:	7dfb      	ldrb	r3, [r7, #23]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	75fa      	strb	r2, [r7, #23]
 8006086:	461a      	mov	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4413      	add	r3, r2
 800608c:	2203      	movs	r2, #3
 800608e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006090:	e012      	b.n	80060b8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	60fa      	str	r2, [r7, #12]
 8006098:	7dfa      	ldrb	r2, [r7, #23]
 800609a:	1c51      	adds	r1, r2, #1
 800609c:	75f9      	strb	r1, [r7, #23]
 800609e:	4611      	mov	r1, r2
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	440a      	add	r2, r1
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	75fa      	strb	r2, [r7, #23]
 80060ae:	461a      	mov	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4413      	add	r3, r2
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e8      	bne.n	8006092 <USBD_GetString+0x4e>
    }
  }
}
 80060c0:	bf00      	nop
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80060d4:	e005      	b.n	80060e2 <USBD_GetLen+0x1a>
  {
    len++;
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	3301      	adds	r3, #1
 80060da:	73fb      	strb	r3, [r7, #15]
    buf++;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3301      	adds	r3, #1
 80060e0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f5      	bne.n	80060d6 <USBD_GetLen+0xe>
  }

  return len;
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr

080060f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	4613      	mov	r3, r2
 8006102:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2202      	movs	r2, #2
 8006108:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800610c:	88fa      	ldrh	r2, [r7, #6]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006118:	88fb      	ldrh	r3, [r7, #6]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	2100      	movs	r1, #0
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 fb81 	bl	8006826 <USBD_LL_Transmit>

  return USBD_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	4613      	mov	r3, r2
 800613a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	2100      	movs	r1, #0
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fb6f 	bl	8006826 <USBD_LL_Transmit>

  return USBD_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	60f8      	str	r0, [r7, #12]
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	4613      	mov	r3, r2
 800615e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	2100      	movs	r1, #0
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fb80 	bl	800686c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2204      	movs	r2, #4
 8006182:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006186:	2300      	movs	r3, #0
 8006188:	2200      	movs	r2, #0
 800618a:	2100      	movs	r1, #0
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fb4a 	bl	8006826 <USBD_LL_Transmit>

  return USBD_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2205      	movs	r2, #5
 80061a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061ac:	2300      	movs	r3, #0
 80061ae:	2200      	movs	r2, #0
 80061b0:	2100      	movs	r1, #0
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fb5a 	bl	800686c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <MX_USB_DEVICE_GetHandlePtr>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
USBD_HandleTypeDef *MX_USB_DEVICE_GetHandlePtr(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
	return &hUsbDeviceFS;
 80061c8:	4b02      	ldr	r3, [pc, #8]	; (80061d4 <MX_USB_DEVICE_GetHandlePtr+0x10>)
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20000210 	.word	0x20000210

080061d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80061dc:	2200      	movs	r2, #0
 80061de:	490e      	ldr	r1, [pc, #56]	; (8006218 <MX_USB_DEVICE_Init+0x40>)
 80061e0:	480e      	ldr	r0, [pc, #56]	; (800621c <MX_USB_DEVICE_Init+0x44>)
 80061e2:	f7fe ff73 	bl	80050cc <USBD_Init>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061ec:	f7fa faaa 	bl	8000744 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80061f0:	490b      	ldr	r1, [pc, #44]	; (8006220 <MX_USB_DEVICE_Init+0x48>)
 80061f2:	480a      	ldr	r0, [pc, #40]	; (800621c <MX_USB_DEVICE_Init+0x44>)
 80061f4:	f7fe ff95 	bl	8005122 <USBD_RegisterClass>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d001      	beq.n	8006202 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061fe:	f7fa faa1 	bl	8000744 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006202:	4806      	ldr	r0, [pc, #24]	; (800621c <MX_USB_DEVICE_Init+0x44>)
 8006204:	f7fe ffa6 	bl	8005154 <USBD_Start>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800620e:	f7fa fa99 	bl	8000744 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006212:	bf00      	nop
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000118 	.word	0x20000118
 800621c:	20000210 	.word	0x20000210
 8006220:	2000000c 	.word	0x2000000c

08006224 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	4603      	mov	r3, r0
 800622c:	6039      	str	r1, [r7, #0]
 800622e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2212      	movs	r2, #18
 8006234:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006236:	4b03      	ldr	r3, [pc, #12]	; (8006244 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	20000134 	.word	0x20000134

08006248 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	6039      	str	r1, [r7, #0]
 8006252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	2204      	movs	r2, #4
 8006258:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800625a:	4b03      	ldr	r3, [pc, #12]	; (8006268 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000148 	.word	0x20000148

0800626c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	6039      	str	r1, [r7, #0]
 8006276:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d105      	bne.n	800628a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	4907      	ldr	r1, [pc, #28]	; (80062a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006282:	4808      	ldr	r0, [pc, #32]	; (80062a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006284:	f7ff fede 	bl	8006044 <USBD_GetString>
 8006288:	e004      	b.n	8006294 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	4904      	ldr	r1, [pc, #16]	; (80062a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800628e:	4805      	ldr	r0, [pc, #20]	; (80062a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006290:	f7ff fed8 	bl	8006044 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006294:	4b02      	ldr	r3, [pc, #8]	; (80062a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	200004d4 	.word	0x200004d4
 80062a4:	080078a0 	.word	0x080078a0

080062a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	6039      	str	r1, [r7, #0]
 80062b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	4904      	ldr	r1, [pc, #16]	; (80062c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80062b8:	4804      	ldr	r0, [pc, #16]	; (80062cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80062ba:	f7ff fec3 	bl	8006044 <USBD_GetString>
  return USBD_StrDesc;
 80062be:	4b02      	ldr	r3, [pc, #8]	; (80062c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	200004d4 	.word	0x200004d4
 80062cc:	080078b8 	.word	0x080078b8

080062d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	4603      	mov	r3, r0
 80062d8:	6039      	str	r1, [r7, #0]
 80062da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	221a      	movs	r2, #26
 80062e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80062e2:	f000 f843 	bl	800636c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80062e6:	4b02      	ldr	r3, [pc, #8]	; (80062f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	2000014c 	.word	0x2000014c

080062f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	4603      	mov	r3, r0
 80062fc:	6039      	str	r1, [r7, #0]
 80062fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d105      	bne.n	8006312 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	4907      	ldr	r1, [pc, #28]	; (8006328 <USBD_FS_ConfigStrDescriptor+0x34>)
 800630a:	4808      	ldr	r0, [pc, #32]	; (800632c <USBD_FS_ConfigStrDescriptor+0x38>)
 800630c:	f7ff fe9a 	bl	8006044 <USBD_GetString>
 8006310:	e004      	b.n	800631c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	4904      	ldr	r1, [pc, #16]	; (8006328 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006316:	4805      	ldr	r0, [pc, #20]	; (800632c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006318:	f7ff fe94 	bl	8006044 <USBD_GetString>
  }
  return USBD_StrDesc;
 800631c:	4b02      	ldr	r3, [pc, #8]	; (8006328 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	200004d4 	.word	0x200004d4
 800632c:	080078cc 	.word	0x080078cc

08006330 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	4603      	mov	r3, r0
 8006338:	6039      	str	r1, [r7, #0]
 800633a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800633c:	79fb      	ldrb	r3, [r7, #7]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d105      	bne.n	800634e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	4907      	ldr	r1, [pc, #28]	; (8006364 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006346:	4808      	ldr	r0, [pc, #32]	; (8006368 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006348:	f7ff fe7c 	bl	8006044 <USBD_GetString>
 800634c:	e004      	b.n	8006358 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	4904      	ldr	r1, [pc, #16]	; (8006364 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006352:	4805      	ldr	r0, [pc, #20]	; (8006368 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006354:	f7ff fe76 	bl	8006044 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006358:	4b02      	ldr	r3, [pc, #8]	; (8006364 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	200004d4 	.word	0x200004d4
 8006368:	080078d8 	.word	0x080078d8

0800636c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006372:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <Get_SerialNum+0x44>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006378:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <Get_SerialNum+0x48>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800637e:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <Get_SerialNum+0x4c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4413      	add	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006392:	2208      	movs	r2, #8
 8006394:	4909      	ldr	r1, [pc, #36]	; (80063bc <Get_SerialNum+0x50>)
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 f814 	bl	80063c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800639c:	2204      	movs	r2, #4
 800639e:	4908      	ldr	r1, [pc, #32]	; (80063c0 <Get_SerialNum+0x54>)
 80063a0:	68b8      	ldr	r0, [r7, #8]
 80063a2:	f000 f80f 	bl	80063c4 <IntToUnicode>
  }
}
 80063a6:	bf00      	nop
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	1ffff7e8 	.word	0x1ffff7e8
 80063b4:	1ffff7ec 	.word	0x1ffff7ec
 80063b8:	1ffff7f0 	.word	0x1ffff7f0
 80063bc:	2000014e 	.word	0x2000014e
 80063c0:	2000015e 	.word	0x2000015e

080063c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	4613      	mov	r3, r2
 80063d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80063d6:	2300      	movs	r3, #0
 80063d8:	75fb      	strb	r3, [r7, #23]
 80063da:	e027      	b.n	800642c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	0f1b      	lsrs	r3, r3, #28
 80063e0:	2b09      	cmp	r3, #9
 80063e2:	d80b      	bhi.n	80063fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	0f1b      	lsrs	r3, r3, #28
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	4619      	mov	r1, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	440b      	add	r3, r1
 80063f4:	3230      	adds	r2, #48	; 0x30
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]
 80063fa:	e00a      	b.n	8006412 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	0f1b      	lsrs	r3, r3, #28
 8006400:	b2da      	uxtb	r2, r3
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	4619      	mov	r1, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	440b      	add	r3, r1
 800640c:	3237      	adds	r2, #55	; 0x37
 800640e:	b2d2      	uxtb	r2, r2
 8006410:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006418:	7dfb      	ldrb	r3, [r7, #23]
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	3301      	adds	r3, #1
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	4413      	add	r3, r2
 8006422:	2200      	movs	r2, #0
 8006424:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006426:	7dfb      	ldrb	r3, [r7, #23]
 8006428:	3301      	adds	r3, #1
 800642a:	75fb      	strb	r3, [r7, #23]
 800642c:	7dfa      	ldrb	r2, [r7, #23]
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	429a      	cmp	r2, r3
 8006432:	d3d3      	bcc.n	80063dc <IntToUnicode+0x18>
  }
}
 8006434:	bf00      	nop
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a0d      	ldr	r2, [pc, #52]	; (8006484 <HAL_PCD_MspInit+0x44>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d113      	bne.n	800647a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006452:	4b0d      	ldr	r3, [pc, #52]	; (8006488 <HAL_PCD_MspInit+0x48>)
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	4a0c      	ldr	r2, [pc, #48]	; (8006488 <HAL_PCD_MspInit+0x48>)
 8006458:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800645c:	61d3      	str	r3, [r2, #28]
 800645e:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <HAL_PCD_MspInit+0x48>)
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800646a:	2200      	movs	r2, #0
 800646c:	2100      	movs	r1, #0
 800646e:	2014      	movs	r0, #20
 8006470:	f7fa fbb1 	bl	8000bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006474:	2014      	movs	r0, #20
 8006476:	f7fa fbca 	bl	8000c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40005c00 	.word	0x40005c00
 8006488:	40021000 	.word	0x40021000

0800648c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80064a0:	4619      	mov	r1, r3
 80064a2:	4610      	mov	r0, r2
 80064a4:	f7fe fe9e 	bl	80051e4 <USBD_LL_SetupStage>
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80064c2:	78fa      	ldrb	r2, [r7, #3]
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	440b      	add	r3, r1
 80064d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	78fb      	ldrb	r3, [r7, #3]
 80064d8:	4619      	mov	r1, r3
 80064da:	f7fe fed0 	bl	800527e <USBD_LL_DataOutStage>
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b082      	sub	sp, #8
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	460b      	mov	r3, r1
 80064f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80064f8:	78fa      	ldrb	r2, [r7, #3]
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	440b      	add	r3, r1
 8006506:	333c      	adds	r3, #60	; 0x3c
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	4619      	mov	r1, r3
 800650e:	f7fe ff27 	bl	8005360 <USBD_LL_DataInStage>
}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b082      	sub	sp, #8
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006528:	4618      	mov	r0, r3
 800652a:	f7ff f837 	bl	800559c <USBD_LL_SOF>
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800653e:	2301      	movs	r3, #1
 8006540:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d001      	beq.n	800654e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800654a:	f7fa f8fb 	bl	8000744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006554:	7bfa      	ldrb	r2, [r7, #15]
 8006556:	4611      	mov	r1, r2
 8006558:	4618      	mov	r0, r3
 800655a:	f7fe ffe7 	bl	800552c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe ffa0 	bl	80054aa <USBD_LL_Reset>
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006582:	4618      	mov	r0, r3
 8006584:	f7fe ffe1 	bl	800554a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d005      	beq.n	800659c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006590:	4b04      	ldr	r3, [pc, #16]	; (80065a4 <HAL_PCD_SuspendCallback+0x30>)
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	4a03      	ldr	r2, [pc, #12]	; (80065a4 <HAL_PCD_SuspendCallback+0x30>)
 8006596:	f043 0306 	orr.w	r3, r3, #6
 800659a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800659c:	bf00      	nop
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	e000ed00 	.word	0xe000ed00

080065a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe ffdb 	bl	8005572 <USBD_LL_Resume>
}
 80065bc:	bf00      	nop
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80065cc:	4a1f      	ldr	r2, [pc, #124]	; (800664c <USBD_LL_Init+0x88>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a1d      	ldr	r2, [pc, #116]	; (800664c <USBD_LL_Init+0x88>)
 80065d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <USBD_LL_Init+0x88>)
 80065de:	4a1c      	ldr	r2, [pc, #112]	; (8006650 <USBD_LL_Init+0x8c>)
 80065e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80065e2:	4b1a      	ldr	r3, [pc, #104]	; (800664c <USBD_LL_Init+0x88>)
 80065e4:	2208      	movs	r2, #8
 80065e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80065e8:	4b18      	ldr	r3, [pc, #96]	; (800664c <USBD_LL_Init+0x88>)
 80065ea:	2202      	movs	r2, #2
 80065ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80065ee:	4b17      	ldr	r3, [pc, #92]	; (800664c <USBD_LL_Init+0x88>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80065f4:	4b15      	ldr	r3, [pc, #84]	; (800664c <USBD_LL_Init+0x88>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <USBD_LL_Init+0x88>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006600:	4812      	ldr	r0, [pc, #72]	; (800664c <USBD_LL_Init+0x88>)
 8006602:	f7fa fb1e 	bl	8000c42 <HAL_PCD_Init>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800660c:	f7fa f89a 	bl	8000744 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006616:	2318      	movs	r3, #24
 8006618:	2200      	movs	r2, #0
 800661a:	2100      	movs	r1, #0
 800661c:	f7fb ff7d 	bl	800251a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006626:	2358      	movs	r3, #88	; 0x58
 8006628:	2200      	movs	r2, #0
 800662a:	2180      	movs	r1, #128	; 0x80
 800662c:	f7fb ff75 	bl	800251a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800663a:	2200      	movs	r2, #0
 800663c:	2181      	movs	r1, #129	; 0x81
 800663e:	f7fb ff6c 	bl	800251a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	200006d4 	.word	0x200006d4
 8006650:	40005c00 	.word	0x40005c00

08006654 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800666a:	4618      	mov	r0, r3
 800666c:	f7fa fbf4 	bl	8000e58 <HAL_PCD_Start>
 8006670:	4603      	mov	r3, r0
 8006672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 f93c 	bl	80068f4 <USBD_Get_USB_Status>
 800667c:	4603      	mov	r3, r0
 800667e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006680:	7bbb      	ldrb	r3, [r7, #14]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	4608      	mov	r0, r1
 8006694:	4611      	mov	r1, r2
 8006696:	461a      	mov	r2, r3
 8006698:	4603      	mov	r3, r0
 800669a:	70fb      	strb	r3, [r7, #3]
 800669c:	460b      	mov	r3, r1
 800669e:	70bb      	strb	r3, [r7, #2]
 80066a0:	4613      	mov	r3, r2
 80066a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066a4:	2300      	movs	r3, #0
 80066a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80066b2:	78bb      	ldrb	r3, [r7, #2]
 80066b4:	883a      	ldrh	r2, [r7, #0]
 80066b6:	78f9      	ldrb	r1, [r7, #3]
 80066b8:	f7fa fd6e 	bl	8001198 <HAL_PCD_EP_Open>
 80066bc:	4603      	mov	r3, r0
 80066be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 f916 	bl	80068f4 <USBD_Get_USB_Status>
 80066c8:	4603      	mov	r3, r0
 80066ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	460b      	mov	r3, r1
 80066e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066f0:	78fa      	ldrb	r2, [r7, #3]
 80066f2:	4611      	mov	r1, r2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fa fdb5 	bl	8001264 <HAL_PCD_EP_Close>
 80066fa:	4603      	mov	r3, r0
 80066fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	4618      	mov	r0, r3
 8006702:	f000 f8f7 	bl	80068f4 <USBD_Get_USB_Status>
 8006706:	4603      	mov	r3, r0
 8006708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800670a:	7bbb      	ldrb	r3, [r7, #14]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800672e:	78fa      	ldrb	r2, [r7, #3]
 8006730:	4611      	mov	r1, r2
 8006732:	4618      	mov	r0, r3
 8006734:	f7fa fe5e 	bl	80013f4 <HAL_PCD_EP_SetStall>
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800673c:	7bfb      	ldrb	r3, [r7, #15]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 f8d8 	bl	80068f4 <USBD_Get_USB_Status>
 8006744:	4603      	mov	r3, r0
 8006746:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006748:	7bbb      	ldrb	r3, [r7, #14]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	460b      	mov	r3, r1
 800675c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800676c:	78fa      	ldrb	r2, [r7, #3]
 800676e:	4611      	mov	r1, r2
 8006770:	4618      	mov	r0, r3
 8006772:	f7fa fe9f 	bl	80014b4 <HAL_PCD_EP_ClrStall>
 8006776:	4603      	mov	r3, r0
 8006778:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	4618      	mov	r0, r3
 800677e:	f000 f8b9 	bl	80068f4 <USBD_Get_USB_Status>
 8006782:	4603      	mov	r3, r0
 8006784:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006786:	7bbb      	ldrb	r3, [r7, #14]
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80067a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	da0c      	bge.n	80067c6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067b2:	68f9      	ldr	r1, [r7, #12]
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	00db      	lsls	r3, r3, #3
 80067be:	440b      	add	r3, r1
 80067c0:	3302      	adds	r3, #2
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	e00b      	b.n	80067de <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067cc:	68f9      	ldr	r1, [r7, #12]
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	440b      	add	r3, r1
 80067d8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80067dc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006802:	78fa      	ldrb	r2, [r7, #3]
 8006804:	4611      	mov	r1, r2
 8006806:	4618      	mov	r0, r3
 8006808:	f7fa fca1 	bl	800114e <HAL_PCD_SetAddress>
 800680c:	4603      	mov	r3, r0
 800680e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006810:	7bfb      	ldrb	r3, [r7, #15]
 8006812:	4618      	mov	r0, r3
 8006814:	f000 f86e 	bl	80068f4 <USBD_Get_USB_Status>
 8006818:	4603      	mov	r3, r0
 800681a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800681c:	7bbb      	ldrb	r3, [r7, #14]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b086      	sub	sp, #24
 800682a:	af00      	add	r7, sp, #0
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	461a      	mov	r2, r3
 8006832:	460b      	mov	r3, r1
 8006834:	72fb      	strb	r3, [r7, #11]
 8006836:	4613      	mov	r3, r2
 8006838:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006848:	893b      	ldrh	r3, [r7, #8]
 800684a:	7af9      	ldrb	r1, [r7, #11]
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	f7fa fd8e 	bl	800136e <HAL_PCD_EP_Transmit>
 8006852:	4603      	mov	r3, r0
 8006854:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006856:	7dfb      	ldrb	r3, [r7, #23]
 8006858:	4618      	mov	r0, r3
 800685a:	f000 f84b 	bl	80068f4 <USBD_Get_USB_Status>
 800685e:	4603      	mov	r3, r0
 8006860:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006862:	7dbb      	ldrb	r3, [r7, #22]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	607a      	str	r2, [r7, #4]
 8006876:	461a      	mov	r2, r3
 8006878:	460b      	mov	r3, r1
 800687a:	72fb      	strb	r3, [r7, #11]
 800687c:	4613      	mov	r3, r2
 800687e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006880:	2300      	movs	r3, #0
 8006882:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800688e:	893b      	ldrh	r3, [r7, #8]
 8006890:	7af9      	ldrb	r1, [r7, #11]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	f7fa fd2e 	bl	80012f4 <HAL_PCD_EP_Receive>
 8006898:	4603      	mov	r3, r0
 800689a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800689c:	7dfb      	ldrb	r3, [r7, #23]
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 f828 	bl	80068f4 <USBD_Get_USB_Status>
 80068a4:	4603      	mov	r3, r0
 80068a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80068a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80068bc:	4b02      	ldr	r3, [pc, #8]	; (80068c8 <USBD_static_malloc+0x14>)
}
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr
 80068c8:	200001f0 	.word	0x200001f0

080068cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]

}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	bc80      	pop	{r7}
 80068dc:	4770      	bx	lr

080068de <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068de:	b480      	push	{r7}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr

080068f4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	2b03      	cmp	r3, #3
 8006906:	d817      	bhi.n	8006938 <USBD_Get_USB_Status+0x44>
 8006908:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <USBD_Get_USB_Status+0x1c>)
 800690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690e:	bf00      	nop
 8006910:	08006921 	.word	0x08006921
 8006914:	08006927 	.word	0x08006927
 8006918:	0800692d 	.word	0x0800692d
 800691c:	08006933 	.word	0x08006933
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	73fb      	strb	r3, [r7, #15]
    break;
 8006924:	e00b      	b.n	800693e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006926:	2302      	movs	r3, #2
 8006928:	73fb      	strb	r3, [r7, #15]
    break;
 800692a:	e008      	b.n	800693e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
    break;
 8006930:	e005      	b.n	800693e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006932:	2302      	movs	r3, #2
 8006934:	73fb      	strb	r3, [r7, #15]
    break;
 8006936:	e002      	b.n	800693e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006938:	2302      	movs	r3, #2
 800693a:	73fb      	strb	r3, [r7, #15]
    break;
 800693c:	bf00      	nop
  }
  return usb_status;
 800693e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	bc80      	pop	{r7}
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop

0800694c <__errno>:
 800694c:	4b01      	ldr	r3, [pc, #4]	; (8006954 <__errno+0x8>)
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	20000168 	.word	0x20000168

08006958 <__libc_init_array>:
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	2600      	movs	r6, #0
 800695c:	4d0c      	ldr	r5, [pc, #48]	; (8006990 <__libc_init_array+0x38>)
 800695e:	4c0d      	ldr	r4, [pc, #52]	; (8006994 <__libc_init_array+0x3c>)
 8006960:	1b64      	subs	r4, r4, r5
 8006962:	10a4      	asrs	r4, r4, #2
 8006964:	42a6      	cmp	r6, r4
 8006966:	d109      	bne.n	800697c <__libc_init_array+0x24>
 8006968:	f000 ff82 	bl	8007870 <_init>
 800696c:	2600      	movs	r6, #0
 800696e:	4d0a      	ldr	r5, [pc, #40]	; (8006998 <__libc_init_array+0x40>)
 8006970:	4c0a      	ldr	r4, [pc, #40]	; (800699c <__libc_init_array+0x44>)
 8006972:	1b64      	subs	r4, r4, r5
 8006974:	10a4      	asrs	r4, r4, #2
 8006976:	42a6      	cmp	r6, r4
 8006978:	d105      	bne.n	8006986 <__libc_init_array+0x2e>
 800697a:	bd70      	pop	{r4, r5, r6, pc}
 800697c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006980:	4798      	blx	r3
 8006982:	3601      	adds	r6, #1
 8006984:	e7ee      	b.n	8006964 <__libc_init_array+0xc>
 8006986:	f855 3b04 	ldr.w	r3, [r5], #4
 800698a:	4798      	blx	r3
 800698c:	3601      	adds	r6, #1
 800698e:	e7f2      	b.n	8006976 <__libc_init_array+0x1e>
 8006990:	08007980 	.word	0x08007980
 8006994:	08007980 	.word	0x08007980
 8006998:	08007980 	.word	0x08007980
 800699c:	08007984 	.word	0x08007984

080069a0 <memset>:
 80069a0:	4603      	mov	r3, r0
 80069a2:	4402      	add	r2, r0
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d100      	bne.n	80069aa <memset+0xa>
 80069a8:	4770      	bx	lr
 80069aa:	f803 1b01 	strb.w	r1, [r3], #1
 80069ae:	e7f9      	b.n	80069a4 <memset+0x4>

080069b0 <iprintf>:
 80069b0:	b40f      	push	{r0, r1, r2, r3}
 80069b2:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <iprintf+0x2c>)
 80069b4:	b513      	push	{r0, r1, r4, lr}
 80069b6:	681c      	ldr	r4, [r3, #0]
 80069b8:	b124      	cbz	r4, 80069c4 <iprintf+0x14>
 80069ba:	69a3      	ldr	r3, [r4, #24]
 80069bc:	b913      	cbnz	r3, 80069c4 <iprintf+0x14>
 80069be:	4620      	mov	r0, r4
 80069c0:	f000 f866 	bl	8006a90 <__sinit>
 80069c4:	ab05      	add	r3, sp, #20
 80069c6:	4620      	mov	r0, r4
 80069c8:	9a04      	ldr	r2, [sp, #16]
 80069ca:	68a1      	ldr	r1, [r4, #8]
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	f000 f981 	bl	8006cd4 <_vfiprintf_r>
 80069d2:	b002      	add	sp, #8
 80069d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d8:	b004      	add	sp, #16
 80069da:	4770      	bx	lr
 80069dc:	20000168 	.word	0x20000168

080069e0 <std>:
 80069e0:	2300      	movs	r3, #0
 80069e2:	b510      	push	{r4, lr}
 80069e4:	4604      	mov	r4, r0
 80069e6:	e9c0 3300 	strd	r3, r3, [r0]
 80069ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ee:	6083      	str	r3, [r0, #8]
 80069f0:	8181      	strh	r1, [r0, #12]
 80069f2:	6643      	str	r3, [r0, #100]	; 0x64
 80069f4:	81c2      	strh	r2, [r0, #14]
 80069f6:	6183      	str	r3, [r0, #24]
 80069f8:	4619      	mov	r1, r3
 80069fa:	2208      	movs	r2, #8
 80069fc:	305c      	adds	r0, #92	; 0x5c
 80069fe:	f7ff ffcf 	bl	80069a0 <memset>
 8006a02:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <std+0x38>)
 8006a04:	6224      	str	r4, [r4, #32]
 8006a06:	6263      	str	r3, [r4, #36]	; 0x24
 8006a08:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <std+0x3c>)
 8006a0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <std+0x40>)
 8006a0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a10:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <std+0x44>)
 8006a12:	6323      	str	r3, [r4, #48]	; 0x30
 8006a14:	bd10      	pop	{r4, pc}
 8006a16:	bf00      	nop
 8006a18:	08007281 	.word	0x08007281
 8006a1c:	080072a3 	.word	0x080072a3
 8006a20:	080072db 	.word	0x080072db
 8006a24:	080072ff 	.word	0x080072ff

08006a28 <_cleanup_r>:
 8006a28:	4901      	ldr	r1, [pc, #4]	; (8006a30 <_cleanup_r+0x8>)
 8006a2a:	f000 b8af 	b.w	8006b8c <_fwalk_reent>
 8006a2e:	bf00      	nop
 8006a30:	080075d9 	.word	0x080075d9

08006a34 <__sfmoreglue>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	2568      	movs	r5, #104	; 0x68
 8006a38:	1e4a      	subs	r2, r1, #1
 8006a3a:	4355      	muls	r5, r2
 8006a3c:	460e      	mov	r6, r1
 8006a3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a42:	f000 f8c5 	bl	8006bd0 <_malloc_r>
 8006a46:	4604      	mov	r4, r0
 8006a48:	b140      	cbz	r0, 8006a5c <__sfmoreglue+0x28>
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	e9c0 1600 	strd	r1, r6, [r0]
 8006a50:	300c      	adds	r0, #12
 8006a52:	60a0      	str	r0, [r4, #8]
 8006a54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a58:	f7ff ffa2 	bl	80069a0 <memset>
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}

08006a60 <__sfp_lock_acquire>:
 8006a60:	4801      	ldr	r0, [pc, #4]	; (8006a68 <__sfp_lock_acquire+0x8>)
 8006a62:	f000 b8b3 	b.w	8006bcc <__retarget_lock_acquire_recursive>
 8006a66:	bf00      	nop
 8006a68:	200009c8 	.word	0x200009c8

08006a6c <__sfp_lock_release>:
 8006a6c:	4801      	ldr	r0, [pc, #4]	; (8006a74 <__sfp_lock_release+0x8>)
 8006a6e:	f000 b8ae 	b.w	8006bce <__retarget_lock_release_recursive>
 8006a72:	bf00      	nop
 8006a74:	200009c8 	.word	0x200009c8

08006a78 <__sinit_lock_acquire>:
 8006a78:	4801      	ldr	r0, [pc, #4]	; (8006a80 <__sinit_lock_acquire+0x8>)
 8006a7a:	f000 b8a7 	b.w	8006bcc <__retarget_lock_acquire_recursive>
 8006a7e:	bf00      	nop
 8006a80:	200009c3 	.word	0x200009c3

08006a84 <__sinit_lock_release>:
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <__sinit_lock_release+0x8>)
 8006a86:	f000 b8a2 	b.w	8006bce <__retarget_lock_release_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	200009c3 	.word	0x200009c3

08006a90 <__sinit>:
 8006a90:	b510      	push	{r4, lr}
 8006a92:	4604      	mov	r4, r0
 8006a94:	f7ff fff0 	bl	8006a78 <__sinit_lock_acquire>
 8006a98:	69a3      	ldr	r3, [r4, #24]
 8006a9a:	b11b      	cbz	r3, 8006aa4 <__sinit+0x14>
 8006a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa0:	f7ff bff0 	b.w	8006a84 <__sinit_lock_release>
 8006aa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006aa8:	6523      	str	r3, [r4, #80]	; 0x50
 8006aaa:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <__sinit+0x68>)
 8006aac:	4a13      	ldr	r2, [pc, #76]	; (8006afc <__sinit+0x6c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ab2:	42a3      	cmp	r3, r4
 8006ab4:	bf08      	it	eq
 8006ab6:	2301      	moveq	r3, #1
 8006ab8:	4620      	mov	r0, r4
 8006aba:	bf08      	it	eq
 8006abc:	61a3      	streq	r3, [r4, #24]
 8006abe:	f000 f81f 	bl	8006b00 <__sfp>
 8006ac2:	6060      	str	r0, [r4, #4]
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 f81b 	bl	8006b00 <__sfp>
 8006aca:	60a0      	str	r0, [r4, #8]
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 f817 	bl	8006b00 <__sfp>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2104      	movs	r1, #4
 8006ad6:	60e0      	str	r0, [r4, #12]
 8006ad8:	6860      	ldr	r0, [r4, #4]
 8006ada:	f7ff ff81 	bl	80069e0 <std>
 8006ade:	2201      	movs	r2, #1
 8006ae0:	2109      	movs	r1, #9
 8006ae2:	68a0      	ldr	r0, [r4, #8]
 8006ae4:	f7ff ff7c 	bl	80069e0 <std>
 8006ae8:	2202      	movs	r2, #2
 8006aea:	2112      	movs	r1, #18
 8006aec:	68e0      	ldr	r0, [r4, #12]
 8006aee:	f7ff ff77 	bl	80069e0 <std>
 8006af2:	2301      	movs	r3, #1
 8006af4:	61a3      	str	r3, [r4, #24]
 8006af6:	e7d1      	b.n	8006a9c <__sinit+0xc>
 8006af8:	080078e8 	.word	0x080078e8
 8006afc:	08006a29 	.word	0x08006a29

08006b00 <__sfp>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	4607      	mov	r7, r0
 8006b04:	f7ff ffac 	bl	8006a60 <__sfp_lock_acquire>
 8006b08:	4b1e      	ldr	r3, [pc, #120]	; (8006b84 <__sfp+0x84>)
 8006b0a:	681e      	ldr	r6, [r3, #0]
 8006b0c:	69b3      	ldr	r3, [r6, #24]
 8006b0e:	b913      	cbnz	r3, 8006b16 <__sfp+0x16>
 8006b10:	4630      	mov	r0, r6
 8006b12:	f7ff ffbd 	bl	8006a90 <__sinit>
 8006b16:	3648      	adds	r6, #72	; 0x48
 8006b18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	d503      	bpl.n	8006b28 <__sfp+0x28>
 8006b20:	6833      	ldr	r3, [r6, #0]
 8006b22:	b30b      	cbz	r3, 8006b68 <__sfp+0x68>
 8006b24:	6836      	ldr	r6, [r6, #0]
 8006b26:	e7f7      	b.n	8006b18 <__sfp+0x18>
 8006b28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b2c:	b9d5      	cbnz	r5, 8006b64 <__sfp+0x64>
 8006b2e:	4b16      	ldr	r3, [pc, #88]	; (8006b88 <__sfp+0x88>)
 8006b30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b34:	60e3      	str	r3, [r4, #12]
 8006b36:	6665      	str	r5, [r4, #100]	; 0x64
 8006b38:	f000 f847 	bl	8006bca <__retarget_lock_init_recursive>
 8006b3c:	f7ff ff96 	bl	8006a6c <__sfp_lock_release>
 8006b40:	2208      	movs	r2, #8
 8006b42:	4629      	mov	r1, r5
 8006b44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b4c:	6025      	str	r5, [r4, #0]
 8006b4e:	61a5      	str	r5, [r4, #24]
 8006b50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b54:	f7ff ff24 	bl	80069a0 <memset>
 8006b58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b60:	4620      	mov	r0, r4
 8006b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b64:	3468      	adds	r4, #104	; 0x68
 8006b66:	e7d9      	b.n	8006b1c <__sfp+0x1c>
 8006b68:	2104      	movs	r1, #4
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	f7ff ff62 	bl	8006a34 <__sfmoreglue>
 8006b70:	4604      	mov	r4, r0
 8006b72:	6030      	str	r0, [r6, #0]
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d1d5      	bne.n	8006b24 <__sfp+0x24>
 8006b78:	f7ff ff78 	bl	8006a6c <__sfp_lock_release>
 8006b7c:	230c      	movs	r3, #12
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	e7ee      	b.n	8006b60 <__sfp+0x60>
 8006b82:	bf00      	nop
 8006b84:	080078e8 	.word	0x080078e8
 8006b88:	ffff0001 	.word	0xffff0001

08006b8c <_fwalk_reent>:
 8006b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b90:	4606      	mov	r6, r0
 8006b92:	4688      	mov	r8, r1
 8006b94:	2700      	movs	r7, #0
 8006b96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b9e:	f1b9 0901 	subs.w	r9, r9, #1
 8006ba2:	d505      	bpl.n	8006bb0 <_fwalk_reent+0x24>
 8006ba4:	6824      	ldr	r4, [r4, #0]
 8006ba6:	2c00      	cmp	r4, #0
 8006ba8:	d1f7      	bne.n	8006b9a <_fwalk_reent+0xe>
 8006baa:	4638      	mov	r0, r7
 8006bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bb0:	89ab      	ldrh	r3, [r5, #12]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d907      	bls.n	8006bc6 <_fwalk_reent+0x3a>
 8006bb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	d003      	beq.n	8006bc6 <_fwalk_reent+0x3a>
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	47c0      	blx	r8
 8006bc4:	4307      	orrs	r7, r0
 8006bc6:	3568      	adds	r5, #104	; 0x68
 8006bc8:	e7e9      	b.n	8006b9e <_fwalk_reent+0x12>

08006bca <__retarget_lock_init_recursive>:
 8006bca:	4770      	bx	lr

08006bcc <__retarget_lock_acquire_recursive>:
 8006bcc:	4770      	bx	lr

08006bce <__retarget_lock_release_recursive>:
 8006bce:	4770      	bx	lr

08006bd0 <_malloc_r>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	1ccd      	adds	r5, r1, #3
 8006bd4:	f025 0503 	bic.w	r5, r5, #3
 8006bd8:	3508      	adds	r5, #8
 8006bda:	2d0c      	cmp	r5, #12
 8006bdc:	bf38      	it	cc
 8006bde:	250c      	movcc	r5, #12
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	4606      	mov	r6, r0
 8006be4:	db01      	blt.n	8006bea <_malloc_r+0x1a>
 8006be6:	42a9      	cmp	r1, r5
 8006be8:	d903      	bls.n	8006bf2 <_malloc_r+0x22>
 8006bea:	230c      	movs	r3, #12
 8006bec:	6033      	str	r3, [r6, #0]
 8006bee:	2000      	movs	r0, #0
 8006bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bf2:	f000 fdb1 	bl	8007758 <__malloc_lock>
 8006bf6:	4921      	ldr	r1, [pc, #132]	; (8006c7c <_malloc_r+0xac>)
 8006bf8:	680a      	ldr	r2, [r1, #0]
 8006bfa:	4614      	mov	r4, r2
 8006bfc:	b99c      	cbnz	r4, 8006c26 <_malloc_r+0x56>
 8006bfe:	4f20      	ldr	r7, [pc, #128]	; (8006c80 <_malloc_r+0xb0>)
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	b923      	cbnz	r3, 8006c0e <_malloc_r+0x3e>
 8006c04:	4621      	mov	r1, r4
 8006c06:	4630      	mov	r0, r6
 8006c08:	f000 fb2a 	bl	8007260 <_sbrk_r>
 8006c0c:	6038      	str	r0, [r7, #0]
 8006c0e:	4629      	mov	r1, r5
 8006c10:	4630      	mov	r0, r6
 8006c12:	f000 fb25 	bl	8007260 <_sbrk_r>
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	d123      	bne.n	8006c62 <_malloc_r+0x92>
 8006c1a:	230c      	movs	r3, #12
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	6033      	str	r3, [r6, #0]
 8006c20:	f000 fda0 	bl	8007764 <__malloc_unlock>
 8006c24:	e7e3      	b.n	8006bee <_malloc_r+0x1e>
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	1b5b      	subs	r3, r3, r5
 8006c2a:	d417      	bmi.n	8006c5c <_malloc_r+0x8c>
 8006c2c:	2b0b      	cmp	r3, #11
 8006c2e:	d903      	bls.n	8006c38 <_malloc_r+0x68>
 8006c30:	6023      	str	r3, [r4, #0]
 8006c32:	441c      	add	r4, r3
 8006c34:	6025      	str	r5, [r4, #0]
 8006c36:	e004      	b.n	8006c42 <_malloc_r+0x72>
 8006c38:	6863      	ldr	r3, [r4, #4]
 8006c3a:	42a2      	cmp	r2, r4
 8006c3c:	bf0c      	ite	eq
 8006c3e:	600b      	streq	r3, [r1, #0]
 8006c40:	6053      	strne	r3, [r2, #4]
 8006c42:	4630      	mov	r0, r6
 8006c44:	f000 fd8e 	bl	8007764 <__malloc_unlock>
 8006c48:	f104 000b 	add.w	r0, r4, #11
 8006c4c:	1d23      	adds	r3, r4, #4
 8006c4e:	f020 0007 	bic.w	r0, r0, #7
 8006c52:	1ac2      	subs	r2, r0, r3
 8006c54:	d0cc      	beq.n	8006bf0 <_malloc_r+0x20>
 8006c56:	1a1b      	subs	r3, r3, r0
 8006c58:	50a3      	str	r3, [r4, r2]
 8006c5a:	e7c9      	b.n	8006bf0 <_malloc_r+0x20>
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	6864      	ldr	r4, [r4, #4]
 8006c60:	e7cc      	b.n	8006bfc <_malloc_r+0x2c>
 8006c62:	1cc4      	adds	r4, r0, #3
 8006c64:	f024 0403 	bic.w	r4, r4, #3
 8006c68:	42a0      	cmp	r0, r4
 8006c6a:	d0e3      	beq.n	8006c34 <_malloc_r+0x64>
 8006c6c:	1a21      	subs	r1, r4, r0
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f000 faf6 	bl	8007260 <_sbrk_r>
 8006c74:	3001      	adds	r0, #1
 8006c76:	d1dd      	bne.n	8006c34 <_malloc_r+0x64>
 8006c78:	e7cf      	b.n	8006c1a <_malloc_r+0x4a>
 8006c7a:	bf00      	nop
 8006c7c:	20000204 	.word	0x20000204
 8006c80:	20000208 	.word	0x20000208

08006c84 <__sfputc_r>:
 8006c84:	6893      	ldr	r3, [r2, #8]
 8006c86:	b410      	push	{r4}
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	6093      	str	r3, [r2, #8]
 8006c8e:	da07      	bge.n	8006ca0 <__sfputc_r+0x1c>
 8006c90:	6994      	ldr	r4, [r2, #24]
 8006c92:	42a3      	cmp	r3, r4
 8006c94:	db01      	blt.n	8006c9a <__sfputc_r+0x16>
 8006c96:	290a      	cmp	r1, #10
 8006c98:	d102      	bne.n	8006ca0 <__sfputc_r+0x1c>
 8006c9a:	bc10      	pop	{r4}
 8006c9c:	f000 bb34 	b.w	8007308 <__swbuf_r>
 8006ca0:	6813      	ldr	r3, [r2, #0]
 8006ca2:	1c58      	adds	r0, r3, #1
 8006ca4:	6010      	str	r0, [r2, #0]
 8006ca6:	7019      	strb	r1, [r3, #0]
 8006ca8:	4608      	mov	r0, r1
 8006caa:	bc10      	pop	{r4}
 8006cac:	4770      	bx	lr

08006cae <__sfputs_r>:
 8006cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	460f      	mov	r7, r1
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	18d5      	adds	r5, r2, r3
 8006cb8:	42ac      	cmp	r4, r5
 8006cba:	d101      	bne.n	8006cc0 <__sfputs_r+0x12>
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	e007      	b.n	8006cd0 <__sfputs_r+0x22>
 8006cc0:	463a      	mov	r2, r7
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc8:	f7ff ffdc 	bl	8006c84 <__sfputc_r>
 8006ccc:	1c43      	adds	r3, r0, #1
 8006cce:	d1f3      	bne.n	8006cb8 <__sfputs_r+0xa>
 8006cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cd4 <_vfiprintf_r>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	460d      	mov	r5, r1
 8006cda:	4614      	mov	r4, r2
 8006cdc:	4698      	mov	r8, r3
 8006cde:	4606      	mov	r6, r0
 8006ce0:	b09d      	sub	sp, #116	; 0x74
 8006ce2:	b118      	cbz	r0, 8006cec <_vfiprintf_r+0x18>
 8006ce4:	6983      	ldr	r3, [r0, #24]
 8006ce6:	b90b      	cbnz	r3, 8006cec <_vfiprintf_r+0x18>
 8006ce8:	f7ff fed2 	bl	8006a90 <__sinit>
 8006cec:	4b89      	ldr	r3, [pc, #548]	; (8006f14 <_vfiprintf_r+0x240>)
 8006cee:	429d      	cmp	r5, r3
 8006cf0:	d11b      	bne.n	8006d2a <_vfiprintf_r+0x56>
 8006cf2:	6875      	ldr	r5, [r6, #4]
 8006cf4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cf6:	07d9      	lsls	r1, r3, #31
 8006cf8:	d405      	bmi.n	8006d06 <_vfiprintf_r+0x32>
 8006cfa:	89ab      	ldrh	r3, [r5, #12]
 8006cfc:	059a      	lsls	r2, r3, #22
 8006cfe:	d402      	bmi.n	8006d06 <_vfiprintf_r+0x32>
 8006d00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d02:	f7ff ff63 	bl	8006bcc <__retarget_lock_acquire_recursive>
 8006d06:	89ab      	ldrh	r3, [r5, #12]
 8006d08:	071b      	lsls	r3, r3, #28
 8006d0a:	d501      	bpl.n	8006d10 <_vfiprintf_r+0x3c>
 8006d0c:	692b      	ldr	r3, [r5, #16]
 8006d0e:	b9eb      	cbnz	r3, 8006d4c <_vfiprintf_r+0x78>
 8006d10:	4629      	mov	r1, r5
 8006d12:	4630      	mov	r0, r6
 8006d14:	f000 fb5c 	bl	80073d0 <__swsetup_r>
 8006d18:	b1c0      	cbz	r0, 8006d4c <_vfiprintf_r+0x78>
 8006d1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d1c:	07dc      	lsls	r4, r3, #31
 8006d1e:	d50e      	bpl.n	8006d3e <_vfiprintf_r+0x6a>
 8006d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d24:	b01d      	add	sp, #116	; 0x74
 8006d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d2a:	4b7b      	ldr	r3, [pc, #492]	; (8006f18 <_vfiprintf_r+0x244>)
 8006d2c:	429d      	cmp	r5, r3
 8006d2e:	d101      	bne.n	8006d34 <_vfiprintf_r+0x60>
 8006d30:	68b5      	ldr	r5, [r6, #8]
 8006d32:	e7df      	b.n	8006cf4 <_vfiprintf_r+0x20>
 8006d34:	4b79      	ldr	r3, [pc, #484]	; (8006f1c <_vfiprintf_r+0x248>)
 8006d36:	429d      	cmp	r5, r3
 8006d38:	bf08      	it	eq
 8006d3a:	68f5      	ldreq	r5, [r6, #12]
 8006d3c:	e7da      	b.n	8006cf4 <_vfiprintf_r+0x20>
 8006d3e:	89ab      	ldrh	r3, [r5, #12]
 8006d40:	0598      	lsls	r0, r3, #22
 8006d42:	d4ed      	bmi.n	8006d20 <_vfiprintf_r+0x4c>
 8006d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d46:	f7ff ff42 	bl	8006bce <__retarget_lock_release_recursive>
 8006d4a:	e7e9      	b.n	8006d20 <_vfiprintf_r+0x4c>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d50:	2320      	movs	r3, #32
 8006d52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d56:	2330      	movs	r3, #48	; 0x30
 8006d58:	f04f 0901 	mov.w	r9, #1
 8006d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d60:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006f20 <_vfiprintf_r+0x24c>
 8006d64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d68:	4623      	mov	r3, r4
 8006d6a:	469a      	mov	sl, r3
 8006d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d70:	b10a      	cbz	r2, 8006d76 <_vfiprintf_r+0xa2>
 8006d72:	2a25      	cmp	r2, #37	; 0x25
 8006d74:	d1f9      	bne.n	8006d6a <_vfiprintf_r+0x96>
 8006d76:	ebba 0b04 	subs.w	fp, sl, r4
 8006d7a:	d00b      	beq.n	8006d94 <_vfiprintf_r+0xc0>
 8006d7c:	465b      	mov	r3, fp
 8006d7e:	4622      	mov	r2, r4
 8006d80:	4629      	mov	r1, r5
 8006d82:	4630      	mov	r0, r6
 8006d84:	f7ff ff93 	bl	8006cae <__sfputs_r>
 8006d88:	3001      	adds	r0, #1
 8006d8a:	f000 80aa 	beq.w	8006ee2 <_vfiprintf_r+0x20e>
 8006d8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d90:	445a      	add	r2, fp
 8006d92:	9209      	str	r2, [sp, #36]	; 0x24
 8006d94:	f89a 3000 	ldrb.w	r3, [sl]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 80a2 	beq.w	8006ee2 <_vfiprintf_r+0x20e>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006da8:	f10a 0a01 	add.w	sl, sl, #1
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	9307      	str	r3, [sp, #28]
 8006db0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006db4:	931a      	str	r3, [sp, #104]	; 0x68
 8006db6:	4654      	mov	r4, sl
 8006db8:	2205      	movs	r2, #5
 8006dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dbe:	4858      	ldr	r0, [pc, #352]	; (8006f20 <_vfiprintf_r+0x24c>)
 8006dc0:	f000 fcbc 	bl	800773c <memchr>
 8006dc4:	9a04      	ldr	r2, [sp, #16]
 8006dc6:	b9d8      	cbnz	r0, 8006e00 <_vfiprintf_r+0x12c>
 8006dc8:	06d1      	lsls	r1, r2, #27
 8006dca:	bf44      	itt	mi
 8006dcc:	2320      	movmi	r3, #32
 8006dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd2:	0713      	lsls	r3, r2, #28
 8006dd4:	bf44      	itt	mi
 8006dd6:	232b      	movmi	r3, #43	; 0x2b
 8006dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8006de0:	2b2a      	cmp	r3, #42	; 0x2a
 8006de2:	d015      	beq.n	8006e10 <_vfiprintf_r+0x13c>
 8006de4:	4654      	mov	r4, sl
 8006de6:	2000      	movs	r0, #0
 8006de8:	f04f 0c0a 	mov.w	ip, #10
 8006dec:	9a07      	ldr	r2, [sp, #28]
 8006dee:	4621      	mov	r1, r4
 8006df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df4:	3b30      	subs	r3, #48	; 0x30
 8006df6:	2b09      	cmp	r3, #9
 8006df8:	d94e      	bls.n	8006e98 <_vfiprintf_r+0x1c4>
 8006dfa:	b1b0      	cbz	r0, 8006e2a <_vfiprintf_r+0x156>
 8006dfc:	9207      	str	r2, [sp, #28]
 8006dfe:	e014      	b.n	8006e2a <_vfiprintf_r+0x156>
 8006e00:	eba0 0308 	sub.w	r3, r0, r8
 8006e04:	fa09 f303 	lsl.w	r3, r9, r3
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	46a2      	mov	sl, r4
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	e7d2      	b.n	8006db6 <_vfiprintf_r+0xe2>
 8006e10:	9b03      	ldr	r3, [sp, #12]
 8006e12:	1d19      	adds	r1, r3, #4
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	9103      	str	r1, [sp, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	bfbb      	ittet	lt
 8006e1c:	425b      	neglt	r3, r3
 8006e1e:	f042 0202 	orrlt.w	r2, r2, #2
 8006e22:	9307      	strge	r3, [sp, #28]
 8006e24:	9307      	strlt	r3, [sp, #28]
 8006e26:	bfb8      	it	lt
 8006e28:	9204      	strlt	r2, [sp, #16]
 8006e2a:	7823      	ldrb	r3, [r4, #0]
 8006e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e2e:	d10c      	bne.n	8006e4a <_vfiprintf_r+0x176>
 8006e30:	7863      	ldrb	r3, [r4, #1]
 8006e32:	2b2a      	cmp	r3, #42	; 0x2a
 8006e34:	d135      	bne.n	8006ea2 <_vfiprintf_r+0x1ce>
 8006e36:	9b03      	ldr	r3, [sp, #12]
 8006e38:	3402      	adds	r4, #2
 8006e3a:	1d1a      	adds	r2, r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	9203      	str	r2, [sp, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bfb8      	it	lt
 8006e44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e48:	9305      	str	r3, [sp, #20]
 8006e4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006f30 <_vfiprintf_r+0x25c>
 8006e4e:	2203      	movs	r2, #3
 8006e50:	4650      	mov	r0, sl
 8006e52:	7821      	ldrb	r1, [r4, #0]
 8006e54:	f000 fc72 	bl	800773c <memchr>
 8006e58:	b140      	cbz	r0, 8006e6c <_vfiprintf_r+0x198>
 8006e5a:	2340      	movs	r3, #64	; 0x40
 8006e5c:	eba0 000a 	sub.w	r0, r0, sl
 8006e60:	fa03 f000 	lsl.w	r0, r3, r0
 8006e64:	9b04      	ldr	r3, [sp, #16]
 8006e66:	3401      	adds	r4, #1
 8006e68:	4303      	orrs	r3, r0
 8006e6a:	9304      	str	r3, [sp, #16]
 8006e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e70:	2206      	movs	r2, #6
 8006e72:	482c      	ldr	r0, [pc, #176]	; (8006f24 <_vfiprintf_r+0x250>)
 8006e74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e78:	f000 fc60 	bl	800773c <memchr>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d03f      	beq.n	8006f00 <_vfiprintf_r+0x22c>
 8006e80:	4b29      	ldr	r3, [pc, #164]	; (8006f28 <_vfiprintf_r+0x254>)
 8006e82:	bb1b      	cbnz	r3, 8006ecc <_vfiprintf_r+0x1f8>
 8006e84:	9b03      	ldr	r3, [sp, #12]
 8006e86:	3307      	adds	r3, #7
 8006e88:	f023 0307 	bic.w	r3, r3, #7
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	9303      	str	r3, [sp, #12]
 8006e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e92:	443b      	add	r3, r7
 8006e94:	9309      	str	r3, [sp, #36]	; 0x24
 8006e96:	e767      	b.n	8006d68 <_vfiprintf_r+0x94>
 8006e98:	460c      	mov	r4, r1
 8006e9a:	2001      	movs	r0, #1
 8006e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ea0:	e7a5      	b.n	8006dee <_vfiprintf_r+0x11a>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f04f 0c0a 	mov.w	ip, #10
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	3401      	adds	r4, #1
 8006eac:	9305      	str	r3, [sp, #20]
 8006eae:	4620      	mov	r0, r4
 8006eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eb4:	3a30      	subs	r2, #48	; 0x30
 8006eb6:	2a09      	cmp	r2, #9
 8006eb8:	d903      	bls.n	8006ec2 <_vfiprintf_r+0x1ee>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d0c5      	beq.n	8006e4a <_vfiprintf_r+0x176>
 8006ebe:	9105      	str	r1, [sp, #20]
 8006ec0:	e7c3      	b.n	8006e4a <_vfiprintf_r+0x176>
 8006ec2:	4604      	mov	r4, r0
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eca:	e7f0      	b.n	8006eae <_vfiprintf_r+0x1da>
 8006ecc:	ab03      	add	r3, sp, #12
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	462a      	mov	r2, r5
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	4b15      	ldr	r3, [pc, #84]	; (8006f2c <_vfiprintf_r+0x258>)
 8006ed6:	a904      	add	r1, sp, #16
 8006ed8:	f3af 8000 	nop.w
 8006edc:	4607      	mov	r7, r0
 8006ede:	1c78      	adds	r0, r7, #1
 8006ee0:	d1d6      	bne.n	8006e90 <_vfiprintf_r+0x1bc>
 8006ee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ee4:	07d9      	lsls	r1, r3, #31
 8006ee6:	d405      	bmi.n	8006ef4 <_vfiprintf_r+0x220>
 8006ee8:	89ab      	ldrh	r3, [r5, #12]
 8006eea:	059a      	lsls	r2, r3, #22
 8006eec:	d402      	bmi.n	8006ef4 <_vfiprintf_r+0x220>
 8006eee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ef0:	f7ff fe6d 	bl	8006bce <__retarget_lock_release_recursive>
 8006ef4:	89ab      	ldrh	r3, [r5, #12]
 8006ef6:	065b      	lsls	r3, r3, #25
 8006ef8:	f53f af12 	bmi.w	8006d20 <_vfiprintf_r+0x4c>
 8006efc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006efe:	e711      	b.n	8006d24 <_vfiprintf_r+0x50>
 8006f00:	ab03      	add	r3, sp, #12
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	462a      	mov	r2, r5
 8006f06:	4630      	mov	r0, r6
 8006f08:	4b08      	ldr	r3, [pc, #32]	; (8006f2c <_vfiprintf_r+0x258>)
 8006f0a:	a904      	add	r1, sp, #16
 8006f0c:	f000 f882 	bl	8007014 <_printf_i>
 8006f10:	e7e4      	b.n	8006edc <_vfiprintf_r+0x208>
 8006f12:	bf00      	nop
 8006f14:	0800790c 	.word	0x0800790c
 8006f18:	0800792c 	.word	0x0800792c
 8006f1c:	080078ec 	.word	0x080078ec
 8006f20:	0800794c 	.word	0x0800794c
 8006f24:	08007956 	.word	0x08007956
 8006f28:	00000000 	.word	0x00000000
 8006f2c:	08006caf 	.word	0x08006caf
 8006f30:	08007952 	.word	0x08007952

08006f34 <_printf_common>:
 8006f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f38:	4616      	mov	r6, r2
 8006f3a:	4699      	mov	r9, r3
 8006f3c:	688a      	ldr	r2, [r1, #8]
 8006f3e:	690b      	ldr	r3, [r1, #16]
 8006f40:	4607      	mov	r7, r0
 8006f42:	4293      	cmp	r3, r2
 8006f44:	bfb8      	it	lt
 8006f46:	4613      	movlt	r3, r2
 8006f48:	6033      	str	r3, [r6, #0]
 8006f4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f4e:	460c      	mov	r4, r1
 8006f50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f54:	b10a      	cbz	r2, 8006f5a <_printf_common+0x26>
 8006f56:	3301      	adds	r3, #1
 8006f58:	6033      	str	r3, [r6, #0]
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	0699      	lsls	r1, r3, #26
 8006f5e:	bf42      	ittt	mi
 8006f60:	6833      	ldrmi	r3, [r6, #0]
 8006f62:	3302      	addmi	r3, #2
 8006f64:	6033      	strmi	r3, [r6, #0]
 8006f66:	6825      	ldr	r5, [r4, #0]
 8006f68:	f015 0506 	ands.w	r5, r5, #6
 8006f6c:	d106      	bne.n	8006f7c <_printf_common+0x48>
 8006f6e:	f104 0a19 	add.w	sl, r4, #25
 8006f72:	68e3      	ldr	r3, [r4, #12]
 8006f74:	6832      	ldr	r2, [r6, #0]
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	42ab      	cmp	r3, r5
 8006f7a:	dc28      	bgt.n	8006fce <_printf_common+0x9a>
 8006f7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f80:	1e13      	subs	r3, r2, #0
 8006f82:	6822      	ldr	r2, [r4, #0]
 8006f84:	bf18      	it	ne
 8006f86:	2301      	movne	r3, #1
 8006f88:	0692      	lsls	r2, r2, #26
 8006f8a:	d42d      	bmi.n	8006fe8 <_printf_common+0xb4>
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	4638      	mov	r0, r7
 8006f90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f94:	47c0      	blx	r8
 8006f96:	3001      	adds	r0, #1
 8006f98:	d020      	beq.n	8006fdc <_printf_common+0xa8>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	68e5      	ldr	r5, [r4, #12]
 8006f9e:	f003 0306 	and.w	r3, r3, #6
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	bf18      	it	ne
 8006fa6:	2500      	movne	r5, #0
 8006fa8:	6832      	ldr	r2, [r6, #0]
 8006faa:	f04f 0600 	mov.w	r6, #0
 8006fae:	68a3      	ldr	r3, [r4, #8]
 8006fb0:	bf08      	it	eq
 8006fb2:	1aad      	subeq	r5, r5, r2
 8006fb4:	6922      	ldr	r2, [r4, #16]
 8006fb6:	bf08      	it	eq
 8006fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	bfc4      	itt	gt
 8006fc0:	1a9b      	subgt	r3, r3, r2
 8006fc2:	18ed      	addgt	r5, r5, r3
 8006fc4:	341a      	adds	r4, #26
 8006fc6:	42b5      	cmp	r5, r6
 8006fc8:	d11a      	bne.n	8007000 <_printf_common+0xcc>
 8006fca:	2000      	movs	r0, #0
 8006fcc:	e008      	b.n	8006fe0 <_printf_common+0xac>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	4652      	mov	r2, sl
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	4638      	mov	r0, r7
 8006fd6:	47c0      	blx	r8
 8006fd8:	3001      	adds	r0, #1
 8006fda:	d103      	bne.n	8006fe4 <_printf_common+0xb0>
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe4:	3501      	adds	r5, #1
 8006fe6:	e7c4      	b.n	8006f72 <_printf_common+0x3e>
 8006fe8:	2030      	movs	r0, #48	; 0x30
 8006fea:	18e1      	adds	r1, r4, r3
 8006fec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ff6:	4422      	add	r2, r4
 8006ff8:	3302      	adds	r3, #2
 8006ffa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ffe:	e7c5      	b.n	8006f8c <_printf_common+0x58>
 8007000:	2301      	movs	r3, #1
 8007002:	4622      	mov	r2, r4
 8007004:	4649      	mov	r1, r9
 8007006:	4638      	mov	r0, r7
 8007008:	47c0      	blx	r8
 800700a:	3001      	adds	r0, #1
 800700c:	d0e6      	beq.n	8006fdc <_printf_common+0xa8>
 800700e:	3601      	adds	r6, #1
 8007010:	e7d9      	b.n	8006fc6 <_printf_common+0x92>
	...

08007014 <_printf_i>:
 8007014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007018:	460c      	mov	r4, r1
 800701a:	7e27      	ldrb	r7, [r4, #24]
 800701c:	4691      	mov	r9, r2
 800701e:	2f78      	cmp	r7, #120	; 0x78
 8007020:	4680      	mov	r8, r0
 8007022:	469a      	mov	sl, r3
 8007024:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007026:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800702a:	d807      	bhi.n	800703c <_printf_i+0x28>
 800702c:	2f62      	cmp	r7, #98	; 0x62
 800702e:	d80a      	bhi.n	8007046 <_printf_i+0x32>
 8007030:	2f00      	cmp	r7, #0
 8007032:	f000 80d9 	beq.w	80071e8 <_printf_i+0x1d4>
 8007036:	2f58      	cmp	r7, #88	; 0x58
 8007038:	f000 80a4 	beq.w	8007184 <_printf_i+0x170>
 800703c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007044:	e03a      	b.n	80070bc <_printf_i+0xa8>
 8007046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800704a:	2b15      	cmp	r3, #21
 800704c:	d8f6      	bhi.n	800703c <_printf_i+0x28>
 800704e:	a001      	add	r0, pc, #4	; (adr r0, 8007054 <_printf_i+0x40>)
 8007050:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007054:	080070ad 	.word	0x080070ad
 8007058:	080070c1 	.word	0x080070c1
 800705c:	0800703d 	.word	0x0800703d
 8007060:	0800703d 	.word	0x0800703d
 8007064:	0800703d 	.word	0x0800703d
 8007068:	0800703d 	.word	0x0800703d
 800706c:	080070c1 	.word	0x080070c1
 8007070:	0800703d 	.word	0x0800703d
 8007074:	0800703d 	.word	0x0800703d
 8007078:	0800703d 	.word	0x0800703d
 800707c:	0800703d 	.word	0x0800703d
 8007080:	080071cf 	.word	0x080071cf
 8007084:	080070f1 	.word	0x080070f1
 8007088:	080071b1 	.word	0x080071b1
 800708c:	0800703d 	.word	0x0800703d
 8007090:	0800703d 	.word	0x0800703d
 8007094:	080071f1 	.word	0x080071f1
 8007098:	0800703d 	.word	0x0800703d
 800709c:	080070f1 	.word	0x080070f1
 80070a0:	0800703d 	.word	0x0800703d
 80070a4:	0800703d 	.word	0x0800703d
 80070a8:	080071b9 	.word	0x080071b9
 80070ac:	680b      	ldr	r3, [r1, #0]
 80070ae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070b2:	1d1a      	adds	r2, r3, #4
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	600a      	str	r2, [r1, #0]
 80070b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070bc:	2301      	movs	r3, #1
 80070be:	e0a4      	b.n	800720a <_printf_i+0x1f6>
 80070c0:	6825      	ldr	r5, [r4, #0]
 80070c2:	6808      	ldr	r0, [r1, #0]
 80070c4:	062e      	lsls	r6, r5, #24
 80070c6:	f100 0304 	add.w	r3, r0, #4
 80070ca:	d50a      	bpl.n	80070e2 <_printf_i+0xce>
 80070cc:	6805      	ldr	r5, [r0, #0]
 80070ce:	600b      	str	r3, [r1, #0]
 80070d0:	2d00      	cmp	r5, #0
 80070d2:	da03      	bge.n	80070dc <_printf_i+0xc8>
 80070d4:	232d      	movs	r3, #45	; 0x2d
 80070d6:	426d      	negs	r5, r5
 80070d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070dc:	230a      	movs	r3, #10
 80070de:	485e      	ldr	r0, [pc, #376]	; (8007258 <_printf_i+0x244>)
 80070e0:	e019      	b.n	8007116 <_printf_i+0x102>
 80070e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070e6:	6805      	ldr	r5, [r0, #0]
 80070e8:	600b      	str	r3, [r1, #0]
 80070ea:	bf18      	it	ne
 80070ec:	b22d      	sxthne	r5, r5
 80070ee:	e7ef      	b.n	80070d0 <_printf_i+0xbc>
 80070f0:	680b      	ldr	r3, [r1, #0]
 80070f2:	6825      	ldr	r5, [r4, #0]
 80070f4:	1d18      	adds	r0, r3, #4
 80070f6:	6008      	str	r0, [r1, #0]
 80070f8:	0628      	lsls	r0, r5, #24
 80070fa:	d501      	bpl.n	8007100 <_printf_i+0xec>
 80070fc:	681d      	ldr	r5, [r3, #0]
 80070fe:	e002      	b.n	8007106 <_printf_i+0xf2>
 8007100:	0669      	lsls	r1, r5, #25
 8007102:	d5fb      	bpl.n	80070fc <_printf_i+0xe8>
 8007104:	881d      	ldrh	r5, [r3, #0]
 8007106:	2f6f      	cmp	r7, #111	; 0x6f
 8007108:	bf0c      	ite	eq
 800710a:	2308      	moveq	r3, #8
 800710c:	230a      	movne	r3, #10
 800710e:	4852      	ldr	r0, [pc, #328]	; (8007258 <_printf_i+0x244>)
 8007110:	2100      	movs	r1, #0
 8007112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007116:	6866      	ldr	r6, [r4, #4]
 8007118:	2e00      	cmp	r6, #0
 800711a:	bfa8      	it	ge
 800711c:	6821      	ldrge	r1, [r4, #0]
 800711e:	60a6      	str	r6, [r4, #8]
 8007120:	bfa4      	itt	ge
 8007122:	f021 0104 	bicge.w	r1, r1, #4
 8007126:	6021      	strge	r1, [r4, #0]
 8007128:	b90d      	cbnz	r5, 800712e <_printf_i+0x11a>
 800712a:	2e00      	cmp	r6, #0
 800712c:	d04d      	beq.n	80071ca <_printf_i+0x1b6>
 800712e:	4616      	mov	r6, r2
 8007130:	fbb5 f1f3 	udiv	r1, r5, r3
 8007134:	fb03 5711 	mls	r7, r3, r1, r5
 8007138:	5dc7      	ldrb	r7, [r0, r7]
 800713a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800713e:	462f      	mov	r7, r5
 8007140:	42bb      	cmp	r3, r7
 8007142:	460d      	mov	r5, r1
 8007144:	d9f4      	bls.n	8007130 <_printf_i+0x11c>
 8007146:	2b08      	cmp	r3, #8
 8007148:	d10b      	bne.n	8007162 <_printf_i+0x14e>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	07df      	lsls	r7, r3, #31
 800714e:	d508      	bpl.n	8007162 <_printf_i+0x14e>
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	6861      	ldr	r1, [r4, #4]
 8007154:	4299      	cmp	r1, r3
 8007156:	bfde      	ittt	le
 8007158:	2330      	movle	r3, #48	; 0x30
 800715a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800715e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007162:	1b92      	subs	r2, r2, r6
 8007164:	6122      	str	r2, [r4, #16]
 8007166:	464b      	mov	r3, r9
 8007168:	4621      	mov	r1, r4
 800716a:	4640      	mov	r0, r8
 800716c:	f8cd a000 	str.w	sl, [sp]
 8007170:	aa03      	add	r2, sp, #12
 8007172:	f7ff fedf 	bl	8006f34 <_printf_common>
 8007176:	3001      	adds	r0, #1
 8007178:	d14c      	bne.n	8007214 <_printf_i+0x200>
 800717a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800717e:	b004      	add	sp, #16
 8007180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007184:	4834      	ldr	r0, [pc, #208]	; (8007258 <_printf_i+0x244>)
 8007186:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800718a:	680e      	ldr	r6, [r1, #0]
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007192:	061f      	lsls	r7, r3, #24
 8007194:	600e      	str	r6, [r1, #0]
 8007196:	d514      	bpl.n	80071c2 <_printf_i+0x1ae>
 8007198:	07d9      	lsls	r1, r3, #31
 800719a:	bf44      	itt	mi
 800719c:	f043 0320 	orrmi.w	r3, r3, #32
 80071a0:	6023      	strmi	r3, [r4, #0]
 80071a2:	b91d      	cbnz	r5, 80071ac <_printf_i+0x198>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	f023 0320 	bic.w	r3, r3, #32
 80071aa:	6023      	str	r3, [r4, #0]
 80071ac:	2310      	movs	r3, #16
 80071ae:	e7af      	b.n	8007110 <_printf_i+0xfc>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	f043 0320 	orr.w	r3, r3, #32
 80071b6:	6023      	str	r3, [r4, #0]
 80071b8:	2378      	movs	r3, #120	; 0x78
 80071ba:	4828      	ldr	r0, [pc, #160]	; (800725c <_printf_i+0x248>)
 80071bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071c0:	e7e3      	b.n	800718a <_printf_i+0x176>
 80071c2:	065e      	lsls	r6, r3, #25
 80071c4:	bf48      	it	mi
 80071c6:	b2ad      	uxthmi	r5, r5
 80071c8:	e7e6      	b.n	8007198 <_printf_i+0x184>
 80071ca:	4616      	mov	r6, r2
 80071cc:	e7bb      	b.n	8007146 <_printf_i+0x132>
 80071ce:	680b      	ldr	r3, [r1, #0]
 80071d0:	6826      	ldr	r6, [r4, #0]
 80071d2:	1d1d      	adds	r5, r3, #4
 80071d4:	6960      	ldr	r0, [r4, #20]
 80071d6:	600d      	str	r5, [r1, #0]
 80071d8:	0635      	lsls	r5, r6, #24
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	d501      	bpl.n	80071e2 <_printf_i+0x1ce>
 80071de:	6018      	str	r0, [r3, #0]
 80071e0:	e002      	b.n	80071e8 <_printf_i+0x1d4>
 80071e2:	0671      	lsls	r1, r6, #25
 80071e4:	d5fb      	bpl.n	80071de <_printf_i+0x1ca>
 80071e6:	8018      	strh	r0, [r3, #0]
 80071e8:	2300      	movs	r3, #0
 80071ea:	4616      	mov	r6, r2
 80071ec:	6123      	str	r3, [r4, #16]
 80071ee:	e7ba      	b.n	8007166 <_printf_i+0x152>
 80071f0:	680b      	ldr	r3, [r1, #0]
 80071f2:	1d1a      	adds	r2, r3, #4
 80071f4:	600a      	str	r2, [r1, #0]
 80071f6:	681e      	ldr	r6, [r3, #0]
 80071f8:	2100      	movs	r1, #0
 80071fa:	4630      	mov	r0, r6
 80071fc:	6862      	ldr	r2, [r4, #4]
 80071fe:	f000 fa9d 	bl	800773c <memchr>
 8007202:	b108      	cbz	r0, 8007208 <_printf_i+0x1f4>
 8007204:	1b80      	subs	r0, r0, r6
 8007206:	6060      	str	r0, [r4, #4]
 8007208:	6863      	ldr	r3, [r4, #4]
 800720a:	6123      	str	r3, [r4, #16]
 800720c:	2300      	movs	r3, #0
 800720e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007212:	e7a8      	b.n	8007166 <_printf_i+0x152>
 8007214:	4632      	mov	r2, r6
 8007216:	4649      	mov	r1, r9
 8007218:	4640      	mov	r0, r8
 800721a:	6923      	ldr	r3, [r4, #16]
 800721c:	47d0      	blx	sl
 800721e:	3001      	adds	r0, #1
 8007220:	d0ab      	beq.n	800717a <_printf_i+0x166>
 8007222:	6823      	ldr	r3, [r4, #0]
 8007224:	079b      	lsls	r3, r3, #30
 8007226:	d413      	bmi.n	8007250 <_printf_i+0x23c>
 8007228:	68e0      	ldr	r0, [r4, #12]
 800722a:	9b03      	ldr	r3, [sp, #12]
 800722c:	4298      	cmp	r0, r3
 800722e:	bfb8      	it	lt
 8007230:	4618      	movlt	r0, r3
 8007232:	e7a4      	b.n	800717e <_printf_i+0x16a>
 8007234:	2301      	movs	r3, #1
 8007236:	4632      	mov	r2, r6
 8007238:	4649      	mov	r1, r9
 800723a:	4640      	mov	r0, r8
 800723c:	47d0      	blx	sl
 800723e:	3001      	adds	r0, #1
 8007240:	d09b      	beq.n	800717a <_printf_i+0x166>
 8007242:	3501      	adds	r5, #1
 8007244:	68e3      	ldr	r3, [r4, #12]
 8007246:	9903      	ldr	r1, [sp, #12]
 8007248:	1a5b      	subs	r3, r3, r1
 800724a:	42ab      	cmp	r3, r5
 800724c:	dcf2      	bgt.n	8007234 <_printf_i+0x220>
 800724e:	e7eb      	b.n	8007228 <_printf_i+0x214>
 8007250:	2500      	movs	r5, #0
 8007252:	f104 0619 	add.w	r6, r4, #25
 8007256:	e7f5      	b.n	8007244 <_printf_i+0x230>
 8007258:	0800795d 	.word	0x0800795d
 800725c:	0800796e 	.word	0x0800796e

08007260 <_sbrk_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	2300      	movs	r3, #0
 8007264:	4d05      	ldr	r5, [pc, #20]	; (800727c <_sbrk_r+0x1c>)
 8007266:	4604      	mov	r4, r0
 8007268:	4608      	mov	r0, r1
 800726a:	602b      	str	r3, [r5, #0]
 800726c:	f7f9 fb22 	bl	80008b4 <_sbrk>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_sbrk_r+0x1a>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_sbrk_r+0x1a>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	200009cc 	.word	0x200009cc

08007280 <__sread>:
 8007280:	b510      	push	{r4, lr}
 8007282:	460c      	mov	r4, r1
 8007284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007288:	f000 fabe 	bl	8007808 <_read_r>
 800728c:	2800      	cmp	r0, #0
 800728e:	bfab      	itete	ge
 8007290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007292:	89a3      	ldrhlt	r3, [r4, #12]
 8007294:	181b      	addge	r3, r3, r0
 8007296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800729a:	bfac      	ite	ge
 800729c:	6563      	strge	r3, [r4, #84]	; 0x54
 800729e:	81a3      	strhlt	r3, [r4, #12]
 80072a0:	bd10      	pop	{r4, pc}

080072a2 <__swrite>:
 80072a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a6:	461f      	mov	r7, r3
 80072a8:	898b      	ldrh	r3, [r1, #12]
 80072aa:	4605      	mov	r5, r0
 80072ac:	05db      	lsls	r3, r3, #23
 80072ae:	460c      	mov	r4, r1
 80072b0:	4616      	mov	r6, r2
 80072b2:	d505      	bpl.n	80072c0 <__swrite+0x1e>
 80072b4:	2302      	movs	r3, #2
 80072b6:	2200      	movs	r2, #0
 80072b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072bc:	f000 f9c8 	bl	8007650 <_lseek_r>
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	4632      	mov	r2, r6
 80072c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072c8:	81a3      	strh	r3, [r4, #12]
 80072ca:	4628      	mov	r0, r5
 80072cc:	463b      	mov	r3, r7
 80072ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072d6:	f000 b869 	b.w	80073ac <_write_r>

080072da <__sseek>:
 80072da:	b510      	push	{r4, lr}
 80072dc:	460c      	mov	r4, r1
 80072de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e2:	f000 f9b5 	bl	8007650 <_lseek_r>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	bf15      	itete	ne
 80072ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80072ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072f6:	81a3      	strheq	r3, [r4, #12]
 80072f8:	bf18      	it	ne
 80072fa:	81a3      	strhne	r3, [r4, #12]
 80072fc:	bd10      	pop	{r4, pc}

080072fe <__sclose>:
 80072fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007302:	f000 b8d3 	b.w	80074ac <_close_r>
	...

08007308 <__swbuf_r>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	460e      	mov	r6, r1
 800730c:	4614      	mov	r4, r2
 800730e:	4605      	mov	r5, r0
 8007310:	b118      	cbz	r0, 800731a <__swbuf_r+0x12>
 8007312:	6983      	ldr	r3, [r0, #24]
 8007314:	b90b      	cbnz	r3, 800731a <__swbuf_r+0x12>
 8007316:	f7ff fbbb 	bl	8006a90 <__sinit>
 800731a:	4b21      	ldr	r3, [pc, #132]	; (80073a0 <__swbuf_r+0x98>)
 800731c:	429c      	cmp	r4, r3
 800731e:	d12b      	bne.n	8007378 <__swbuf_r+0x70>
 8007320:	686c      	ldr	r4, [r5, #4]
 8007322:	69a3      	ldr	r3, [r4, #24]
 8007324:	60a3      	str	r3, [r4, #8]
 8007326:	89a3      	ldrh	r3, [r4, #12]
 8007328:	071a      	lsls	r2, r3, #28
 800732a:	d52f      	bpl.n	800738c <__swbuf_r+0x84>
 800732c:	6923      	ldr	r3, [r4, #16]
 800732e:	b36b      	cbz	r3, 800738c <__swbuf_r+0x84>
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	6820      	ldr	r0, [r4, #0]
 8007334:	b2f6      	uxtb	r6, r6
 8007336:	1ac0      	subs	r0, r0, r3
 8007338:	6963      	ldr	r3, [r4, #20]
 800733a:	4637      	mov	r7, r6
 800733c:	4283      	cmp	r3, r0
 800733e:	dc04      	bgt.n	800734a <__swbuf_r+0x42>
 8007340:	4621      	mov	r1, r4
 8007342:	4628      	mov	r0, r5
 8007344:	f000 f948 	bl	80075d8 <_fflush_r>
 8007348:	bb30      	cbnz	r0, 8007398 <__swbuf_r+0x90>
 800734a:	68a3      	ldr	r3, [r4, #8]
 800734c:	3001      	adds	r0, #1
 800734e:	3b01      	subs	r3, #1
 8007350:	60a3      	str	r3, [r4, #8]
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	1c5a      	adds	r2, r3, #1
 8007356:	6022      	str	r2, [r4, #0]
 8007358:	701e      	strb	r6, [r3, #0]
 800735a:	6963      	ldr	r3, [r4, #20]
 800735c:	4283      	cmp	r3, r0
 800735e:	d004      	beq.n	800736a <__swbuf_r+0x62>
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	07db      	lsls	r3, r3, #31
 8007364:	d506      	bpl.n	8007374 <__swbuf_r+0x6c>
 8007366:	2e0a      	cmp	r6, #10
 8007368:	d104      	bne.n	8007374 <__swbuf_r+0x6c>
 800736a:	4621      	mov	r1, r4
 800736c:	4628      	mov	r0, r5
 800736e:	f000 f933 	bl	80075d8 <_fflush_r>
 8007372:	b988      	cbnz	r0, 8007398 <__swbuf_r+0x90>
 8007374:	4638      	mov	r0, r7
 8007376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007378:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <__swbuf_r+0x9c>)
 800737a:	429c      	cmp	r4, r3
 800737c:	d101      	bne.n	8007382 <__swbuf_r+0x7a>
 800737e:	68ac      	ldr	r4, [r5, #8]
 8007380:	e7cf      	b.n	8007322 <__swbuf_r+0x1a>
 8007382:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <__swbuf_r+0xa0>)
 8007384:	429c      	cmp	r4, r3
 8007386:	bf08      	it	eq
 8007388:	68ec      	ldreq	r4, [r5, #12]
 800738a:	e7ca      	b.n	8007322 <__swbuf_r+0x1a>
 800738c:	4621      	mov	r1, r4
 800738e:	4628      	mov	r0, r5
 8007390:	f000 f81e 	bl	80073d0 <__swsetup_r>
 8007394:	2800      	cmp	r0, #0
 8007396:	d0cb      	beq.n	8007330 <__swbuf_r+0x28>
 8007398:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800739c:	e7ea      	b.n	8007374 <__swbuf_r+0x6c>
 800739e:	bf00      	nop
 80073a0:	0800790c 	.word	0x0800790c
 80073a4:	0800792c 	.word	0x0800792c
 80073a8:	080078ec 	.word	0x080078ec

080073ac <_write_r>:
 80073ac:	b538      	push	{r3, r4, r5, lr}
 80073ae:	4604      	mov	r4, r0
 80073b0:	4608      	mov	r0, r1
 80073b2:	4611      	mov	r1, r2
 80073b4:	2200      	movs	r2, #0
 80073b6:	4d05      	ldr	r5, [pc, #20]	; (80073cc <_write_r+0x20>)
 80073b8:	602a      	str	r2, [r5, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	f7f9 f898 	bl	80004f0 <_write>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_write_r+0x1e>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_write_r+0x1e>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	200009cc 	.word	0x200009cc

080073d0 <__swsetup_r>:
 80073d0:	4b32      	ldr	r3, [pc, #200]	; (800749c <__swsetup_r+0xcc>)
 80073d2:	b570      	push	{r4, r5, r6, lr}
 80073d4:	681d      	ldr	r5, [r3, #0]
 80073d6:	4606      	mov	r6, r0
 80073d8:	460c      	mov	r4, r1
 80073da:	b125      	cbz	r5, 80073e6 <__swsetup_r+0x16>
 80073dc:	69ab      	ldr	r3, [r5, #24]
 80073de:	b913      	cbnz	r3, 80073e6 <__swsetup_r+0x16>
 80073e0:	4628      	mov	r0, r5
 80073e2:	f7ff fb55 	bl	8006a90 <__sinit>
 80073e6:	4b2e      	ldr	r3, [pc, #184]	; (80074a0 <__swsetup_r+0xd0>)
 80073e8:	429c      	cmp	r4, r3
 80073ea:	d10f      	bne.n	800740c <__swsetup_r+0x3c>
 80073ec:	686c      	ldr	r4, [r5, #4]
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f4:	0719      	lsls	r1, r3, #28
 80073f6:	d42c      	bmi.n	8007452 <__swsetup_r+0x82>
 80073f8:	06dd      	lsls	r5, r3, #27
 80073fa:	d411      	bmi.n	8007420 <__swsetup_r+0x50>
 80073fc:	2309      	movs	r3, #9
 80073fe:	6033      	str	r3, [r6, #0]
 8007400:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007408:	81a3      	strh	r3, [r4, #12]
 800740a:	e03e      	b.n	800748a <__swsetup_r+0xba>
 800740c:	4b25      	ldr	r3, [pc, #148]	; (80074a4 <__swsetup_r+0xd4>)
 800740e:	429c      	cmp	r4, r3
 8007410:	d101      	bne.n	8007416 <__swsetup_r+0x46>
 8007412:	68ac      	ldr	r4, [r5, #8]
 8007414:	e7eb      	b.n	80073ee <__swsetup_r+0x1e>
 8007416:	4b24      	ldr	r3, [pc, #144]	; (80074a8 <__swsetup_r+0xd8>)
 8007418:	429c      	cmp	r4, r3
 800741a:	bf08      	it	eq
 800741c:	68ec      	ldreq	r4, [r5, #12]
 800741e:	e7e6      	b.n	80073ee <__swsetup_r+0x1e>
 8007420:	0758      	lsls	r0, r3, #29
 8007422:	d512      	bpl.n	800744a <__swsetup_r+0x7a>
 8007424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007426:	b141      	cbz	r1, 800743a <__swsetup_r+0x6a>
 8007428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800742c:	4299      	cmp	r1, r3
 800742e:	d002      	beq.n	8007436 <__swsetup_r+0x66>
 8007430:	4630      	mov	r0, r6
 8007432:	f000 f99d 	bl	8007770 <_free_r>
 8007436:	2300      	movs	r3, #0
 8007438:	6363      	str	r3, [r4, #52]	; 0x34
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007440:	81a3      	strh	r3, [r4, #12]
 8007442:	2300      	movs	r3, #0
 8007444:	6063      	str	r3, [r4, #4]
 8007446:	6923      	ldr	r3, [r4, #16]
 8007448:	6023      	str	r3, [r4, #0]
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	f043 0308 	orr.w	r3, r3, #8
 8007450:	81a3      	strh	r3, [r4, #12]
 8007452:	6923      	ldr	r3, [r4, #16]
 8007454:	b94b      	cbnz	r3, 800746a <__swsetup_r+0x9a>
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800745c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007460:	d003      	beq.n	800746a <__swsetup_r+0x9a>
 8007462:	4621      	mov	r1, r4
 8007464:	4630      	mov	r0, r6
 8007466:	f000 f929 	bl	80076bc <__smakebuf_r>
 800746a:	89a0      	ldrh	r0, [r4, #12]
 800746c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007470:	f010 0301 	ands.w	r3, r0, #1
 8007474:	d00a      	beq.n	800748c <__swsetup_r+0xbc>
 8007476:	2300      	movs	r3, #0
 8007478:	60a3      	str	r3, [r4, #8]
 800747a:	6963      	ldr	r3, [r4, #20]
 800747c:	425b      	negs	r3, r3
 800747e:	61a3      	str	r3, [r4, #24]
 8007480:	6923      	ldr	r3, [r4, #16]
 8007482:	b943      	cbnz	r3, 8007496 <__swsetup_r+0xc6>
 8007484:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007488:	d1ba      	bne.n	8007400 <__swsetup_r+0x30>
 800748a:	bd70      	pop	{r4, r5, r6, pc}
 800748c:	0781      	lsls	r1, r0, #30
 800748e:	bf58      	it	pl
 8007490:	6963      	ldrpl	r3, [r4, #20]
 8007492:	60a3      	str	r3, [r4, #8]
 8007494:	e7f4      	b.n	8007480 <__swsetup_r+0xb0>
 8007496:	2000      	movs	r0, #0
 8007498:	e7f7      	b.n	800748a <__swsetup_r+0xba>
 800749a:	bf00      	nop
 800749c:	20000168 	.word	0x20000168
 80074a0:	0800790c 	.word	0x0800790c
 80074a4:	0800792c 	.word	0x0800792c
 80074a8:	080078ec 	.word	0x080078ec

080074ac <_close_r>:
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	2300      	movs	r3, #0
 80074b0:	4d05      	ldr	r5, [pc, #20]	; (80074c8 <_close_r+0x1c>)
 80074b2:	4604      	mov	r4, r0
 80074b4:	4608      	mov	r0, r1
 80074b6:	602b      	str	r3, [r5, #0]
 80074b8:	f7f9 f9cb 	bl	8000852 <_close>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d102      	bne.n	80074c6 <_close_r+0x1a>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	b103      	cbz	r3, 80074c6 <_close_r+0x1a>
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
 80074c8:	200009cc 	.word	0x200009cc

080074cc <__sflush_r>:
 80074cc:	898a      	ldrh	r2, [r1, #12]
 80074ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d2:	4605      	mov	r5, r0
 80074d4:	0710      	lsls	r0, r2, #28
 80074d6:	460c      	mov	r4, r1
 80074d8:	d458      	bmi.n	800758c <__sflush_r+0xc0>
 80074da:	684b      	ldr	r3, [r1, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dc05      	bgt.n	80074ec <__sflush_r+0x20>
 80074e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	dc02      	bgt.n	80074ec <__sflush_r+0x20>
 80074e6:	2000      	movs	r0, #0
 80074e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ee:	2e00      	cmp	r6, #0
 80074f0:	d0f9      	beq.n	80074e6 <__sflush_r+0x1a>
 80074f2:	2300      	movs	r3, #0
 80074f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074f8:	682f      	ldr	r7, [r5, #0]
 80074fa:	602b      	str	r3, [r5, #0]
 80074fc:	d032      	beq.n	8007564 <__sflush_r+0x98>
 80074fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	075a      	lsls	r2, r3, #29
 8007504:	d505      	bpl.n	8007512 <__sflush_r+0x46>
 8007506:	6863      	ldr	r3, [r4, #4]
 8007508:	1ac0      	subs	r0, r0, r3
 800750a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800750c:	b10b      	cbz	r3, 8007512 <__sflush_r+0x46>
 800750e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007510:	1ac0      	subs	r0, r0, r3
 8007512:	2300      	movs	r3, #0
 8007514:	4602      	mov	r2, r0
 8007516:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007518:	4628      	mov	r0, r5
 800751a:	6a21      	ldr	r1, [r4, #32]
 800751c:	47b0      	blx	r6
 800751e:	1c43      	adds	r3, r0, #1
 8007520:	89a3      	ldrh	r3, [r4, #12]
 8007522:	d106      	bne.n	8007532 <__sflush_r+0x66>
 8007524:	6829      	ldr	r1, [r5, #0]
 8007526:	291d      	cmp	r1, #29
 8007528:	d82c      	bhi.n	8007584 <__sflush_r+0xb8>
 800752a:	4a2a      	ldr	r2, [pc, #168]	; (80075d4 <__sflush_r+0x108>)
 800752c:	40ca      	lsrs	r2, r1
 800752e:	07d6      	lsls	r6, r2, #31
 8007530:	d528      	bpl.n	8007584 <__sflush_r+0xb8>
 8007532:	2200      	movs	r2, #0
 8007534:	6062      	str	r2, [r4, #4]
 8007536:	6922      	ldr	r2, [r4, #16]
 8007538:	04d9      	lsls	r1, r3, #19
 800753a:	6022      	str	r2, [r4, #0]
 800753c:	d504      	bpl.n	8007548 <__sflush_r+0x7c>
 800753e:	1c42      	adds	r2, r0, #1
 8007540:	d101      	bne.n	8007546 <__sflush_r+0x7a>
 8007542:	682b      	ldr	r3, [r5, #0]
 8007544:	b903      	cbnz	r3, 8007548 <__sflush_r+0x7c>
 8007546:	6560      	str	r0, [r4, #84]	; 0x54
 8007548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800754a:	602f      	str	r7, [r5, #0]
 800754c:	2900      	cmp	r1, #0
 800754e:	d0ca      	beq.n	80074e6 <__sflush_r+0x1a>
 8007550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007554:	4299      	cmp	r1, r3
 8007556:	d002      	beq.n	800755e <__sflush_r+0x92>
 8007558:	4628      	mov	r0, r5
 800755a:	f000 f909 	bl	8007770 <_free_r>
 800755e:	2000      	movs	r0, #0
 8007560:	6360      	str	r0, [r4, #52]	; 0x34
 8007562:	e7c1      	b.n	80074e8 <__sflush_r+0x1c>
 8007564:	6a21      	ldr	r1, [r4, #32]
 8007566:	2301      	movs	r3, #1
 8007568:	4628      	mov	r0, r5
 800756a:	47b0      	blx	r6
 800756c:	1c41      	adds	r1, r0, #1
 800756e:	d1c7      	bne.n	8007500 <__sflush_r+0x34>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0c4      	beq.n	8007500 <__sflush_r+0x34>
 8007576:	2b1d      	cmp	r3, #29
 8007578:	d001      	beq.n	800757e <__sflush_r+0xb2>
 800757a:	2b16      	cmp	r3, #22
 800757c:	d101      	bne.n	8007582 <__sflush_r+0xb6>
 800757e:	602f      	str	r7, [r5, #0]
 8007580:	e7b1      	b.n	80074e6 <__sflush_r+0x1a>
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007588:	81a3      	strh	r3, [r4, #12]
 800758a:	e7ad      	b.n	80074e8 <__sflush_r+0x1c>
 800758c:	690f      	ldr	r7, [r1, #16]
 800758e:	2f00      	cmp	r7, #0
 8007590:	d0a9      	beq.n	80074e6 <__sflush_r+0x1a>
 8007592:	0793      	lsls	r3, r2, #30
 8007594:	bf18      	it	ne
 8007596:	2300      	movne	r3, #0
 8007598:	680e      	ldr	r6, [r1, #0]
 800759a:	bf08      	it	eq
 800759c:	694b      	ldreq	r3, [r1, #20]
 800759e:	eba6 0807 	sub.w	r8, r6, r7
 80075a2:	600f      	str	r7, [r1, #0]
 80075a4:	608b      	str	r3, [r1, #8]
 80075a6:	f1b8 0f00 	cmp.w	r8, #0
 80075aa:	dd9c      	ble.n	80074e6 <__sflush_r+0x1a>
 80075ac:	4643      	mov	r3, r8
 80075ae:	463a      	mov	r2, r7
 80075b0:	4628      	mov	r0, r5
 80075b2:	6a21      	ldr	r1, [r4, #32]
 80075b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075b6:	47b0      	blx	r6
 80075b8:	2800      	cmp	r0, #0
 80075ba:	dc06      	bgt.n	80075ca <__sflush_r+0xfe>
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075c6:	81a3      	strh	r3, [r4, #12]
 80075c8:	e78e      	b.n	80074e8 <__sflush_r+0x1c>
 80075ca:	4407      	add	r7, r0
 80075cc:	eba8 0800 	sub.w	r8, r8, r0
 80075d0:	e7e9      	b.n	80075a6 <__sflush_r+0xda>
 80075d2:	bf00      	nop
 80075d4:	20400001 	.word	0x20400001

080075d8 <_fflush_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	690b      	ldr	r3, [r1, #16]
 80075dc:	4605      	mov	r5, r0
 80075de:	460c      	mov	r4, r1
 80075e0:	b913      	cbnz	r3, 80075e8 <_fflush_r+0x10>
 80075e2:	2500      	movs	r5, #0
 80075e4:	4628      	mov	r0, r5
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	b118      	cbz	r0, 80075f2 <_fflush_r+0x1a>
 80075ea:	6983      	ldr	r3, [r0, #24]
 80075ec:	b90b      	cbnz	r3, 80075f2 <_fflush_r+0x1a>
 80075ee:	f7ff fa4f 	bl	8006a90 <__sinit>
 80075f2:	4b14      	ldr	r3, [pc, #80]	; (8007644 <_fflush_r+0x6c>)
 80075f4:	429c      	cmp	r4, r3
 80075f6:	d11b      	bne.n	8007630 <_fflush_r+0x58>
 80075f8:	686c      	ldr	r4, [r5, #4]
 80075fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0ef      	beq.n	80075e2 <_fflush_r+0xa>
 8007602:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007604:	07d0      	lsls	r0, r2, #31
 8007606:	d404      	bmi.n	8007612 <_fflush_r+0x3a>
 8007608:	0599      	lsls	r1, r3, #22
 800760a:	d402      	bmi.n	8007612 <_fflush_r+0x3a>
 800760c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800760e:	f7ff fadd 	bl	8006bcc <__retarget_lock_acquire_recursive>
 8007612:	4628      	mov	r0, r5
 8007614:	4621      	mov	r1, r4
 8007616:	f7ff ff59 	bl	80074cc <__sflush_r>
 800761a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800761c:	4605      	mov	r5, r0
 800761e:	07da      	lsls	r2, r3, #31
 8007620:	d4e0      	bmi.n	80075e4 <_fflush_r+0xc>
 8007622:	89a3      	ldrh	r3, [r4, #12]
 8007624:	059b      	lsls	r3, r3, #22
 8007626:	d4dd      	bmi.n	80075e4 <_fflush_r+0xc>
 8007628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800762a:	f7ff fad0 	bl	8006bce <__retarget_lock_release_recursive>
 800762e:	e7d9      	b.n	80075e4 <_fflush_r+0xc>
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <_fflush_r+0x70>)
 8007632:	429c      	cmp	r4, r3
 8007634:	d101      	bne.n	800763a <_fflush_r+0x62>
 8007636:	68ac      	ldr	r4, [r5, #8]
 8007638:	e7df      	b.n	80075fa <_fflush_r+0x22>
 800763a:	4b04      	ldr	r3, [pc, #16]	; (800764c <_fflush_r+0x74>)
 800763c:	429c      	cmp	r4, r3
 800763e:	bf08      	it	eq
 8007640:	68ec      	ldreq	r4, [r5, #12]
 8007642:	e7da      	b.n	80075fa <_fflush_r+0x22>
 8007644:	0800790c 	.word	0x0800790c
 8007648:	0800792c 	.word	0x0800792c
 800764c:	080078ec 	.word	0x080078ec

08007650 <_lseek_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4604      	mov	r4, r0
 8007654:	4608      	mov	r0, r1
 8007656:	4611      	mov	r1, r2
 8007658:	2200      	movs	r2, #0
 800765a:	4d05      	ldr	r5, [pc, #20]	; (8007670 <_lseek_r+0x20>)
 800765c:	602a      	str	r2, [r5, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	f7f9 f91b 	bl	800089a <_lseek>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_lseek_r+0x1e>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_lseek_r+0x1e>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	200009cc 	.word	0x200009cc

08007674 <__swhatbuf_r>:
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	460e      	mov	r6, r1
 8007678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800767c:	4614      	mov	r4, r2
 800767e:	2900      	cmp	r1, #0
 8007680:	461d      	mov	r5, r3
 8007682:	b096      	sub	sp, #88	; 0x58
 8007684:	da07      	bge.n	8007696 <__swhatbuf_r+0x22>
 8007686:	2300      	movs	r3, #0
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	89b3      	ldrh	r3, [r6, #12]
 800768c:	061a      	lsls	r2, r3, #24
 800768e:	d410      	bmi.n	80076b2 <__swhatbuf_r+0x3e>
 8007690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007694:	e00e      	b.n	80076b4 <__swhatbuf_r+0x40>
 8007696:	466a      	mov	r2, sp
 8007698:	f000 f8c8 	bl	800782c <_fstat_r>
 800769c:	2800      	cmp	r0, #0
 800769e:	dbf2      	blt.n	8007686 <__swhatbuf_r+0x12>
 80076a0:	9a01      	ldr	r2, [sp, #4]
 80076a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076aa:	425a      	negs	r2, r3
 80076ac:	415a      	adcs	r2, r3
 80076ae:	602a      	str	r2, [r5, #0]
 80076b0:	e7ee      	b.n	8007690 <__swhatbuf_r+0x1c>
 80076b2:	2340      	movs	r3, #64	; 0x40
 80076b4:	2000      	movs	r0, #0
 80076b6:	6023      	str	r3, [r4, #0]
 80076b8:	b016      	add	sp, #88	; 0x58
 80076ba:	bd70      	pop	{r4, r5, r6, pc}

080076bc <__smakebuf_r>:
 80076bc:	898b      	ldrh	r3, [r1, #12]
 80076be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076c0:	079d      	lsls	r5, r3, #30
 80076c2:	4606      	mov	r6, r0
 80076c4:	460c      	mov	r4, r1
 80076c6:	d507      	bpl.n	80076d8 <__smakebuf_r+0x1c>
 80076c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	6123      	str	r3, [r4, #16]
 80076d0:	2301      	movs	r3, #1
 80076d2:	6163      	str	r3, [r4, #20]
 80076d4:	b002      	add	sp, #8
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
 80076d8:	466a      	mov	r2, sp
 80076da:	ab01      	add	r3, sp, #4
 80076dc:	f7ff ffca 	bl	8007674 <__swhatbuf_r>
 80076e0:	9900      	ldr	r1, [sp, #0]
 80076e2:	4605      	mov	r5, r0
 80076e4:	4630      	mov	r0, r6
 80076e6:	f7ff fa73 	bl	8006bd0 <_malloc_r>
 80076ea:	b948      	cbnz	r0, 8007700 <__smakebuf_r+0x44>
 80076ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076f0:	059a      	lsls	r2, r3, #22
 80076f2:	d4ef      	bmi.n	80076d4 <__smakebuf_r+0x18>
 80076f4:	f023 0303 	bic.w	r3, r3, #3
 80076f8:	f043 0302 	orr.w	r3, r3, #2
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	e7e3      	b.n	80076c8 <__smakebuf_r+0xc>
 8007700:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <__smakebuf_r+0x7c>)
 8007702:	62b3      	str	r3, [r6, #40]	; 0x28
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	6020      	str	r0, [r4, #0]
 8007708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800770c:	81a3      	strh	r3, [r4, #12]
 800770e:	9b00      	ldr	r3, [sp, #0]
 8007710:	6120      	str	r0, [r4, #16]
 8007712:	6163      	str	r3, [r4, #20]
 8007714:	9b01      	ldr	r3, [sp, #4]
 8007716:	b15b      	cbz	r3, 8007730 <__smakebuf_r+0x74>
 8007718:	4630      	mov	r0, r6
 800771a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800771e:	f000 f897 	bl	8007850 <_isatty_r>
 8007722:	b128      	cbz	r0, 8007730 <__smakebuf_r+0x74>
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	f023 0303 	bic.w	r3, r3, #3
 800772a:	f043 0301 	orr.w	r3, r3, #1
 800772e:	81a3      	strh	r3, [r4, #12]
 8007730:	89a0      	ldrh	r0, [r4, #12]
 8007732:	4305      	orrs	r5, r0
 8007734:	81a5      	strh	r5, [r4, #12]
 8007736:	e7cd      	b.n	80076d4 <__smakebuf_r+0x18>
 8007738:	08006a29 	.word	0x08006a29

0800773c <memchr>:
 800773c:	4603      	mov	r3, r0
 800773e:	b510      	push	{r4, lr}
 8007740:	b2c9      	uxtb	r1, r1
 8007742:	4402      	add	r2, r0
 8007744:	4293      	cmp	r3, r2
 8007746:	4618      	mov	r0, r3
 8007748:	d101      	bne.n	800774e <memchr+0x12>
 800774a:	2000      	movs	r0, #0
 800774c:	e003      	b.n	8007756 <memchr+0x1a>
 800774e:	7804      	ldrb	r4, [r0, #0]
 8007750:	3301      	adds	r3, #1
 8007752:	428c      	cmp	r4, r1
 8007754:	d1f6      	bne.n	8007744 <memchr+0x8>
 8007756:	bd10      	pop	{r4, pc}

08007758 <__malloc_lock>:
 8007758:	4801      	ldr	r0, [pc, #4]	; (8007760 <__malloc_lock+0x8>)
 800775a:	f7ff ba37 	b.w	8006bcc <__retarget_lock_acquire_recursive>
 800775e:	bf00      	nop
 8007760:	200009c4 	.word	0x200009c4

08007764 <__malloc_unlock>:
 8007764:	4801      	ldr	r0, [pc, #4]	; (800776c <__malloc_unlock+0x8>)
 8007766:	f7ff ba32 	b.w	8006bce <__retarget_lock_release_recursive>
 800776a:	bf00      	nop
 800776c:	200009c4 	.word	0x200009c4

08007770 <_free_r>:
 8007770:	b538      	push	{r3, r4, r5, lr}
 8007772:	4605      	mov	r5, r0
 8007774:	2900      	cmp	r1, #0
 8007776:	d043      	beq.n	8007800 <_free_r+0x90>
 8007778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800777c:	1f0c      	subs	r4, r1, #4
 800777e:	2b00      	cmp	r3, #0
 8007780:	bfb8      	it	lt
 8007782:	18e4      	addlt	r4, r4, r3
 8007784:	f7ff ffe8 	bl	8007758 <__malloc_lock>
 8007788:	4a1e      	ldr	r2, [pc, #120]	; (8007804 <_free_r+0x94>)
 800778a:	6813      	ldr	r3, [r2, #0]
 800778c:	4610      	mov	r0, r2
 800778e:	b933      	cbnz	r3, 800779e <_free_r+0x2e>
 8007790:	6063      	str	r3, [r4, #4]
 8007792:	6014      	str	r4, [r2, #0]
 8007794:	4628      	mov	r0, r5
 8007796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800779a:	f7ff bfe3 	b.w	8007764 <__malloc_unlock>
 800779e:	42a3      	cmp	r3, r4
 80077a0:	d90a      	bls.n	80077b8 <_free_r+0x48>
 80077a2:	6821      	ldr	r1, [r4, #0]
 80077a4:	1862      	adds	r2, r4, r1
 80077a6:	4293      	cmp	r3, r2
 80077a8:	bf01      	itttt	eq
 80077aa:	681a      	ldreq	r2, [r3, #0]
 80077ac:	685b      	ldreq	r3, [r3, #4]
 80077ae:	1852      	addeq	r2, r2, r1
 80077b0:	6022      	streq	r2, [r4, #0]
 80077b2:	6063      	str	r3, [r4, #4]
 80077b4:	6004      	str	r4, [r0, #0]
 80077b6:	e7ed      	b.n	8007794 <_free_r+0x24>
 80077b8:	461a      	mov	r2, r3
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	b10b      	cbz	r3, 80077c2 <_free_r+0x52>
 80077be:	42a3      	cmp	r3, r4
 80077c0:	d9fa      	bls.n	80077b8 <_free_r+0x48>
 80077c2:	6811      	ldr	r1, [r2, #0]
 80077c4:	1850      	adds	r0, r2, r1
 80077c6:	42a0      	cmp	r0, r4
 80077c8:	d10b      	bne.n	80077e2 <_free_r+0x72>
 80077ca:	6820      	ldr	r0, [r4, #0]
 80077cc:	4401      	add	r1, r0
 80077ce:	1850      	adds	r0, r2, r1
 80077d0:	4283      	cmp	r3, r0
 80077d2:	6011      	str	r1, [r2, #0]
 80077d4:	d1de      	bne.n	8007794 <_free_r+0x24>
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	4401      	add	r1, r0
 80077dc:	6011      	str	r1, [r2, #0]
 80077de:	6053      	str	r3, [r2, #4]
 80077e0:	e7d8      	b.n	8007794 <_free_r+0x24>
 80077e2:	d902      	bls.n	80077ea <_free_r+0x7a>
 80077e4:	230c      	movs	r3, #12
 80077e6:	602b      	str	r3, [r5, #0]
 80077e8:	e7d4      	b.n	8007794 <_free_r+0x24>
 80077ea:	6820      	ldr	r0, [r4, #0]
 80077ec:	1821      	adds	r1, r4, r0
 80077ee:	428b      	cmp	r3, r1
 80077f0:	bf01      	itttt	eq
 80077f2:	6819      	ldreq	r1, [r3, #0]
 80077f4:	685b      	ldreq	r3, [r3, #4]
 80077f6:	1809      	addeq	r1, r1, r0
 80077f8:	6021      	streq	r1, [r4, #0]
 80077fa:	6063      	str	r3, [r4, #4]
 80077fc:	6054      	str	r4, [r2, #4]
 80077fe:	e7c9      	b.n	8007794 <_free_r+0x24>
 8007800:	bd38      	pop	{r3, r4, r5, pc}
 8007802:	bf00      	nop
 8007804:	20000204 	.word	0x20000204

08007808 <_read_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4604      	mov	r4, r0
 800780c:	4608      	mov	r0, r1
 800780e:	4611      	mov	r1, r2
 8007810:	2200      	movs	r2, #0
 8007812:	4d05      	ldr	r5, [pc, #20]	; (8007828 <_read_r+0x20>)
 8007814:	602a      	str	r2, [r5, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	f7f8 fffe 	bl	8000818 <_read>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d102      	bne.n	8007826 <_read_r+0x1e>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	b103      	cbz	r3, 8007826 <_read_r+0x1e>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	200009cc 	.word	0x200009cc

0800782c <_fstat_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	2300      	movs	r3, #0
 8007830:	4d06      	ldr	r5, [pc, #24]	; (800784c <_fstat_r+0x20>)
 8007832:	4604      	mov	r4, r0
 8007834:	4608      	mov	r0, r1
 8007836:	4611      	mov	r1, r2
 8007838:	602b      	str	r3, [r5, #0]
 800783a:	f7f9 f815 	bl	8000868 <_fstat>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	d102      	bne.n	8007848 <_fstat_r+0x1c>
 8007842:	682b      	ldr	r3, [r5, #0]
 8007844:	b103      	cbz	r3, 8007848 <_fstat_r+0x1c>
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	bd38      	pop	{r3, r4, r5, pc}
 800784a:	bf00      	nop
 800784c:	200009cc 	.word	0x200009cc

08007850 <_isatty_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	2300      	movs	r3, #0
 8007854:	4d05      	ldr	r5, [pc, #20]	; (800786c <_isatty_r+0x1c>)
 8007856:	4604      	mov	r4, r0
 8007858:	4608      	mov	r0, r1
 800785a:	602b      	str	r3, [r5, #0]
 800785c:	f7f9 f813 	bl	8000886 <_isatty>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d102      	bne.n	800786a <_isatty_r+0x1a>
 8007864:	682b      	ldr	r3, [r5, #0]
 8007866:	b103      	cbz	r3, 800786a <_isatty_r+0x1a>
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	200009cc 	.word	0x200009cc

08007870 <_init>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	bf00      	nop
 8007874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007876:	bc08      	pop	{r3}
 8007878:	469e      	mov	lr, r3
 800787a:	4770      	bx	lr

0800787c <_fini>:
 800787c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787e:	bf00      	nop
 8007880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007882:	bc08      	pop	{r3}
 8007884:	469e      	mov	lr, r3
 8007886:	4770      	bx	lr
